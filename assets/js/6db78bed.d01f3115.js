"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[6437],{46284:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>I,frontMatter:()=>y,metadata:()=>r,toc:()=>f});const r=JSON.parse('{"id":"1backend/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/1backend/list-prompts.api.mdx","sourceDirName":"1backend","slug":"/1backend/list-prompts","permalink":"/docs/1backend/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/1backend/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/1backend/subscribe-to-prompt-responses"}}');var s=i(74848),n=i(28453),o=i(53746),p=i.n(o),a=i(56518),d=i.n(a),c=i(99972),m=i.n(c),l=i(25342),u=i.n(l),g=(i(44215),i(82223),i(24861));const y={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend/1-backend",custom_edit_url:null},h=void 0,b={},f=[];function T(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(g.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(g.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(d(),{parameters:void 0}),"\n",(0,s.jsx)(m(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["or","equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpOr","OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]},subFilters:{description:"SubFilters is used for operations like OR where multiple filters are combined.",items:"circular()",type:"array"}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the `go -> openapi -> go` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., `[42]`.",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(u(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function I(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(T,{...e})}):T(e)}}}]);