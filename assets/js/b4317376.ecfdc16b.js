"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[5928],{45525:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"writing-custom-services/your-first-service","title":"Your first service","description":"While 1Backend itself is written in Go, services that run on 1Backend can be written in any language.","source":"@site/docs/writing-custom-services/your-first-service.md","sourceDirName":"writing-custom-services","slug":"/writing-custom-services/your-first-service","permalink":"/docs/writing-custom-services/your-first-service","draft":false,"unlisted":false,"editUrl":"https://github.com/1backend/1backend/tree/main/docs-source/docs/writing-custom-services/your-first-service.md","tags":[{"inline":true,"label":"test","permalink":"/docs/tags/test"}],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"tags":["test"]},"sidebar":"tutorialSidebar","previous":{"title":"Writing custom services","permalink":"/docs/category/writing-custom-services"},"next":{"title":"Command line","permalink":"/docs/category/command-line"}}');var r=t(74848),i=t(28453);const o={sidebar_position:3,tags:["test"]},c="Your first service",l={},a=[{value:"A Go example",id:"a-go-example",level:2},{value:"Things to understand",id:"things-to-understand",level:2},{value:"Instance registration",id:"instance-registration",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"your-first-service",children:"Your first service"})}),"\n",(0,r.jsx)(n.p,{children:"While 1Backend itself is written in Go, services that run on 1Backend can be written in any language.\nA service only needs a few things to fully function:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Register a user account, just like a human user. For details, see the ",(0,r.jsx)(n.a,{href:"/docs/built-in-services/user-svc",children:"User Svc"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Register its instance in the registry so 1Backend knows where to route requests."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"a-go-example",children:"A Go example"}),"\n",(0,r.jsx)(n.p,{children:"The following Go service demonstrates these steps:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Registers itself as a user with the slug ",(0,r.jsx)(n.code,{children:"skeleton-svc"})]}),"\n",(0,r.jsxs)(n.li,{children:["Registers or updates its URL (",(0,r.jsx)(n.code,{children:"http://127.0.0.1:9311"}),") in the ",(0,r.jsx)(n.a,{href:"/docs/built-in-services/registry-svc",children:"Registry"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'You may notice that the following code uses a "Go SDK," but it\'s simply a set of convenience functions built on top of the 1Backend API.\n1Backend is language-agnostic and can be used with any language, even if no SDK is available in the repository.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// \x3c!-- INCLUDE: ./first-service-go/main.go --\x3e\npackage main\n\nimport (\n\t"context"\n\t"fmt"\n\t"log"\n\t"net/http"\n\t"os"\n\n\topenapi "github.com/1backend/1backend/clients/go"\n\tsdk "github.com/1backend/1backend/sdk/go"\n\t"github.com/pkg/errors"\n)\n\nfunc main() {\n\tskeletonService, err := NewService()\n\tif err != nil {\n\t\tlog.Fatalf("Failed to initialize service: %v", err)\n\t}\n\n\trouter := http.NewServeMux()\n\n\trouter.HandleFunc("/first-go-svc/hello", func(w http.ResponseWriter, r *http.Request) {\n\t\tskeletonService.Hello(w, r)\n\t})\n\n\tlog.Println("Server started on :9311")\n\tlog.Fatal(http.ListenAndServe(":9311", router))\n\n}\n\ntype SkeletonService struct {\n\ttoken string\n}\n\nfunc NewService() (*SkeletonService, error) {\n\tspUrl := os.Getenv("OB_SERVER_URL")\n\tif spUrl == "" {\n\t\treturn nil, errors.New("OB_SERVER_URL cannot be found")\n\t}\n\n\tselfUrl := os.Getenv("OB_SELF_URL")\n\n\tdsf, err := sdk.NewDataStoreFactory(sdk.DataStoreConfig{})\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, "cannot create datastore factory")\n\t}\n\n\tcredentialStore, err := dsf.Create("skeletonSvcCredentials", &sdk.Credential{})\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, "cannot create credential store")\n\t}\n\n\tclient := sdk.NewApiClientFactory(spUrl).Client()\n\ttoken, err := sdk.RegisterServiceAccount(\n\t\tclient.UserSvcAPI,\n\t\t"first-go-svc",\n\t\t"First Go Svc",\n\t\tcredentialStore,\n\t)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, "cannot register service")\n\t}\n\n\tclient = sdk.NewApiClientFactory(spUrl).Client(sdk.WithToken(token.Token))\n\t_, _, err = client.RegistrySvcAPI.\n\t\tRegisterInstance(context.Background()).\n\t\tBody(openapi.RegistrySvcRegisterInstanceRequest{\n\t\t\tUrl: selfUrl,\n\t\t}).Execute()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, "cannot register instance")\n\t}\n\n\trepo := &SkeletonService{\n\t\ttoken: token.Token,\n\t}\n\n\treturn repo, nil\n\n}\n\nfunc (skeleton *SkeletonService) Hello(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, `{"hello": "world"}`)\n}\n// \x3c!-- /INCLUDE --\x3e\n'})}),"\n",(0,r.jsx)(n.p,{children:"Just make sure you run it with the appropriate envars:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"OB_SERVER_URL=http://127.0.0.1:58231 OB_SELF_URL=http://127.0.0.1:9311 go run main.go\n"})}),"\n",(0,r.jsx)(n.p,{children:"Once it's running you will be able to call the 1Backend server proxy and that will proxy to your skeleton service:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'# 127.0.0.1:58231 here is the address of the 1Backend server\n$ curl 127.0.0.1:58231/skeleton-svc/hello\n{"hello": "world"}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This is so you don't have to expose your skeleton service to the outside world, only your 1Backend server."}),"\n",(0,r.jsx)(n.p,{children:"Let's recap how the proxying works:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Service registers an account, acquires the ",(0,r.jsx)(n.code,{children:"skeleton-svc"})," slug."]}),"\n",(0,r.jsxs)(n.li,{children:["Service calls the 1Backend ",(0,r.jsx)(n.a,{href:"/docs/built-in-services/registry-svc",children:"Registry Svc"})," to tell the system an instance of the Skeleton service is available under the URL ",(0,r.jsx)(n.code,{children:"http://127.0.0.1:9311"})]}),"\n",(0,r.jsxs)(n.li,{children:["When you curl the 1Backend server with a path like ",(0,r.jsx)(n.code,{children:"127.0.0.1:58231/skeleton-svc/hello"}),", the first section of the path will be a user account slug. The daemon checks what instances are owned by that slug and routes the request to one of the instances."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ oo instance ls\nID                URL                     STATUS    OWNER SLUG       LAST HEARTBEAT\ninst_eHFTNvAlk9   http://127.0.0.1:9311   Healthy   skeleton-svc     10s ago\n"})}),"\n",(0,r.jsx)(n.h2,{id:"things-to-understand",children:"Things to understand"}),"\n",(0,r.jsx)(n.h3,{id:"instance-registration",children:"Instance registration"}),"\n",(0,r.jsxs)(n.p,{children:["Like most other things on the platform, service instances become owned by a user account slug. When the skeleton service calls ",(0,r.jsx)(n.a,{href:"/docs/1backend/register-instance",children:"RegisterInstance"}),", the host will be associated with the ",(0,r.jsx)(n.code,{children:"skeleton-svc"})," slug."]}),"\n",(0,r.jsx)(n.p,{children:"Updates to this host won't be possible unless the caller is the skeleton service (or the caller is an admin). The service becomes the owner of that URL essentially."}),"\n",(0,r.jsx)(n.p,{children:"This is the same ownership model like in other parts of the 1Backend system."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);