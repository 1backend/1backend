"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[6870],{29746:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>g,contentTitle:()=>m,default:()=>F,frontMatter:()=>h,metadata:()=>i,toc:()=>b});const i=JSON.parse('{"id":"1backend/get-users","title":"List Users","description":"Fetches a list of users with optional query filters and pagination.","source":"@site/docs/1backend/get-users.api.mdx","sourceDirName":"1backend","slug":"/1backend/get-users","permalink":"/docs/1backend/get-users","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"get-users","title":"List Users","description":"Fetches a list of users with optional query filters and pagination.","sidebar_label":"List Users","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Read User by Token","permalink":"/docs/1backend/read-user-by-token"}}');var r=s(74848),n=s(28453),o=s(53746),a=s.n(o),p=s(56518),l=s.n(p),d=s(99972),c=s.n(d),u=s(25342),y=s.n(u),f=(s(44215),s(82223),s(24861));const h={id:"get-users",title:"List Users",description:"Fetches a list of users with optional query filters and pagination.",sidebar_label:"List Users",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend/1-backend",custom_edit_url:null},m=void 0,g={},b=[];function k(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(f.default,{as:"h1",className:"openapi__heading",children:"List Users"}),"\n",(0,r.jsx)(a(),{method:"post",path:"/user-svc/users",context:"endpoint"}),"\n",(0,r.jsx)(t.p,{children:"Fetches a list of users with optional query filters and pagination."}),"\n",(0,r.jsx)(f.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,r.jsx)(l(),{parameters:void 0}),"\n",(0,r.jsx)(c(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["or","equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpOr","OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]},subFilters:{description:"SubFilters is used for operations like OR where multiple filters are combined.",items:"circular()",type:"array"}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the `go -> openapi -> go` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., `[42]`.",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"Get Users Request"}}),"\n",(0,r.jsx)(y(),{id:void 0,label:void 0,responses:{200:{description:"List of users retrieved successfully",content:{"application/json":{schema:{properties:{after:{type:"string"},count:{type:"integer"},users:{items:{properties:{createdAt:{type:"string"},deletedAt:{type:"string"},id:{type:"string"},name:{description:"Full name of the organization.",example:"Jane Doe",type:"string"},passwordHash:{type:"string"},slug:{description:"URL-friendly unique (inside the Singularon platform) identifier for the `user`.",example:"jane-doe",type:"string"},updatedAt:{type:"string"}},required:["id","slug"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function F(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(k,{...e})}):k(e)}}}]);