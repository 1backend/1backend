"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[6437],{46284:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>f,contentTitle:()=>h,default:()=>j,frontMatter:()=>y,metadata:()=>r,toc:()=>b});const r=JSON.parse('{"id":"1backend/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/1backend/list-prompts.api.mdx","sourceDirName":"1backend","slug":"/1backend/list-prompts","permalink":"/docs/1backend/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/1backend/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/1backend/subscribe-to-prompt-responses"}}');var s=i(74848),n=i(28453),o=i(53746),p=i.n(o),a=i(56518),d=i.n(a),c=i(99972),m=i.n(c),l=i(25342),u=i.n(l),g=(i(44215),i(82223),i(24861));const y={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend/1-backend",custom_edit_url:null},h=void 0,f={},b=[];function T(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(g.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(g.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(d(),{parameters:void 0}),"\n",(0,s.jsx)(m(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["or","equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpOr","OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]},subFilters:{description:"SubFilters is used for operations like OR where multiple filters are combined.",items:"circular()",type:"array"}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the `go -> openapi -> go` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., `[42]`.",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(u(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function j(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(T,{...e})}):T(e)}}}]);