"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[3780],{1294:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"built-in-services/proxy-svc","title":"Proxy Svc","description":"The Proxy Svc is a sophisticated reverse proxy and load balancer that handles both internal service routing and edge traffic management with automatic HTTPS certificate provisioning.","source":"@site/docs/built-in-services/proxy-svc.md","sourceDirName":"built-in-services","slug":"/built-in-services/proxy-svc","permalink":"/docs/built-in-services/proxy-svc","draft":false,"unlisted":false,"editUrl":"https://github.com/1backend/1backend/tree/main/docs-source/docs/built-in-services/proxy-svc.md","tags":[{"inline":true,"label":"proxy-svc","permalink":"/docs/tags/proxy-svc"},{"inline":true,"label":"routing","permalink":"/docs/tags/routing"},{"inline":true,"label":"reverse-proxy","permalink":"/docs/tags/reverse-proxy"},{"inline":true,"label":"edge-proxy","permalink":"/docs/tags/edge-proxy"},{"inline":true,"label":"load-balancer","permalink":"/docs/tags/load-balancer"},{"inline":true,"label":"certificates","permalink":"/docs/tags/certificates"},{"inline":true,"label":"https","permalink":"/docs/tags/https"},{"inline":true,"label":"tls","permalink":"/docs/tags/tls"},{"inline":true,"label":"acme","permalink":"/docs/tags/acme"},{"inline":true,"label":"lets-encrypt","permalink":"/docs/tags/lets-encrypt"},{"inline":true,"label":"multitenant","permalink":"/docs/tags/multitenant"}],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15,"tags":["proxy-svc","routing","reverse-proxy","edge-proxy","load-balancer","certificates","https","tls","acme","lets-encrypt","multitenant"]},"sidebar":"tutorialSidebar","previous":{"title":"User Svc","permalink":"/docs/built-in-services/user-svc"},"next":{"title":"Secret Svc","permalink":"/docs/built-in-services/secret-svc"}}');var i=t(74848),s=t(28453);const o={sidebar_position:15,tags:["proxy-svc","routing","reverse-proxy","edge-proxy","load-balancer","certificates","https","tls","acme","lets-encrypt","multitenant"]},a="Proxy Svc",l={},c=[{value:"Architecture &amp; Purpose",id:"architecture--purpose",level:2},{value:"Dual Operation Modes",id:"dual-operation-modes",level:3},{value:"Microfrontends by Path",id:"microfrontends-by-path",level:2},{value:"Example Routes",id:"example-routes",level:3},{value:"How Lookup Works",id:"how-lookup-works",level:3},{value:"Visual Flow",id:"visual-flow",level:3},{value:"CLI Usage",id:"cli-usage",level:2},{value:"Route Management",id:"route-management",level:3},{value:"Route Configuration Files",id:"route-configuration-files",level:3},{value:"Single Route YAML",id:"single-route-yaml",level:4},{value:"Multiple Routes YAML",id:"multiple-routes-yaml",level:4},{value:"Service Proxying (Internal Routing)",id:"service-proxying-internal-routing",level:2},{value:"How Service Routing Works",id:"how-service-routing-works",level:3},{value:"Edge Proxy Flow",id:"edge-proxy-flow",level:3},{value:"Automatic HTTPS Certificates",id:"automatic-https-certificates",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"proxy-svc",children:"Proxy Svc"})}),"\n",(0,i.jsx)(n.p,{children:"The Proxy Svc is a sophisticated reverse proxy and load balancer that handles both internal service routing and edge traffic management with automatic HTTPS certificate provisioning."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This page provides a comprehensive overview of ",(0,i.jsx)(n.code,{children:"Proxy Svc"}),". For detailed API information, refer to the ",(0,i.jsx)(n.a,{href:"/docs/1backend-api/list-routes",children:"Proxy Svc API documentation"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"architecture--purpose",children:"Architecture & Purpose"}),"\n",(0,i.jsxs)(n.p,{children:["Proxy Svc serves as the ",(0,i.jsx)(n.strong,{children:"traffic management layer"})," for 1Backend, providing:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service Proxying"}),": Routes requests to custom services registered in the Registry Svc"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edge Proxying"}),": Handles external HTTPS traffic with automatic TLS termination"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load Balancing"}),": Intelligent distribution with health-aware routing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Certificate Management"}),": Automatic Let's Encrypt certificate provisioning and renewal"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-Tenant Routing"}),": Domain-based routing for multiple applications"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dual-operation-modes",children:"Dual Operation Modes"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TD\n    Client[External Client]\n\n    subgraph "Edge Mode"\n        Edge[Edge Proxy :80/:443]\n        Routes["Saved Routes: domain/path -> target URL"]\n        Targets[Target URLs / Frontends]\n        Edge --\x3e Routes --\x3e Targets\n    end\n\n    subgraph "Service Mode"\n        Internal[Internal Proxy :11337]\n        Registry[Registry Svc]\n        Services[Backend Services]\n        Internal --\x3e |Lookup service slug| Registry --\x3e |Discovered instances| Services\n    end\n\n    Client --\x3e Edge\n    Client --\x3e Internal'}),"\n",(0,i.jsx)(n.h2,{id:"microfrontends-by-path",children:"Microfrontends by Path"}),"\n",(0,i.jsxs)(n.p,{children:["Proxy Svc supports hosting ",(0,i.jsx)(n.strong,{children:"multiple frontends under a single domain"})," by using path-prefix routes. This makes it easy to run a microfrontend architecture without extra gateways."]}),"\n",(0,i.jsx)(n.h3,{id:"example-routes",children:"Example Routes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:['id: "x.localhost"',(0,i.jsx)(n.br,{}),"\n",'target: "',(0,i.jsx)(n.a,{href:"http://root-frontend:8080",children:"http://root-frontend:8080"}),'"']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:['id: "x.localhost/app"',(0,i.jsx)(n.br,{}),"\n",'target: "',(0,i.jsx)(n.a,{href:"http://app-frontend:3000",children:"http://app-frontend:3000"}),'"']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:['id: "x.localhost/app/admin"',(0,i.jsx)(n.br,{}),"\n",'target: "',(0,i.jsx)(n.a,{href:"http://admin-frontend:4000",children:"http://admin-frontend:4000"}),'"']}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"how-lookup-works",children:"How Lookup Works"}),"\n",(0,i.jsxs)(n.p,{children:["When a request comes in, Proxy Svc tries the ",(0,i.jsx)(n.strong,{children:"longest matching prefix"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"/app/admin/settings"})," \u2192 matches ",(0,i.jsx)(n.code,{children:"x.localhost/app/admin"}),(0,i.jsx)(n.br,{}),"\n","\u2192 goes to ",(0,i.jsx)(n.code,{children:"http://admin-frontend:4000/app/admin/settings"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"/app/page"})," \u2192 matches ",(0,i.jsx)(n.code,{children:"x.localhost/app"}),(0,i.jsx)(n.br,{}),"\n","\u2192 goes to ",(0,i.jsx)(n.code,{children:"http://app-frontend:3000/app/page"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"/"})," or anything else \u2192 falls back to ",(0,i.jsx)(n.code,{children:"x.localhost"}),(0,i.jsx)(n.br,{}),"\n","\u2192 goes to ",(0,i.jsx)(n.code,{children:"http://root-frontend:8080/"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"visual-flow",children:"Visual Flow"}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart TD\n    Client["Browser Request to x.localhost/..."]\n\n    subgraph ProxySvc["Proxy Svc Route Matching"]\n      A1["Check host+path: x.localhost/app/admin"]\n      A2["Check host+path: x.localhost/app"]\n      A3["Fallback: x.localhost"]\n    end\n\n    Client --\x3e A1\n    A1 --\x3e|If match| Admin["Admin Frontend (4000)"]\n    A1 --\x3e|Else| A2\n    A2 --\x3e|If match| App["App Frontend (3000)"]\n    A2 --\x3e|Else| A3\n    A3 --\x3e Root["Root Frontend (8080)"]'}),"\n",(0,i.jsx)(n.p,{children:"Benefits:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multiple independent frontends can live under one domain"}),"\n",(0,i.jsx)(n.li,{children:"Deepest path prefix always takes precedence, ensuring /app/admin resolves correctly"}),"\n",(0,i.jsx)(n.li,{children:"Easy to extend: just add more host+path routes"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"cli-usage",children:"CLI Usage"}),"\n",(0,i.jsx)(n.h3,{id:"route-management",children:"Route Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# List all configured routes\noo routes list\n\n# Save routes from YAML file\noo routes save routes.yaml\n\n# Save routes from directory (processes all .yaml files)\noo routes save ./config/routes/\n"})}),"\n",(0,i.jsx)(n.h3,{id:"route-configuration-files",children:"Route Configuration Files"}),"\n",(0,i.jsx)(n.h4,{id:"single-route-yaml",children:"Single Route YAML"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# api-route.yaml\nid: "api.example.com"\ntarget: "http://1backend:11337"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"multiple-routes-yaml",children:"Multiple Routes YAML"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# routes.yaml\n- id: "api.example.com"\n  target: "http://1backend:11337"\n- id: "example.com"\n  target: "http://frontend:8080"\n- id: "cdn.example.com"\n  target: "http://nginx:80"\n- id: "app.example.com"\n  target: "http://react-app:3000"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"service-proxying-internal-routing",children:"Service Proxying (Internal Routing)"}),"\n",(0,i.jsx)(n.h3,{id:"how-service-routing-works",children:"How Service Routing Works"}),"\n",(0,i.jsx)(n.p,{children:"When you send a request to 1Backend:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl http://127.0.0.1:11337/user-svc/login\n"})}),"\n",(0,i.jsx)(n.p,{children:"The routing decision follows this flow:"}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart TD\n    Request["`**Client Request**\n    /user-svc/login`"]\n    BuiltIn{"`Is \'user-svc\'\n    a built-in service?`"}\n    Registry["`**Registry Lookup**\n    Find \'user-svc\' instances`"]\n    Health{"`Any healthy\n    instances?`"}\n    LoadBalance["`**Load Balancing**\n    Select healthy instance`"]\n    Proxy["`**Proxy Request**\n    Forward to target`"]\n    Error404["`**404 Not Found**\n    No instances available`"]\n    Direct["`**Direct Route**\n    Built-in service`"]\n\n    Request --\x3e BuiltIn\n    BuiltIn --\x3e|Yes| Direct\n    BuiltIn --\x3e|No| Registry\n    Registry --\x3e Health\n    Health --\x3e|Yes| LoadBalance\n    Health --\x3e|No| Error404\n    LoadBalance --\x3e Proxy'}),"\n",(0,i.jsx)(n.h3,{id:"edge-proxy-flow",children:"Edge Proxy Flow"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Browser\n    participant EdgeProxy as Edge Proxy :443\n    participant ACME as Let's Encrypt\n    participant Backend as Target Service\n\n    Note over Browser,Backend: First-time domain setup\n    Browser->>EdgeProxy: HTTPS request to myapp.com\n    EdgeProxy->>ACME: Request certificate for myapp.com\n    ACME--\x3e>EdgeProxy: Certificate + Private Key\n    EdgeProxy->>EdgeProxy: Store encrypted certificate\n    EdgeProxy->>Backend: Forward request to http://frontend:8080\n    Backend--\x3e>EdgeProxy: Response\n    EdgeProxy--\x3e>Browser: HTTPS response\n\n    Note over Browser,Backend: Subsequent requests\n    Browser->>EdgeProxy: HTTPS request to myapp.com\n    EdgeProxy->>EdgeProxy: TLS termination with stored cert\n    EdgeProxy->>Backend: Forward request to http://frontend:8080\n    Backend--\x3e>EdgeProxy: Response\n    EdgeProxy--\x3e>Browser: HTTPS response"}),"\n",(0,i.jsx)(n.h3,{id:"automatic-https-certificates",children:"Automatic HTTPS Certificates"}),"\n",(0,i.jsx)(n.p,{children:"The edge proxy automatically handles:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Certificate Provisioning"}),": Requests certificates from Let's Encrypt"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Challenge Handling"}),": Responds to ACME HTTP-01 challenges on port 80"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TLS Termination"}),": Handles SSL/TLS encryption/decryption"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Certificate Renewal"}),": Automatically renews certificates before expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Certificate Storage"}),": Encrypted storage in the database"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"crufter@cruftop:~/1backend$ oo certs ls\nCERT ID                     CREATED AT   UPDATED AT            COMMON NAME                 ISSUER   NOT BEFORE   NOT AFTER    SERIAL\nsingulatron.com             2025-06-08   2025-08-09 14:22:44   singulatron.com             E6       2025-08-09   2025-11-07   34394815\u2026\napi.singulatron.com         2025-06-08   2025-08-09 14:15:47   api.singulatron.com         E5       2025-08-09   2025-11-07   83840157\u2026\nacme_account+key            2025-06-08   2025-06-08 14:12:42\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);