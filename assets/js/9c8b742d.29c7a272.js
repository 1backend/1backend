"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[2374],{44311:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>f,contentTitle:()=>g,default:()=>x,frontMatter:()=>u,metadata:()=>o,toc:()=>T});const o=JSON.parse('{"id":"1backend-api/list-platforms","title":"List Platforms","description":"Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc.","source":"@site/docs/1backend-api/list-platforms.api.mdx","sourceDirName":"1backend-api","slug":"/1backend-api/list-platforms","permalink":"/docs/1backend-api/list-platforms","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-platforms","title":"List Platforms","description":"Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc.","sidebar_label":"List Platforms","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend-api/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"List Models","permalink":"/docs/1backend-api/list-models"},"next":{"title":"Check","permalink":"/docs/1backend-api/check"}}');var n=i(74848),r=i(28453),s=i(57742),a=i.n(s),p=i(78178),c=i.n(p),l=i(19624),d=i.n(l),m=i(96226),h=i.n(m),y=(i(77675),i(19365),i(51107));const u={id:"list-platforms",title:"List Platforms",description:"Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc.",sidebar_label:"List Platforms",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend-api/1-backend",custom_edit_url:null},g=void 0,f={},T=[];function b(e){const t={code:"code",p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(y.default,{as:"h1",className:"openapi__heading",children:"List Platforms"}),"\n",(0,n.jsx)(a(),{method:"post",path:"/model-svc/platforms",context:"endpoint"}),"\n",(0,n.jsx)(t.p,{children:"Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc."}),"\n",(0,n.jsxs)(t.p,{children:["Requires ",(0,n.jsx)(t.code,{children:"model-svc:platform:view"})," permission."]}),"\n",(0,n.jsx)(c(),{parameters:void 0}),"\n",(0,n.jsx)(d(),{title:"Body",body:void 0}),"\n",(0,n.jsx)(h(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{platforms:{items:{properties:{architectures:{properties:{cuda:{allOf:[{properties:{container:{allOf:[{properties:{envars:{description:'Environment variables to be passed to the container (e.g., "DEVICES=all").',items:{properties:{key:{description:"Key is the environment variable name.",type:"string"},value:{description:"Value is the environment variable value.",type:"string"}},type:"object"},type:"array"},imageTemplate:{description:"Template for constructing the container image name.",type:"string"},keeps:{description:"List of container paths that should persist across restarts.",items:{properties:{path:{description:"Path is the absolute path inside the container for the folder that should persist across restarts.",type:"string"},readOnly:{description:"ReadOnly indicates whether the keep is read-only.",type:"boolean"}},type:"object"},type:"array"},port:{description:"Internal port exposed by the container.",type:"integer"}},type:"object"}],description:"Container configuration related to CUDA usage."},cudaVersionPrecision:{description:'Level of precision for selecting the CUDA version when resolving the container image.\n- 2 -> Use "major.minor" (e.g., "12.2")\n- 3 -> Use "major.minor.patch" (e.g., "12.2.0")',type:"integer"},defaultCudaVersion:{description:'Default CUDA version to use (e.g., "12.2" or "12.2.0").',type:"string"},defaultCudnnVersion:{description:"Default cuDNN version to use alongside CUDA.",type:"string"}},type:"object"}],description:"CUDA-specific container parameters, if applicable."},default:{allOf:[{properties:{container:{properties:{envars:{description:'Environment variables to be passed to the container (e.g., "DEVICES=all").',items:{properties:{key:{description:"Key is the environment variable name.",type:"string"},value:{description:"Value is the environment variable value.",type:"string"}},type:"object"},type:"array"},imageTemplate:{description:"Template for constructing the container image name.",type:"string"},keeps:{description:"List of container paths that should persist across restarts.",items:{properties:{path:{description:"Path is the absolute path inside the container for the folder that should persist across restarts.",type:"string"},readOnly:{description:"ReadOnly indicates whether the keep is read-only.",type:"boolean"}},type:"object"},type:"array"},port:{description:"Internal port exposed by the container.",type:"integer"}},type:"object"}},type:"object"}],description:"Default container configuration for non-GPU environments."}},type:"object"},id:{type:"string"},name:{type:"string"},types:{description:"List of prompt types that the AI engine supports.",items:{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]},type:"array"},version:{type:"integer"}},type:"object"},type:"array"}},required:["platforms"],type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function x(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(b,{...e})}):b(e)}}}]);