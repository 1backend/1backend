"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[2793],{53298:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"built-in-services/secret-svc","title":"Secret Svc","description":"The Secret Svc provides secure, encrypted storage for sensitive configuration data in 1Backend. It offers enterprise-grade secret management with multi-tenant access controls, encryption at rest, GitOps integration, and comprehensive audit capabilities.","source":"@site/docs/built-in-services/secret-svc.md","sourceDirName":"built-in-services","slug":"/built-in-services/secret-svc","permalink":"/docs/built-in-services/secret-svc","draft":false,"unlisted":false,"editUrl":"https://github.com/1backend/1backend/tree/main/docs-source/docs/built-in-services/secret-svc.md","tags":[{"inline":true,"label":"secret-svc","permalink":"/docs/tags/secret-svc"},{"inline":true,"label":"secrets","permalink":"/docs/tags/secrets"},{"inline":true,"label":"configuration","permalink":"/docs/tags/configuration"},{"inline":true,"label":"services","permalink":"/docs/tags/services"},{"inline":true,"label":"multitenant","permalink":"/docs/tags/multitenant"},{"inline":true,"label":"encryption","permalink":"/docs/tags/encryption"},{"inline":true,"label":"security","permalink":"/docs/tags/security"}],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"tags":["secret-svc","secrets","configuration","services","multitenant","encryption","security"]},"sidebar":"tutorialSidebar","previous":{"title":"Proxy Svc","permalink":"/docs/built-in-services/proxy-svc"},"next":{"title":"Prompt Svc","permalink":"/docs/built-in-services/prompt-svc"}}');var c=s(74848),i=s(28453);const t={sidebar_position:20,tags:["secret-svc","secrets","configuration","services","multitenant","encryption","security"]},a="Secret Svc",l={},o=[{value:"Access rules",id:"access-rules",level:2},{value:"Read",id:"read",level:3},{value:"Write",id:"write",level:3},{value:"Create",id:"create",level:4},{value:"Update",id:"update",level:4},{value:"Entities",id:"entities",level:2},{value:"Secret",id:"secret",level:3},{value:"Design choices",id:"design-choices",level:2},{value:"Encryption at rest and transit",id:"encryption-at-rest-and-transit",level:3},{value:"Tips",id:"tips",level:3},{value:"Encrypt",id:"encrypt",level:4},{value:"Checksum",id:"checksum",level:5},{value:"Is Secure",id:"is-secure",level:4},{value:"CLI Reference",id:"cli-reference",level:2},{value:"Basic Secret Management",id:"basic-secret-management",level:3},{value:"Secure Encryption Workflow",id:"secure-encryption-workflow",level:3},{value:"Secret Management Commands",id:"secret-management-commands",level:3},{value:"<code>oo secret save</code> - Store Secrets",id:"oo-secret-save---store-secrets",level:4},{value:"<code>oo secret list</code> - View Secrets",id:"oo-secret-list---view-secrets",level:4},{value:"<code>oo secret remove</code> - Delete Secrets",id:"oo-secret-remove---delete-secrets",level:4},{value:"<code>oo secret encrypt</code> - GitOps Encryption",id:"oo-secret-encrypt---gitops-encryption",level:4},{value:"<code>oo secret is-secure</code> - Security Check",id:"oo-secret-is-secure---security-check",level:4},{value:"File-Based Secret Management",id:"file-based-secret-management",level:2},{value:"Single Secret YAML Structure",id:"single-secret-yaml-structure",level:3},{value:"Multiple Secrets YAML Structure",id:"multiple-secrets-yaml-structure",level:3},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Advanced Permission Management",id:"advanced-permission-management",level:2},{value:"Granular Access Control",id:"granular-access-control",level:3},{value:"Permission Types",id:"permission-types",level:4},{value:"User vs &quot;Admin&quot; Access",id:"user-vs-admin-access",level:4},{value:"Permission Scenarios",id:"permission-scenarios",level:3},{value:"Service-to-Service Communication",id:"service-to-service-communication",level:4},{value:"Cross-Team Secret Sharing",id:"cross-team-secret-sharing",level:4},{value:"Encryption and Security",id:"encryption-and-security",level:2},{value:"Supported Checksum Algorithms",id:"supported-checksum-algorithms",level:3},{value:"Encryption Workflow for GitOps",id:"encryption-workflow-for-gitops",level:3},{value:"1. Encrypt Locally",id:"1-encrypt-locally",level:4},{value:"2. Version Control Integration",id:"2-version-control-integration",level:4},{value:"3. Deployment Pipeline",id:"3-deployment-pipeline",level:4},{value:"Real-World Usage Patterns",id:"real-world-usage-patterns",level:2},{value:"Multi-Environment Management",id:"multi-environment-management",level:3},{value:"Development Environment Setup",id:"development-environment-setup",level:4},{value:"Microservices Architecture",id:"microservices-architecture",level:3},{value:"Service-Specific Secret Management",id:"service-specific-secret-management",level:4},{value:"Cross-Service Dependencies",id:"cross-service-dependencies",level:4},{value:"Security Best Practices",id:"security-best-practices",level:2},{value:"Encryption Key Management",id:"encryption-key-management",level:3},{value:"Access Control Best Practices",id:"access-control-best-practices",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"secret-svc",children:"Secret Svc"})}),"\n",(0,c.jsx)(n.p,{children:"The Secret Svc provides secure, encrypted storage for sensitive configuration data in 1Backend. It offers enterprise-grade secret management with multi-tenant access controls, encryption at rest, GitOps integration, and comprehensive audit capabilities."}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:["This page provides comprehensive usage examples and advanced features. For API details, see ",(0,c.jsx)(n.a,{href:"/docs/1backend-api/list-secrets",children:"Secret Svc API documentation"}),"."]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"access-rules",children:"Access rules"}),"\n",(0,c.jsx)(n.h3,{id:"read",children:"Read"}),"\n",(0,c.jsxs)(n.p,{children:["Any logged in user who is amongst a ",(0,c.jsx)(n.code,{children:"Secret"}),"'s ",(0,c.jsx)(n.code,{children:"Readers"})," can read a secret."]}),"\n",(0,c.jsx)(n.h3,{id:"write",children:"Write"}),"\n",(0,c.jsx)(n.h4,{id:"create",children:"Create"}),"\n",(0,c.jsx)(n.p,{children:"Any logged in user can create a secret. Non-admin users can only create secrets with the key prefixed by their slug, ie:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-sh",children:"deploy-svc/EXAMPLE-KEY\n"})}),"\n",(0,c.jsx)(n.p,{children:"vs non-prefixed keys such as"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-sh",children:"EMAIL_API_KEY\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Non-prefixed keys like ",(0,c.jsx)(n.code,{children:"EMAIL_API_KEY"})," can only be created by admin users."]}),"\n",(0,c.jsx)(n.p,{children:"This prefix rule serves two purposes:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:'It is clear which secret keys are "static" and originating from admin users'}),"\n",(0,c.jsx)(n.li,{children:"It can prevent issues where a user claims a key knowing that it might be used later and overwritten/populated by an admin with sensitive information"}),"\n"]}),"\n",(0,c.jsx)(n.h4,{id:"update",children:"Update"}),"\n",(0,c.jsxs)(n.p,{children:["After a key is created further write access is governed by the ",(0,c.jsx)(n.code,{children:"Writers"})," block."]}),"\n",(0,c.jsx)(n.h2,{id:"entities",children:"Entities"}),"\n",(0,c.jsx)(n.h3,{id:"secret",children:"Secret"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:'id: "secr_eG8IvKwB0A"\nkey: "MY_API_KEY"\nvalue: "nNl4X9+@95Z"\n\n# Slugs of services and users who can read the secret\nreaders:\n  - "alice"\n  - "bob"\n\n# Slugs of services and users who can modify the secret\nwriters:\n  - "alice"\n  - "bob"\n\n# Slugs of services and users who can delete the secret\ndeleters:\n  - "service-admin"\n\n# Slugs of services and users who can change the "readers" list\ncanChangeReaders:\n  - "alice"\n\n# Slugs of services and users who can change the "writers" list\ncanChangeWriters:\n  - "alice"\n\n# Slugs of services and users who can change the "deleters" list\ncanChangeDeleters:\n  - "alice"\n'})}),"\n",(0,c.jsx)(n.h2,{id:"design-choices",children:"Design choices"}),"\n",(0,c.jsx)(n.p,{children:"The Secret Svc, like most things in 1Backend, is designed to be simple to reason about."}),"\n",(0,c.jsx)(n.p,{children:"Instead of the 1Backend injecting environment variables into service containers when they are deployed, the services are left to their own devices to read secrets from the Secret Svc through normal service calls, using their credentials."}),"\n",(0,c.jsx)(n.p,{children:"This approach also works for services that you deploy manually (e.g., Kubernetes, Docker Compose) rather than through 1Backend."}),"\n",(0,c.jsx)(n.h3,{id:"encryption-at-rest-and-transit",children:"Encryption at rest and transit"}),"\n",(0,c.jsxs)(n.p,{children:["All data is encrypted using the encryption key provided by the envar ",(0,c.jsx)(n.code,{children:"OB_ENCRYPTION_KEY"})," (see Todo section)."]}),"\n",(0,c.jsx)(n.p,{children:"The server encrypts the secret values before saving them to disk/DB. The secret values are transmitted to readers unencrypted."}),"\n",(0,c.jsx)(n.h3,{id:"tips",children:"Tips"}),"\n",(0,c.jsx)(n.h4,{id:"encrypt",children:"Encrypt"}),"\n",(0,c.jsx)(n.p,{children:"The encrypt command helps you create encrypted YAML files that can be safely stored in source control and integrated into Infrastructure-as-Code (IaC) or GitOps workflows. This ensures sensitive data is protected while enabling automated deployment processes."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-sh",children:"oo secret encrypt example-key example-value\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:'id: "secr_eR6LbYOBK2"\nkey: "example-key"\nvalue: "62bQMQf5wPMrAsJ7+bcZpKBMtA7Ap7DF6xZaioq9jU0="\nencrypted: true\nchecksum: "45a3b25f"\nchecksumAlgorithm: "CRC32"\n'})}),"\n",(0,c.jsx)(n.p,{children:"Save the output to a file and, in your continuous delivery pipeline, apply it:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-sh",children:"oo secret save my-api-key.yaml\n"})}),"\n",(0,c.jsx)(n.h5,{id:"checksum",children:"Checksum"}),"\n",(0,c.jsx)(n.p,{children:"Checksums are optional and serve to verify the integrity of encrypted values. When an already encrypted value is saved in the Secret Svc, the service decodes it and uses the checksum to ensure the value remains intact."}),"\n",(0,c.jsx)(n.h4,{id:"is-secure",children:"Is Secure"}),"\n",(0,c.jsx)(n.p,{children:"After setting up your daemon it's a good idea to check if the Secret Svc is secure:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-sh",children:"$ oo secret is-secure\nService is secure.\n"})}),"\n",(0,c.jsx)(n.p,{children:"This will return successfully if the encryption key has been changed from the default value and all necessary setup steps have been completed."}),"\n",(0,c.jsx)(n.h2,{id:"cli-reference",children:"CLI Reference"}),"\n",(0,c.jsx)(n.h3,{id:"basic-secret-management",children:"Basic Secret Management"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'# Save a simple API key\noo secret save DATABASE_URL "postgresql://user:pass@host:5432/db"\n\n# List all accessible secrets\noo secret list\n\n# Show secret values (unmasked)\noo secret list --show\n\n# Remove a secret by key\noo secret remove --key DATABASE_URL\n'})}),"\n",(0,c.jsx)(n.h3,{id:"secure-encryption-workflow",children:"Secure Encryption Workflow"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'# Encrypt a secret for GitOps (interactive - hides value from terminal)\noo secret encrypt API_KEY\nEnter secret value: [hidden]\n\n# Direct encryption (for automation)\noo secret encrypt API_KEY "super-secret-value"\n\n# Check if service is properly secured\noo secret is-secure\n'})}),"\n",(0,c.jsx)(n.h3,{id:"secret-management-commands",children:"Secret Management Commands"}),"\n",(0,c.jsxs)(n.h4,{id:"oo-secret-save---store-secrets",children:[(0,c.jsx)(n.code,{children:"oo secret save"})," - Store Secrets"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Basic Usage:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# Save key-value pair\noo secret save <key> <value>\n\n# Save from YAML file\noo secret save <file.yaml>\n\n# Save multiple secrets from directory\noo secret save <directory>\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'# API credentials\noo secret save STRIPE_SECRET_KEY "sk_test_abc123"\noo secret save OPENAI_API_KEY "sk-proj-xyz789"\n\n# Database connection\noo secret save DB_PASSWORD "complex-password-123"\n\n# Service-specific secrets (auto-prefixed for non-admin users)\noo secret save auth-svc/JWT_SECRET "jwt-signing-key"\noo secret save payment-svc/WEBHOOK_SECRET "webhook-validation-key"\n'})}),"\n",(0,c.jsxs)(n.h4,{id:"oo-secret-list---view-secrets",children:[(0,c.jsx)(n.code,{children:"oo secret list"})," - View Secrets"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"oo secret list [options]\noo secret list [key-pattern]\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Options:"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"--show"})," - Display actual values (unmasked)"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"--namespace"}),", ",(0,c.jsx)(n.code,{children:"-n"})," - Filter by namespace/app"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# List all secrets (values masked)\noo secret list\n\n# Show actual secret values\noo secret list --show\n\n# Filter by key pattern\noo secret list DATABASE\n"})}),"\n",(0,c.jsxs)(n.h4,{id:"oo-secret-remove---delete-secrets",children:[(0,c.jsx)(n.code,{children:"oo secret remove"})," - Delete Secrets"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"oo secret remove --key <key> [--key <key2>...]\noo secret remove --id <id> [--id <id2>...]\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# Remove by key\noo secret remove --key API_KEY\n\n# Remove multiple by key\noo secret remove --key DB_USER --key DB_PASS\n\n# Remove by ID\noo secret remove --id secr_abc123\n"})}),"\n",(0,c.jsxs)(n.h4,{id:"oo-secret-encrypt---gitops-encryption",children:[(0,c.jsx)(n.code,{children:"oo secret encrypt"})," - GitOps Encryption"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"oo secret encrypt <key> [value]\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'# Interactive encryption (secure - no terminal history)\noo secret encrypt PRODUCTION_API_KEY\nEnter secret value: [hidden]\n\n# Direct encryption for automation\noo secret encrypt STAGING_KEY "staging-value"\n\n# Output ready for version control\noo secret encrypt DATABASE_PASSWORD > secrets/prod-db.yaml\n'})}),"\n",(0,c.jsxs)(n.h4,{id:"oo-secret-is-secure---security-check",children:[(0,c.jsx)(n.code,{children:"oo secret is-secure"})," - Security Check"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# Verify service security configuration\noo secret is-secure\nService is secure.\n\n# Example warning output\noo secret is-secure\nError: secret svc is not secure: it is using the default encryption key\n"})}),"\n",(0,c.jsx)(n.h2,{id:"file-based-secret-management",children:"File-Based Secret Management"}),"\n",(0,c.jsx)(n.h3,{id:"single-secret-yaml-structure",children:"Single Secret YAML Structure"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:'# production-api-key.yaml\nid: "secr_prod_api_001"\nkey: "PRODUCTION_API_KEY"\nvalue: "a37/KUAr4SOYi6Xw9i9T8qo3QCk8WvnzONo47jHAkwk="\nencrypted: true\nchecksum: "45a3b25f"\nchecksumAlgorithm: "CRC32"\n\n# Access control\nreaders:\n  - "payment-svc"\n  - "order-svc"\n  - "admin-team"\nwriters:\n  - "admin-team"\n  - "devops-team"\ndeleters:\n  - "admin-team"\n\n# Permission management\ncanChangeReaders:\n  - "admin-team"\ncanChangeWriters:\n  - "admin-team"\ncanChangeDeleters:\n  - "admin-team"\n'})}),"\n",(0,c.jsx)(n.h3,{id:"multiple-secrets-yaml-structure",children:"Multiple Secrets YAML Structure"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:'# application-secrets.yaml\n- id: "secr_db_primary"\n  key: "DATABASE_URL"\n  value: "encrypted-connection-string"\n  encrypted: true\n  readers: ["api-svc", "worker-svc"]\n  writers: ["admin-team"]\n\n- id: "secr_redis_cache"\n  key: "REDIS_URL"  \n  value: "redis://localhost:6379"\n  encrypted: false\n  readers: ["api-svc", "cache-svc"]\n  writers: ["devops-team"]\n\n- id: "secr_jwt_signing"\n  key: "JWT_SECRET"\n  value: "encrypted-jwt-key"\n  encrypted: true\n  readers: ["auth-svc"]\n  writers: ["security-team"]\n'})}),"\n",(0,c.jsx)(n.h3,{id:"batch-operations",children:"Batch Operations"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# Deploy all production secrets\noo secret save secrets/production/\n\n# Update staging environment\noo secret save environments/staging-secrets.yaml\n"})}),"\n",(0,c.jsx)(n.h2,{id:"advanced-permission-management",children:"Advanced Permission Management"}),"\n",(0,c.jsx)(n.h3,{id:"granular-access-control",children:"Granular Access Control"}),"\n",(0,c.jsx)(n.p,{children:"The Secret Svc implements fine-grained permission management with six distinct access levels:"}),"\n",(0,c.jsx)(n.h4,{id:"permission-types",children:"Permission Types"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"readers"})})," - Can view secret values"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"writers"})})," - Can modify secret values"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"deleters"})})," - Can remove secrets"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"canChangeReaders"})})," - Can modify the readers list"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"canChangeWriters"})})," - Can modify the writers list"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"canChangeDeleters"})})," - Can modify the deleters list"]}),"\n"]}),"\n",(0,c.jsx)(n.h4,{id:"user-vs-admin-access",children:'User vs "Admin" Access'}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Regular Users:"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Can only create secrets with keys prefixed by their user slug"}),"\n",(0,c.jsx)(n.li,{children:"Automatically granted all permissions on their own secrets"}),"\n",(0,c.jsx)(n.li,{children:"Must be explicitly granted access to others' secrets"}),"\n",(0,c.jsx)(n.li,{children:"Need the"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Admin Users:"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Can create secrets with any key name"}),"\n",(0,c.jsx)(n.li,{children:"Have access to all secrets regardless of permission lists"}),"\n",(0,c.jsx)(n.li,{children:"Can modify any secret's permission structure"}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"permission-scenarios",children:"Permission Scenarios"}),"\n",(0,c.jsx)(n.h4,{id:"service-to-service-communication",children:"Service-to-Service Communication"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:'# auth-service-secrets.yaml\n- key: "auth-svc/DATABASE_URL"\n  value: "encrypted-db-connection"\n  encrypted: true\n  readers: ["auth-svc"]           # Only auth service can read\n  writers: ["devops-team"]        # Only devops can update\n  deleters: ["admin-team"]        # Only admins can delete\n\n- key: "auth-svc/JWT_SECRET"\n  value: "encrypted-jwt-key" \n  encrypted: true\n  readers: ["auth-svc", "api-gateway"]  # Both services need access\n  writers: ["security-team"]\n  deleters: ["security-team"]\n'})}),"\n",(0,c.jsx)(n.h4,{id:"cross-team-secret-sharing",children:"Cross-Team Secret Sharing"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:'# shared-infrastructure-secrets.yaml\n- key: "MONITORING_API_KEY"\n  value: "encrypted-monitoring-key"\n  encrypted: true\n  readers: ["platform-team", "sre-team", "monitoring-svc"]\n  writers: ["platform-team"]\n  deleters: ["platform-team"]\n  canChangeReaders: ["platform-team", "sre-team"]  # Both teams can add readers\n  canChangeWriters: ["platform-team"]              # Only platform team controls writers\n'})}),"\n",(0,c.jsx)(n.h2,{id:"encryption-and-security",children:"Encryption and Security"}),"\n",(0,c.jsx)(n.h3,{id:"supported-checksum-algorithms",children:"Supported Checksum Algorithms"}),"\n",(0,c.jsx)(n.p,{children:"The Secret Svc supports multiple checksum algorithms for data integrity verification:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"CRC32"})," (default) - Fast, good for basic integrity checks"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"SHA-256"})," - Cryptographically secure, recommended for production"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"SHA-512"})," - Maximum security, slower performance"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"BLAKE2s"})," - Fast and secure alternative to SHA family"]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"encryption-workflow-for-gitops",children:"Encryption Workflow for GitOps"}),"\n",(0,c.jsx)(n.h4,{id:"1-encrypt-locally",children:"1. Encrypt Locally"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'# Create encrypted secret file\noo secret encrypt PRODUCTION_DATABASE_URL > secrets/prod-db.yaml\n\n# Example output (safe for version control):\n# id: "secr_ABC123"\n# key: "PRODUCTION_DATABASE_URL"\n# value: "a37/KUAr4SOYi6Xw9i9T8qo3QCk8WvnzONo47jHAkwk="\n# encrypted: true\n# checksum: "45a3b25f"\n# checksumAlgorithm: "CRC32"\n'})}),"\n",(0,c.jsx)(n.h4,{id:"2-version-control-integration",children:"2. Version Control Integration"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'# Commit encrypted secrets safely\ngit add secrets/\ngit commit -m "Add production database credentials"\ngit push origin main\n'})}),"\n",(0,c.jsx)(n.h4,{id:"3-deployment-pipeline",children:"3. Deployment Pipeline"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# In CI/CD pipeline\noo secret save secrets/production/\noo secret save secrets/staging/\n\n# Verify deployment\noo secret is-secure\noo secret list --namespace production\n"})}),"\n",(0,c.jsx)(n.h2,{id:"real-world-usage-patterns",children:"Real-World Usage Patterns"}),"\n",(0,c.jsx)(n.h3,{id:"multi-environment-management",children:"Multi-Environment Management"}),"\n",(0,c.jsx)(n.h4,{id:"development-environment-setup",children:"Development Environment Setup"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'# Development secrets (unencrypted for local debugging)\noo secret save dev/DATABASE_URL "postgresql://localhost:5432/myapp_dev"\noo secret save dev/REDIS_URL "redis://localhost:6379"\noo secret save dev/API_KEY "dev-api-key-12345"\n\n# List development secrets\noo secret list --namespace dev\n'})}),"\n",(0,c.jsx)(n.h3,{id:"microservices-architecture",children:"Microservices Architecture"}),"\n",(0,c.jsx)(n.h4,{id:"service-specific-secret-management",children:"Service-Specific Secret Management"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'# Authentication service secrets\noo secret save auth-svc/JWT_SECRET "$(openssl rand -base64 32)"\noo secret save auth-svc/OAUTH_CLIENT_SECRET "oauth-client-secret"\noo secret save auth-svc/PASSWORD_SALT "$(openssl rand -base64 16)"\n\n# Payment service secrets  \noo secret save payment-svc/STRIPE_SECRET_KEY "sk_live_abc123"\noo secret save payment-svc/WEBHOOK_SECRET "whsec_xyz789"\n\n# Email service secrets\noo secret save email-svc/SENDGRID_API_KEY "SG.abc123"\noo secret save email-svc/SMTP_PASSWORD "smtp-password"\n'})}),"\n",(0,c.jsx)(n.h4,{id:"cross-service-dependencies",children:"Cross-Service Dependencies"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:'# shared-service-secrets.yaml\n- key: "shared/DATABASE_URL"\n  value: "encrypted-shared-db-connection"\n  encrypted: true\n  readers: \n    - "auth-svc"\n    - "user-svc" \n    - "payment-svc"\n    - "order-svc"\n  writers: ["dba-team"]\n  deleters: ["admin-team"]\n\n- key: "shared/REDIS_URL"\n  value: "encrypted-redis-connection"\n  encrypted: true\n  readers:\n    - "cache-svc"\n    - "session-svc"\n    - "rate-limiter-svc"\n  writers: ["infrastructure-team"]\n'})}),"\n",(0,c.jsx)(n.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,c.jsx)(n.h3,{id:"encryption-key-management",children:"Encryption Key Management"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Change Default Encryption Key"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'# Always verify encryption is properly configured\noo secret is-secure\n\n# Set strong encryption key in environment\nexport OB_ENCRYPTION_KEY="$(openssl rand -base64 32)"\n'})}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"access-control-best-practices",children:"Access Control Best Practices"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Principle of Least Privilege"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:'# Give minimum necessary access\n- key: "payment-svc/STRIPE_KEY"\n  readers: ["payment-svc"]           # Only payment service\n  writers: ["payment-admin"]         # Only payment administrators\n  deleters: ["security-team"]        # Only security team can delete\n'})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(96540);const c={},i=r.createContext(c);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);