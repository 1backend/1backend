"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[6437],{46284:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>f,contentTitle:()=>g,default:()=>x,frontMatter:()=>h,metadata:()=>i,toc:()=>b});const i=JSON.parse('{"id":"1backend/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/1backend/list-prompts.api.mdx","sourceDirName":"1backend","slug":"/1backend/list-prompts","permalink":"/docs/1backend/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/1backend/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/1backend/subscribe-to-prompt-responses"}}');var s=r(74848),o=r(28453),n=r(53746),p=r.n(n),a=r(56518),c=r.n(a),d=r(99972),l=r.n(d),u=r(25342),m=r.n(u),y=(r(44215),r(82223),r(24861));const h={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend/1-backend",custom_edit_url:null},g=void 0,f={},b=[];function T(e){const t={p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(y.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(y.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(c(),{parameters:void 0}),"\n",(0,s.jsx)(l(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the `go -> openapi -> go` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., `[42]`.",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(m(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function x(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(T,{...e})}):T(e)}}}]);