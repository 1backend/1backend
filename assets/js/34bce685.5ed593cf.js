"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[39],{77863:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>f,contentTitle:()=>u,default:()=>T,frontMatter:()=>g,metadata:()=>i,toc:()=>b});const i=JSON.parse('{"id":"1backend/prompt","title":"Prompt an AI","description":"Sends a prompt and waits for a response if sync is true. If sync is false, adds the prompt to the queue and returns immediately.","source":"@site/docs/1backend/prompt.api.mdx","sourceDirName":"1backend","slug":"/1backend/prompt","permalink":"/docs/1backend/prompt","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"prompt","title":"Prompt an AI","description":"Sends a prompt and waits for a response if sync is true. If sync is false, adds the prompt to the queue and returns immediately.","sidebar_label":"Prompt an AI","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Upsert an Instance","permalink":"/docs/1backend/upsert-instance"},"next":{"title":"List Prompts","permalink":"/docs/1backend/list-prompts"}}');var s=r(74848),o=r(28453),n=r(53746),p=r.n(n),a=r(56518),d=r.n(a),m=r(99972),c=r.n(m),l=r(25342),y=r.n(l),h=(r(44215),r(82223),r(24861));const g={id:"prompt",title:"Prompt an AI",description:"Sends a prompt and waits for a response if sync is true. If sync is false, adds the prompt to the queue and returns immediately.",sidebar_label:"Prompt an AI",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend/1-backend",custom_edit_url:null},u=void 0,f={},b=[];function I(e){const t={code:"code",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(h.default,{as:"h1",className:"openapi__heading",children:"Prompt an AI"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompt",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"Sends a prompt and waits for a response if sync is true. If sync is false, adds the prompt to the queue and returns immediately."}),"\n",(0,s.jsxs)(t.p,{children:["Prompts can be used for ",(0,s.jsx)(t.code,{children:"text-to-text"}),", ",(0,s.jsx)(t.code,{children:"text-to-image"}),", ",(0,s.jsx)(t.code,{children:"image-to-image"}),", and other types of generation.\nIf no model ID is specified, the default model will be used (see ",(0,s.jsx)(t.code,{children:"Model Svc"})," for details). The default model may or may not support the requested generation type."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Prompting Modes"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"High-Level Parameters"}),": Uses predefined parameters relevant to ",(0,s.jsx)(t.code,{children:"text-to-image"}),", ",(0,s.jsx)(t.code,{children:"image-to-image"}),", etc. This mode abstracts away the underlying engine (e.g., LLaMA, Stable Diffusion) and focuses on functionality."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Engine-Specific Parameters"}),": Uses ",(0,s.jsx)(t.code,{children:"engineParameters"})," to directly specify an AI engine, exposing all available parameters for fine-tuned control."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Permissions Required:"})," ",(0,s.jsx)(t.code,{children:"prompt-svc:prompt:create"})]}),"\n",(0,s.jsx)(h.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(d(),{parameters:void 0}),"\n",(0,s.jsx)(c(),{title:"Body",body:{content:{"application/json":{schema:{properties:{engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. Llama, Stable Diffusion) specific parameters"},id:{description:"Id is the unique ID of the prompt.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. Llama, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things synchronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"}},required:["prompt"],type:"object"}}},description:"Add Prompt Request",required:!0}}),"\n",(0,s.jsx)(y(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{prompt:{allOf:[{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"}],description:"Prompt contains the details of the prompt that was just created by this request.\nThis includes the ID, prompt text, status, and other associated metadata."},responseMessage:{allOf:[{properties:{createdAt:{type:"string"},fileIds:{description:"FileIds defines the file attachments the message has.",items:{type:"string"},type:"array"},id:{example:"msg_emSOPlW58o",type:"string"},meta:{additionalProperties:!0,type:"object"},text:{description:'Text content of the message eg. "Hi, what\'s up?"',type:"string"},threadId:{description:"ThreadId of the message.",example:"thr_emSOeEUWAg",type:"string"},updatedAt:{type:"string"},userId:{description:"UserId is the id of the user who wrote the message.\nFor AI messages this field is empty.",type:"string"}},required:["id","threadId"],type:"object"}],description:"Response message contains the response text and files.\nThis field is populated only for synchronous prompts (`sync = true`).\nFor asynchronous prompts, the response will provided in the associated\nmessage identified by the `responseMessageId` of the `promptSvc.prompt` object once the prompt completes."}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function T(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(I,{...e})}):I(e)}}}]);