"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[4830],{47956:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"built-in-services/user-svc","title":"User Svc","description":"The User Svc is the authentication and authorization backbone of 1Backend, providing comprehensive identity management, role-based access control, multi-tenant isolation, and service-to-service authentication. It manages users, tokens, organizations, permissions, and provides the foundation for secure, scalable applications.","source":"@site/docs/built-in-services/user-svc.md","sourceDirName":"built-in-services","slug":"/built-in-services/user-svc","permalink":"/docs/built-in-services/user-svc","draft":false,"unlisted":false,"editUrl":"https://github.com/1backend/1backend/tree/main/docs-source/docs/built-in-services/user-svc.md","tags":[{"inline":true,"label":"user-svc","permalink":"/docs/tags/user-svc"},{"inline":true,"label":"permissions","permalink":"/docs/tags/permissions"},{"inline":true,"label":"roles","permalink":"/docs/tags/roles"},{"inline":true,"label":"authentication","permalink":"/docs/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/docs/tags/authorization"},{"inline":true,"label":"service","permalink":"/docs/tags/service"},{"inline":true,"label":"service to service calls","permalink":"/docs/tags/service-to-service-calls"},{"inline":true,"label":"s2s calls","permalink":"/docs/tags/s-2-s-calls"},{"inline":true,"label":"multitenant","permalink":"/docs/tags/multitenant"}],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"tags":["user-svc","permissions","roles","authentication","authorization","service","service to service calls","s2s calls","multitenant"]},"sidebar":"tutorialSidebar","previous":{"title":"Built-in services","permalink":"/docs/category/built-in-services"},"next":{"title":"Proxy Svc","permalink":"/docs/built-in-services/proxy-svc"}}');var r=s(74848),t=s(28453);const o={sidebar_position:10,tags:["user-svc","permissions","roles","authentication","authorization","service","service to service calls","s2s calls","multitenant"]},a="User Svc",c={},l=[{value:"Quick Start",id:"quick-start",level:2},{value:"Basic Authentication",id:"basic-authentication",level:3},{value:"Service Account Setup",id:"service-account-setup",level:3},{value:"CLI Reference",id:"cli-reference",level:2},{value:"Authentication Commands",id:"authentication-commands",level:3},{value:"<code>oo register</code> - Create New Accounts",id:"oo-register---create-new-accounts",level:4},{value:"<code>oo login</code> - Authenticate",id:"oo-login---authenticate",level:4},{value:"<code>oo whoami</code> - Identity Information",id:"oo-whoami---identity-information",level:4},{value:"<code>oo use</code> - Switch User Context",id:"oo-use---switch-user-context",level:4},{value:"<code>oo token</code> - Access Tokens",id:"oo-token---access-tokens",level:4},{value:"User Management Commands",id:"user-management-commands",level:3},{value:"<code>oo user list</code> - Browse Users",id:"oo-user-list---browse-users",level:4},{value:"Permission Management",id:"permission-management",level:3},{value:"<code>oo permit save</code> - Grant Permissions",id:"oo-permit-save---grant-permissions",level:4},{value:"<code>oo permit list</code> - View Permissions",id:"oo-permit-list---view-permissions",level:4},{value:"Role Enrollment",id:"role-enrollment",level:3},{value:"<code>oo enroll save</code> - Assign Roles",id:"oo-enroll-save---assign-roles",level:4},{value:"<code>oo enroll list</code> - View Enrollments",id:"oo-enroll-list---view-enrollments",level:4},{value:"Service-to-Service Authentication",id:"service-to-service-authentication",level:2},{value:"Service Registration &amp; Authentication",id:"service-registration--authentication",level:3},{value:"1. Service Account Setup",id:"1-service-account-setup",level:4},{value:"2. Permission Configuration",id:"2-permission-configuration",level:4},{value:"3. Service Integration Code",id:"3-service-integration-code",level:4},{value:"CI/CD Service Setup",id:"cicd-service-setup",level:3},{value:"GitHub Actions Service Authentication",id:"github-actions-service-authentication",level:4},{value:"Docker Service Startup",id:"docker-service-startup",level:4},{value:"Organization Management",id:"organization-management",level:2},{value:"Creating Organizations",id:"creating-organizations",level:3},{value:"Organization Role Management",id:"organization-role-management",level:3},{value:"Administrative Roles",id:"administrative-roles",level:4},{value:"Member Roles",id:"member-roles",level:4},{value:"Apply Organization Enrollments",id:"apply-organization-enrollments",level:4},{value:"Organization-Scoped Permissions",id:"organization-scoped-permissions",level:3},{value:"Advanced Permission Patterns",id:"advanced-permission-patterns",level:2},{value:"Hierarchical Role System",id:"hierarchical-role-system",level:3},{value:"Service-Specific Roles",id:"service-specific-roles",level:4},{value:"Cross-Service Access",id:"cross-service-access",level:4},{value:"Dynamic Role Assignment",id:"dynamic-role-assignment",level:3},{value:"Role Enrollment for New Users",id:"role-enrollment-for-new-users",level:4},{value:"Conditional Role Assignment",id:"conditional-role-assignment",level:4},{value:"Multi-Tenant Applications",id:"multi-tenant-applications",level:2},{value:"App-Based Isolation",id:"app-based-isolation",level:3},{value:"Environment Separation",id:"environment-separation",level:4},{value:"Client Separation",id:"client-separation",level:4},{value:"App Context Management",id:"app-context-management",level:3},{value:"Security Patterns",id:"security-patterns",level:2},{value:"Token Management",id:"token-management",level:3},{value:"Token Verification",id:"token-verification",level:4},{value:"Token Refresh Handling",id:"token-refresh-handling",level:4},{value:"Permission Checking",id:"permission-checking",level:3},{value:"Service Permission Validation",id:"service-permission-validation",level:4},{value:"Frontend Permission Checks",id:"frontend-permission-checks",level:4},{value:"Production Deployment Patterns",id:"production-deployment-patterns",level:2},{value:"Service Bootstrap",id:"service-bootstrap",level:3},{value:"Service Registration Script",id:"service-registration-script",level:4},{value:"Kubernetes Service Setup",id:"kubernetes-service-setup",level:4},{value:"Load Balancing &amp; High Availability",id:"load-balancing--high-availability",level:3},{value:"Service Node Registration",id:"service-node-registration",level:4},{value:"Database Access Pattern",id:"database-access-pattern",level:4},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Authentication Issues",id:"common-authentication-issues",level:3},{value:"Invalid Token Errors",id:"invalid-token-errors",level:4},{value:"Permission Denied Issues",id:"permission-denied-issues",level:4},{value:"Service Authentication Failures",id:"service-authentication-failures",level:4},{value:"Role and Organization Issues",id:"role-and-organization-issues",level:3},{value:"Role Assignment Problems",id:"role-assignment-problems",level:4},{value:"Organization Access Issues",id:"organization-access-issues",level:4},{value:"Multi-Tenant Issues",id:"multi-tenant-issues",level:3},{value:"App Context Problems",id:"app-context-problems",level:4},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Frontend Authentication",id:"frontend-authentication",level:3},{value:"React Authentication Hook",id:"react-authentication-hook",level:4},{value:"Vue.js Authentication Store",id:"vuejs-authentication-store",level:4},{value:"Mobile Authentication",id:"mobile-authentication",level:3},{value:"Flutter Authentication Service",id:"flutter-authentication-service",level:4},{value:"API Reference Summary",id:"api-reference-summary",level:2},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"user-svc",children:"User Svc"})}),"\n",(0,r.jsx)(n.p,{children:"The User Svc is the authentication and authorization backbone of 1Backend, providing comprehensive identity management, role-based access control, multi-tenant isolation, and service-to-service authentication. It manages users, tokens, organizations, permissions, and provides the foundation for secure, scalable applications."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["This page provides comprehensive usage examples and advanced patterns. For API details, see ",(0,r.jsx)(n.a,{href:"/docs/1backend-api/login",children:"User Svc API documentation"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(n.h3,{id:"basic-authentication",children:"Basic Authentication"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Register a new user\noo register alice\nEnter password: [hidden]\n\n# Login with existing credentials\noo login alice\nEnter password: [hidden]\n\n# Check current authentication status\noo whoami\n\n# View authentication token\noo token\n\n# Switch between users (if multiple logged in)\noo use bob\n"})}),"\n",(0,r.jsx)(n.h3,{id:"service-account-setup",children:"Service Account Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Register a service account\noo register payment-svc\nEnter password: [secure-service-password]\n\n# Login as service for automation\noo login payment-svc secure-service-password\n\n# Verify service authentication\noo whoami\n"})}),"\n",(0,r.jsx)(n.h2,{id:"cli-reference",children:"CLI Reference"}),"\n",(0,r.jsx)(n.h3,{id:"authentication-commands",children:"Authentication Commands"}),"\n",(0,r.jsxs)(n.h4,{id:"oo-register---create-new-accounts",children:[(0,r.jsx)(n.code,{children:"oo register"})," - Create New Accounts"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"oo register [slug] [password]\noo register [--contact-id email] [--contact-platform email]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Interactive registration (secure - no terminal history)\noo register alice\nEnter password: [hidden]\n\n# Service account registration\noo register payment-service\noo register order-processor\noo register notification-service\n\n# User with contact information\noo register john-doe --contact-id john@company.com --contact-platform email\n\n# Direct registration (automation only - avoid for security)\noo register test-user test-password\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"oo-login---authenticate",children:[(0,r.jsx)(n.code,{children:"oo login"})," - Authenticate"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"oo login [slug] [password]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Interactive login (recommended)\noo login alice\nEnter password: [hidden]\n\n# Service authentication in CI/CD\noo login payment-svc $SERVICE_PASSWORD\n\n# Quick development login (avoid in production)\noo login dev-user dev-password\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"oo-whoami---identity-information",children:[(0,r.jsx)(n.code,{children:"oo whoami"})," - Identity Information"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"oo whoami [--all]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Current user information\noo whoami\n\n# All logged in users\noo whoami --all\n\n# Example output:\n# id: usr_abc123\n# slug: alice\n# roles:\n#   - user-svc:user\n#   - user-svc:org:org_xyz789:admin\n#   - payment-svc:processor\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"oo-use---switch-user-context",children:[(0,r.jsx)(n.code,{children:"oo use"})," - Switch User Context"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Switch to different authenticated user\noo use payment-svc\noo use alice\noo use admin-user\n\n# Verify switch\noo whoami\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"oo-token---access-tokens",children:[(0,r.jsx)(n.code,{children:"oo token"})," - Access Tokens"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Get current authentication token\noo token\n\n# Use in API calls\ncurl -H "Authorization: Bearer $(oo token)" \\\n  https://api.1backend.com/user-svc/self\n'})}),"\n",(0,r.jsx)(n.h3,{id:"user-management-commands",children:"User Management Commands"}),"\n",(0,r.jsxs)(n.h4,{id:"oo-user-list---browse-users",children:[(0,r.jsx)(n.code,{children:"oo user list"})," - Browse Users"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"oo user list [--userId id] [--contactId email] [--limit count]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# List all users (admin required)\noo user list\n\n# Find specific user\noo user list --userId usr_abc123\n\n# Find by email\noo user list --contactId alice@company.com\n\n# Paginated results\noo user list --limit 50\n"})}),"\n",(0,r.jsx)(n.h3,{id:"permission-management",children:"Permission Management"}),"\n",(0,r.jsxs)(n.h4,{id:"oo-permit-save---grant-permissions",children:[(0,r.jsx)(n.code,{children:"oo permit save"})," - Grant Permissions"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"oo permit save <permit-file.yaml>\noo permit save <permits-directory>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Single Permit Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# api-access-permit.yaml\nid: "payment-api-access"\npermissionId: "payment-svc:process"\nslugs:\n  - "order-service"\n  - "subscription-service"\nroles:\n  - "payment-svc:processor"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Multiple Permits Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# service-permissions.yaml\n- id: "chat-read-permit"\n  permissionId: "chat-svc:message:read"\n  slugs: ["frontend-app", "mobile-app"]\n  \n- id: "chat-write-permit"\n  permissionId: "chat-svc:message:create"\n  roles: ["chat-svc:user"]\n  \n- id: "admin-chat-permit"\n  permissionId: "chat-svc:admin"\n  roles: ["user-svc:admin"]\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Apply Permits:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Save single permit\noo permit save api-access-permit.yaml\n\n# Save multiple permits\noo permit save service-permissions.yaml\n\n# Save from directory\noo permit save permissions/production/\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"oo-permit-list---view-permissions",children:[(0,r.jsx)(n.code,{children:"oo permit list"})," - View Permissions"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# List all permits (admin required)\noo permit list\n\n# Example output:\n# PERMIT ID          PERMISSION              SLUGS               ROLES\n# payment-api-access payment-svc:process     order-service       payment-svc:processor\n# chat-read-permit   chat-svc:message:read   frontend-app        \n"})}),"\n",(0,r.jsx)(n.h3,{id:"role-enrollment",children:"Role Enrollment"}),"\n",(0,r.jsxs)(n.h4,{id:"oo-enroll-save---assign-roles",children:[(0,r.jsx)(n.code,{children:"oo enroll save"})," - Assign Roles"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"oo enroll save <role> --userId <id>\noo enroll save <role> --contactId <email>\noo enroll save <enroll-file.yaml>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Direct Enrollment:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Enroll user to admin role\noo enroll save user-svc:admin --userId usr_abc123\n\n# Enroll by email (future user)\noo enroll save payment-svc:processor --contactId alice@company.com\n\n# Organization role\noo enroll save user-svc:org:org_xyz789:admin --userId usr_def456\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"File-Based Enrollment:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# team-enrollments.yaml\n- id: "admin-enrollment-1"\n  role: "user-svc:admin"\n  contactId: "admin@company.com"\n\n- id: "dev-team-enrollment"\n  role: "dev-team:developer"\n  contactId: "developer@company.com"\n\n- id: "payment-processor-enrollment"\n  role: "payment-svc:processor"\n  userId: "usr_abc123"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Apply enrollments\noo enroll save team-enrollments.yaml\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"oo-enroll-list---view-enrollments",children:[(0,r.jsx)(n.code,{children:"oo enroll list"})," - View Enrollments"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"oo enroll list [--role role] [--userId id] [--contactId email]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# List all enrollments\noo enroll list\n\n# Filter by role\noo enroll list --role user-svc:admin\n\n# Filter by user\noo enroll list --userId usr_abc123\n\n# Filter by contact\noo enroll list --contactId alice@company.com\n"})}),"\n",(0,r.jsx)(n.h2,{id:"service-to-service-authentication",children:"Service-to-Service Authentication"}),"\n",(0,r.jsx)(n.h3,{id:"service-registration--authentication",children:"Service Registration & Authentication"}),"\n",(0,r.jsx)(n.h4,{id:"1-service-account-setup",children:"1. Service Account Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Register service account\noo register payment-processor\nEnter password: [secure-service-password]\n\n# Login as service\noo login payment-processor\nEnter password: [secure-service-password]\n\n# Verify service identity\noo whoami\n# Output:\n# id: usr_svc_001\n# slug: payment-processor\n# roles:\n#   - user-svc:user\n"})}),"\n",(0,r.jsx)(n.h4,{id:"2-permission-configuration",children:"2. Permission Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# payment-service-permissions.yaml\n- id: "payment-database-access"\n  permissionId: "data-svc:read"\n  slugs:\n    - "payment-processor"\n    \n- id: "payment-write-access"\n  permissionId: "data-svc:write"\n  slugs:\n    - "payment-processor"\n    \n- id: "notification-send"\n  permissionId: "email-svc:send"\n  slugs:\n    - "payment-processor"\n    \n- id: "secret-access"\n  permissionId: "secret-svc:secret:list"\n  slugs:\n    - "payment-processor"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Apply service permissions\noo permit save payment-service-permissions.yaml\n"})}),"\n",(0,r.jsx)(n.h4,{id:"3-service-integration-code",children:"3. Service Integration Code"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Go Service Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// payment-service/main.go\npackage main\n\nimport (\n    "context"\n    "log"\n    "os"\n    \n    "github.com/1backend/1backend/clients/go"\n    "github.com/1backend/1backend/sdk/go/client"\n    "github.com/1backend/1backend/sdk/go/boot"\n)\n\nfunc main() {\n    // Service authentication\n    clientFactory := client.NewApiClientFactory(os.Getenv("ONEBACKEND_URL"))\n    \n    // Register or login service account\n    token, err := boot.RegisterServiceAccount(\n        clientFactory.Client().UserSvcAPI,\n        "payment-processor",\n        "Payment Processing Service",\n        credentialStore, // Your credential storage\n    )\n    if err != nil {\n        log.Fatal("Failed to authenticate service:", err)\n    }\n    \n    // Use authenticated client for service calls\n    authenticatedClient := clientFactory.Client(client.WithToken(token.Token))\n    \n    // Example: Access secrets\n    secrets, _, err := authenticatedClient.SecretSvcAPI.ListSecrets(context.Background()).\n        Body(openapi.SecretSvcListSecretsRequest{\n            Keys: []string{"STRIPE_SECRET_KEY", "DATABASE_URL"},\n        }).Execute()\n    if err != nil {\n        log.Fatal("Failed to load secrets:", err)\n    }\n    \n    // Example: Check permissions\n    hasPermission, _, err := authenticatedClient.UserSvcAPI.HasPermission(context.Background(), "data-svc:write").Execute()\n    if err != nil || !hasPermission.Authorized {\n        log.Fatal("Service lacks required permissions")\n    }\n    \n    // Start service with authenticated context\n    startPaymentProcessor(authenticatedClient)\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Node.js Service Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// notification-service/index.js\nconst { UserSvcApi, SecretSvcApi, Configuration } = require('@1backend/client');\n\nasync function authenticateService() {\n    const config = new Configuration({\n        basePath: process.env.ONEBACKEND_URL,\n    });\n    \n    const userApi = new UserSvcApi(config);\n    \n    // Service login\n    const loginResponse = await userApi.login({\n        slug: 'notification-service',\n        password: process.env.SERVICE_PASSWORD,\n        device: 'server'\n    });\n    \n    // Update config with token\n    config.accessToken = loginResponse.token.token;\n    \n    return config;\n}\n\nasync function loadServiceSecrets(config) {\n    const secretApi = new SecretSvcApi(config);\n    \n    const secrets = await secretApi.listSecrets({\n        keys: ['SENDGRID_API_KEY', 'NOTIFICATION_TEMPLATES']\n    });\n    \n    return secrets.secrets.reduce((acc, secret) => {\n        acc[secret.key] = secret.value;\n        return acc;\n    }, {});\n}\n\nasync function main() {\n    try {\n        const config = await authenticateService();\n        const secrets = await loadServiceSecrets(config);\n        \n        // Start notification service with authenticated context\n        startNotificationService(config, secrets);\n    } catch (error) {\n        console.error('Service authentication failed:', error);\n        process.exit(1);\n    }\n}\n\nmain();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"cicd-service-setup",children:"CI/CD Service Setup"}),"\n",(0,r.jsx)(n.h4,{id:"github-actions-service-authentication",children:"GitHub Actions Service Authentication"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/deploy-payment-service.yml\nname: Deploy Payment Service\non:\n  push:\n    branches: [main]\n    paths: ['payment-service/**']\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      \n      - name: Setup 1Backend CLI\n        run: |\n          curl -L https://releases.1backend.com/oo-linux -o oo\n          chmod +x oo\n          \n      - name: Configure Environment\n        run: |\n          ./oo env add production ${{ secrets.ONEBACKEND_URL }}\n          ./oo env use production\n          \n      - name: Service Authentication\n        run: |\n          ./oo login payment-processor ${{ secrets.SERVICE_PASSWORD }}\n          \n      - name: Deploy Service Permissions\n        run: |\n          ./oo permit save deploy/permissions/\n          ./oo enroll save deploy/enrollments/\n          \n      - name: Verify Service Setup\n        run: |\n          ./oo whoami\n          ./oo permit list\n"})}),"\n",(0,r.jsx)(n.h4,{id:"docker-service-startup",children:"Docker Service Startup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'# payment-service/Dockerfile\nFROM node:18-alpine\n\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nCOPY . .\n\n# Service authentication in container\nENV ONEBACKEND_URL=${ONEBACKEND_URL}\nENV SERVICE_PASSWORD=${SERVICE_PASSWORD}\n\nCMD ["node", "src/index.js"]\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Docker Compose with service authentication\nversion: '3.8'\nservices:\n  payment-service:\n    build: ./payment-service\n    environment:\n      - ONEBACKEND_URL=${ONEBACKEND_URL}\n      - SERVICE_PASSWORD=${PAYMENT_SERVICE_PASSWORD}\n    restart: unless-stopped\n    \n  notification-service:\n    build: ./notification-service\n    environment:\n      - ONEBACKEND_URL=${ONEBACKEND_URL}\n      - SERVICE_PASSWORD=${NOTIFICATION_SERVICE_PASSWORD}\n    restart: unless-stopped\n"})}),"\n",(0,r.jsx)(n.h2,{id:"organization-management",children:"Organization Management"}),"\n",(0,r.jsx)(n.h3,{id:"creating-organizations",children:"Creating Organizations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create organization (via API or SDK)\n# Organizations are typically created programmatically\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create Organization via SDK:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Create organization\norg, _, err := client.UserSvcAPI.SaveOrganization(context.Background()).\n    Body(openapi.UserSvcSaveOrganizationRequest{\n        Organization: &openapi.UserSvcOrganizationInput{\n            Name: openapi.PtrString("Acme Corporation"),\n            Slug: openapi.PtrString("acme-corp"),\n        },\n    }).Execute()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"organization-role-management",children:"Organization Role Management"}),"\n",(0,r.jsx)(n.h4,{id:"administrative-roles",children:"Administrative Roles"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# organization-admin-enrollments.yaml\n- id: "acme-corp-ceo"\n  role: "user-svc:org:org_acme123:admin"\n  contactId: "ceo@acme.com"\n  \n- id: "acme-corp-cto"\n  role: "user-svc:org:org_acme123:admin"\n  contactId: "cto@acme.com"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"member-roles",children:"Member Roles"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# organization-member-enrollments.yaml\n- id: "acme-developer-1"\n  role: "user-svc:org:org_acme123:user"\n  contactId: "developer1@acme.com"\n  \n- id: "acme-developer-2"\n  role: "user-svc:org:org_acme123:user"\n  contactId: "developer2@acme.com"\n  \n- id: "acme-designer"\n  role: "user-svc:org:org_acme123:user"\n  contactId: "designer@acme.com"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"apply-organization-enrollments",children:"Apply Organization Enrollments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Setup organization structure\noo enroll save organization-admin-enrollments.yaml\noo enroll save organization-member-enrollments.yaml\n\n# Verify organization setup\noo enroll list --role user-svc:org:org_acme123:admin\noo enroll list --role user-svc:org:org_acme123:user\n"})}),"\n",(0,r.jsx)(n.h3,{id:"organization-scoped-permissions",children:"Organization-Scoped Permissions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# organization-scoped-permissions.yaml\n- id: "acme-project-management"\n  permissionId: "project-svc:manage"\n  roles:\n    - "user-svc:org:org_acme123:admin"\n    \n- id: "acme-project-view"\n  permissionId: "project-svc:view"\n  roles:\n    - "user-svc:org:org_acme123:user"\n    - "user-svc:org:org_acme123:admin"\n    \n- id: "acme-billing-access"\n  permissionId: "billing-svc:access"\n  roles:\n    - "user-svc:org:org_acme123:admin"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-permission-patterns",children:"Advanced Permission Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"hierarchical-role-system",children:"Hierarchical Role System"}),"\n",(0,r.jsx)(n.h4,{id:"service-specific-roles",children:"Service-Specific Roles"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# payment-service-roles.yaml\n- id: "payment-admin-permissions"\n  permissionId: "payment-svc:admin"\n  roles:\n    - "payment-svc:admin"\n    \n- id: "payment-processor-permissions"\n  permissionId: "payment-svc:process"\n  roles:\n    - "payment-svc:processor"\n    - "payment-svc:admin"  # Admins can also process\n    \n- id: "payment-viewer-permissions"\n  permissionId: "payment-svc:view"\n  roles:\n    - "payment-svc:viewer"\n    - "payment-svc:processor"  # Processors can view\n    - "payment-svc:admin"      # Admins can view\n'})}),"\n",(0,r.jsx)(n.h4,{id:"cross-service-access",children:"Cross-Service Access"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# cross-service-permissions.yaml\n- id: "api-gateway-user-access"\n  permissionId: "user-svc:user:view"\n  slugs:\n    - "api-gateway"\n    \n- id: "frontend-chat-access"\n  permissionId: "chat-svc:message:create"\n  slugs:\n    - "frontend-app"\n    - "mobile-app"\n    \n- id: "admin-panel-access"\n  permissionId: "admin-svc:access"\n  roles:\n    - "user-svc:admin"\n    - "user-svc:org:*:admin"  # Any org admin\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-role-assignment",children:"Dynamic Role Assignment"}),"\n",(0,r.jsx)(n.h4,{id:"role-enrollment-for-new-users",children:"Role Enrollment for New Users"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# new-user-auto-enrollments.yaml\n- id: "default-user-role"\n  role: "user-svc:user"\n  contactId: "*"  # Auto-enroll all new users\n  \n- id: "developer-team-auto"\n  role: "dev-team:developer"\n  contactId: "*@company.com"  # Auto-enroll company emails\n  \n- id: "premium-user-enrollment"\n  role: "app:premium"\n  contactId: "premium@company.com"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"conditional-role-assignment",children:"Conditional Role Assignment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Enroll users based on conditions\noo enroll save dev-team:lead --contactId lead-dev@company.com\noo enroll save payment-svc:processor --userId usr_experienced_dev\noo enroll save user-svc:org:org_startup:admin --contactId founder@startup.com\n"})}),"\n",(0,r.jsx)(n.h2,{id:"multi-tenant-applications",children:"Multi-Tenant Applications"}),"\n",(0,r.jsx)(n.h3,{id:"app-based-isolation",children:"App-Based Isolation"}),"\n",(0,r.jsx)(n.h4,{id:"environment-separation",children:"Environment Separation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# production-app-setup.yaml\napp: "production.mycompany.com"\npermits:\n  - id: "prod-api-access"\n    permissionId: "api-svc:access"\n    roles: ["api-svc:user"]\n    \nenrollments:\n  - id: "prod-admin"\n    role: "user-svc:admin"\n    contactId: "admin@mycompany.com"\n    app: "production.mycompany.com"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# staging-app-setup.yaml\napp: "staging.mycompany.com"\npermits:\n  - id: "staging-api-access"\n    permissionId: "api-svc:access"\n    roles: ["api-svc:user"]\n    \nenrollments:\n  - id: "staging-admin"\n    role: "user-svc:admin"\n    contactId: "dev@mycompany.com"\n    app: "staging.mycompany.com"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"client-separation",children:"Client Separation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# client-a-setup.yaml\napp: "client-a.com"\npermits:\n  - id: "client-a-data-access"\n    permissionId: "data-svc:read"\n    roles: ["client-a:user"]\n    \nenrollments:\n  - id: "client-a-admin"\n    role: "client-a:admin"\n    contactId: "admin@client-a.com"\n    app: "client-a.com"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# client-b-setup.yaml\napp: "client-b.com"\npermits:\n  - id: "client-b-data-access"\n    permissionId: "data-svc:read"\n    roles: ["client-b:user"]\n    \nenrollments:\n  - id: "client-b-admin"\n    role: "client-b:admin"\n    contactId: "admin@client-b.com"\n    app: "client-b.com"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"app-context-management",children:"App Context Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Configure different app environments\noo env add client-a https://client-a.1backend.com\noo env add client-b https://client-b.1backend.com\noo env add production https://prod.1backend.com\n\n# Switch between clients\noo env use client-a\noo login admin@client-a.com\n\noo env use client-b\noo login admin@client-b.com\n\n# Verify app isolation\noo whoami  # Shows different roles per app\n"})}),"\n",(0,r.jsx)(n.h2,{id:"security-patterns",children:"Security Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"token-management",children:"Token Management"}),"\n",(0,r.jsx)(n.h4,{id:"token-verification",children:"Token Verification"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Verify JWT token in service\nfunc verifyToken(tokenString string) (*auth.Claims, error) {\n    // Get public key from User Svc\n    publicKey, _, err := userClient.GetPublicKey(context.Background()).Execute()\n    if err != nil {\n        return nil, err\n    }\n    \n    // Parse and verify token\n    authorizer := auth.AuthorizerImpl{}\n    claims, err := authorizer.ParseJWT(publicKey.PublicKey, tokenString)\n    if err != nil {\n        return nil, err\n    }\n    \n    return claims, nil\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"token-refresh-handling",children:"Token Refresh Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Handle token refresh in client\nasync function makeAuthenticatedRequest(url, options = {}) {\n    let token = localStorage.getItem('auth_token');\n    \n    options.headers = {\n        ...options.headers,\n        'Authorization': `Bearer ${token}`\n    };\n    \n    let response = await fetch(url, options);\n    \n    // Handle token expiration\n    if (response.status === 401) {\n        // Refresh token\n        const refreshResponse = await fetch('/user-svc/refresh-token', {\n            method: 'POST',\n            headers: { 'Authorization': `Bearer ${token}` }\n        });\n        \n        if (refreshResponse.ok) {\n            const { token: newToken } = await refreshResponse.json();\n            localStorage.setItem('auth_token', newToken);\n            \n            // Retry original request\n            options.headers['Authorization'] = `Bearer ${newToken}`;\n            response = await fetch(url, options);\n        }\n    }\n    \n    return response;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"permission-checking",children:"Permission Checking"}),"\n",(0,r.jsx)(n.h4,{id:"service-permission-validation",children:"Service Permission Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Check permissions in service handler\nfunc requirePermission(permission string) middleware.Middleware {\n    return func(next http.Handler) http.Handler {\n        return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n            token := extractTokenFromHeader(r)\n            if token == "" {\n                http.Error(w, "Unauthorized", http.StatusUnauthorized)\n                return\n            }\n            \n            // Check permission with User Svc\n            hasPermResponse, _, err := userClient.HasPermission(\n                r.Context(), \n                permission,\n            ).Execute()\n            \n            if err != nil || !hasPermResponse.Authorized {\n                http.Error(w, "Forbidden", http.StatusForbidden)\n                return\n            }\n            \n            // Add user context to request\n            ctx := context.WithValue(r.Context(), "user", hasPermResponse.User)\n            next.ServeHTTP(w, r.WithContext(ctx))\n        })\n    }\n}\n\n// Usage in handlers\nfunc setupRoutes() {\n    http.Handle("/api/payments", \n        requirePermission("payment-svc:process")(\n            http.HandlerFunc(handlePayments)\n        )\n    )\n    \n    http.Handle("/api/admin", \n        requirePermission("payment-svc:admin")(\n            http.HandlerFunc(handleAdmin)\n        )\n    )\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"frontend-permission-checks",children:"Frontend Permission Checks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Permission-based UI rendering\nclass PermissionGuard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasPermission: false, loading: true };\n    }\n    \n    async componentDidMount() {\n        try {\n            const response = await makeAuthenticatedRequest(\n                `/user-svc/self/has/${this.props.permission}`,\n                { method: 'POST' }\n            );\n            const result = await response.json();\n            this.setState({ \n                hasPermission: result.authorized,\n                loading: false \n            });\n        } catch (error) {\n            this.setState({ hasPermission: false, loading: false });\n        }\n    }\n    \n    render() {\n        if (this.state.loading) {\n            return <div>Loading...</div>;\n        }\n        \n        if (!this.state.hasPermission) {\n            return this.props.fallback || null;\n        }\n        \n        return this.props.children;\n    }\n}\n\n// Usage\nfunction AdminPanel() {\n    return (\n        <PermissionGuard \n            permission=\"admin-svc:access\"\n            fallback={<div>Access Denied</div>}\n        >\n            <AdminDashboard />\n        </PermissionGuard>\n    );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"production-deployment-patterns",children:"Production Deployment Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"service-bootstrap",children:"Service Bootstrap"}),"\n",(0,r.jsx)(n.h4,{id:"service-registration-script",children:"Service Registration Script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# scripts/bootstrap-services.sh\n\n# Services to register\nSERVICES=(\n    "api-gateway"\n    "user-service"\n    "payment-service"\n    "notification-service"\n    "data-service"\n)\n\necho "Bootstrapping 1Backend services..."\n\nfor service in "${SERVICES[@]}"; do\n    echo "Setting up $service..."\n    \n    # Generate secure password\n    PASSWORD=$(openssl rand -base64 32)\n    \n    # Register service\n    oo register "$service" "$PASSWORD"\n    \n    # Store credentials securely\n    oo secret save "service-credentials/$service" "$PASSWORD"\n    \n    echo "$service registered successfully"\ndone\n\necho "Applying service permissions..."\noo permit save deploy/permissions/\noo enroll save deploy/enrollments/\n\necho "Bootstrap complete!"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"kubernetes-service-setup",children:"Kubernetes Service Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# k8s/service-auth-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: service-auth-config\ndata:\n  onebackend-url: "https://api.company.com"\n  service-slug: "payment-processor"\n\n---\n# k8s/service-auth-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: service-auth-secret\ntype: Opaque\nstringData:\n  service-password: "secure-service-password"\n\n---\n# k8s/payment-service-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment-service\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: payment-service\n  template:\n    metadata:\n      labels:\n        app: payment-service\n    spec:\n      containers:\n      - name: payment-service\n        image: company/payment-service:latest\n        env:\n        - name: ONEBACKEND_URL\n          valueFrom:\n            configMapKeyRef:\n              name: service-auth-config\n              key: onebackend-url\n        - name: SERVICE_SLUG\n          valueFrom:\n            configMapKeyRef:\n              name: service-auth-config\n              key: service-slug\n        - name: SERVICE_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: service-auth-secret\n              key: service-password\n'})}),"\n",(0,r.jsx)(n.h3,{id:"load-balancing--high-availability",children:"Load Balancing & High Availability"}),"\n",(0,r.jsx)(n.h4,{id:"service-node-registration",children:"Service Node Registration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Shared service account across multiple nodes\nfunc main() {\n    // All nodes use same service account\n    token, err := boot.RegisterServiceAccount(\n        clientFactory.Client().UserSvcAPI,\n        "payment-processor",  // Same slug for all nodes\n        "Payment Processing Service",\n        credentialStore,\n    )\n    if err != nil {\n        log.Fatal("Failed to authenticate service:", err)\n    }\n    \n    // Register node-specific health check\n    nodeID := os.Getenv("NODE_ID")\n    registerHealthCheck(nodeID, token.Token)\n    \n    // Start processing with shared authentication\n    startProcessor(token.Token)\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"database-access-pattern",children:"Database Access Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Shared database access across service nodes\nfunc connectToDatabase(serviceToken string) *sql.DB {\n    // Load database credentials using service authentication\n    secrets, _, err := secretClient.ListSecrets(context.Background()).\n        Body(openapi.SecretSvcListSecretsRequest{\n            Keys: []string{\n                "DATABASE_URL",\n                "DATABASE_PASSWORD",\n                "REDIS_URL",\n            },\n        }).Execute()\n    if err != nil {\n        log.Fatal("Failed to load database credentials:", err)\n    }\n    \n    // All service nodes connect with same credentials\n    dbURL := findSecret(secrets.Secrets, "DATABASE_URL")\n    db, err := sql.Open("postgres", dbURL)\n    if err != nil {\n        log.Fatal("Database connection failed:", err)\n    }\n    \n    return db\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-authentication-issues",children:"Common Authentication Issues"}),"\n",(0,r.jsx)(n.h4,{id:"invalid-token-errors",children:"Invalid Token Errors"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Check token validity\noo token\noo whoami\n\n# Refresh expired token\noo login alice\nEnter password: [hidden]\n\n# Verify token format\necho $(oo token) | base64 -d | jq .\n\n# Test token with API\ncurl -H "Authorization: Bearer $(oo token)" \\\n  https://api.1backend.com/user-svc/self\n'})}),"\n",(0,r.jsx)(n.h4,{id:"permission-denied-issues",children:"Permission Denied Issues"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Check user permissions\noo whoami\n\n# List user's permits\noo permit list\n\n# Check specific permission\ncurl -H \"Authorization: Bearer $(oo token)\" \\\n  -X POST https://api.1backend.com/user-svc/self/has/target-permission\n\n# Debug permission hierarchy\noo enroll list --userId $(oo whoami | grep id: | cut -d' ' -f2)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"service-authentication-failures",children:"Service Authentication Failures"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Verify service registration\noo user list --contactId service-name\n\n# Check service permissions\noo login service-name\noo permit list\n\n# Test service-to-service call\ncurl -H "Authorization: Bearer $(oo token)" \\\n  https://api.1backend.com/target-service/endpoint\n'})}),"\n",(0,r.jsx)(n.h3,{id:"role-and-organization-issues",children:"Role and Organization Issues"}),"\n",(0,r.jsx)(n.h4,{id:"role-assignment-problems",children:"Role Assignment Problems"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Check role enrollment\noo enroll list --role target-role\n\n# Verify role ownership\noo whoami | grep roles:\n\n# Check organization membership\noo enroll list --role "user-svc:org:*"\n\n# Fix role assignment\noo enroll save correct-role --userId target-user-id\n'})}),"\n",(0,r.jsx)(n.h4,{id:"organization-access-issues",children:"Organization Access Issues"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# List organization enrollments\noo enroll list --role "user-svc:org:org_id:admin"\noo enroll list --role "user-svc:org:org_id:user"\n\n# Check organization-scoped permissions\noo permit list | grep "org:org_id"\n\n# Debug organization context\noo env current\noo whoami --all\n'})}),"\n",(0,r.jsx)(n.h3,{id:"multi-tenant-issues",children:"Multi-Tenant Issues"}),"\n",(0,r.jsx)(n.h4,{id:"app-context-problems",children:"App Context Problems"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Check current app context\noo env current\n\n# Switch app environment\noo env use correct-environment\n\n# Verify app-specific permissions\noo whoami\noo permit list\n\n# Test cross-app isolation\noo env use app-a\noo whoami\noo env use app-b\noo whoami  # Should show different permissions\n"})}),"\n",(0,r.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,r.jsx)(n.h3,{id:"frontend-authentication",children:"Frontend Authentication"}),"\n",(0,r.jsx)(n.h4,{id:"react-authentication-hook",children:"React Authentication Hook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// hooks/useAuth.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst AuthContext = createContext();\n\nexport function AuthProvider({ children }) {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    \n    useEffect(() => {\n        loadUser();\n    }, []);\n    \n    async function loadUser() {\n        const token = localStorage.getItem('auth_token');\n        if (!token) {\n            setLoading(false);\n            return;\n        }\n        \n        try {\n            const response = await fetch('/user-svc/self', {\n                headers: { 'Authorization': `Bearer ${token}` }\n            });\n            \n            if (response.ok) {\n                const userData = await response.json();\n                setUser(userData);\n            } else {\n                localStorage.removeItem('auth_token');\n            }\n        } catch (error) {\n            console.error('Failed to load user:', error);\n            localStorage.removeItem('auth_token');\n        } finally {\n            setLoading(false);\n        }\n    }\n    \n    async function login(slug, password) {\n        const response = await fetch('/user-svc/login', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ slug, password, device: 'web' })\n        });\n        \n        if (response.ok) {\n            const { token } = await response.json();\n            localStorage.setItem('auth_token', token.token);\n            await loadUser();\n            return true;\n        }\n        \n        return false;\n    }\n    \n    function logout() {\n        localStorage.removeItem('auth_token');\n        setUser(null);\n    }\n    \n    return (\n        <AuthContext.Provider value={{\n            user,\n            loading,\n            login,\n            logout,\n            isAuthenticated: !!user\n        }}>\n            {children}\n        </AuthContext.Provider>\n    );\n}\n\nexport const useAuth = () => useContext(AuthContext);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"vuejs-authentication-store",children:"Vue.js Authentication Store"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// stores/auth.js\nimport { defineStore } from 'pinia'\n\nexport const useAuthStore = defineStore('auth', {\n    state: () => ({\n        user: null,\n        token: localStorage.getItem('auth_token'),\n        loading: false\n    }),\n    \n    getters: {\n        isAuthenticated: (state) => !!state.user,\n        hasRole: (state) => (role) => {\n            return state.user?.roles?.includes(role) || false;\n        },\n        hasPermission: (state) => async (permission) => {\n            if (!state.token) return false;\n            \n            try {\n                const response = await fetch(`/user-svc/self/has/${permission}`, {\n                    method: 'POST',\n                    headers: { 'Authorization': `Bearer ${state.token}` }\n                });\n                const result = await response.json();\n                return result.authorized;\n            } catch {\n                return false;\n            }\n        }\n    },\n    \n    actions: {\n        async login(slug, password) {\n            this.loading = true;\n            \n            try {\n                const response = await fetch('/user-svc/login', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ slug, password, device: 'web' })\n                });\n                \n                if (response.ok) {\n                    const { token } = await response.json();\n                    this.token = token.token;\n                    localStorage.setItem('auth_token', token.token);\n                    await this.loadUser();\n                    return true;\n                }\n            } catch (error) {\n                console.error('Login failed:', error);\n            } finally {\n                this.loading = false;\n            }\n            \n            return false;\n        },\n        \n        async loadUser() {\n            if (!this.token) return;\n            \n            try {\n                const response = await fetch('/user-svc/self', {\n                    headers: { 'Authorization': `Bearer ${this.token}` }\n                });\n                \n                if (response.ok) {\n                    this.user = await response.json();\n                } else {\n                    this.logout();\n                }\n            } catch (error) {\n                console.error('Failed to load user:', error);\n                this.logout();\n            }\n        },\n        \n        logout() {\n            this.user = null;\n            this.token = null;\n            localStorage.removeItem('auth_token');\n        }\n    }\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"mobile-authentication",children:"Mobile Authentication"}),"\n",(0,r.jsx)(n.h4,{id:"flutter-authentication-service",children:"Flutter Authentication Service"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// lib/services/auth_service.dart\nimport 'dart:convert';\nimport 'package:http/http.dart' as http;\nimport 'package:shared_preferences/shared_preferences.dart';\n\nclass AuthService {\n  static const String baseUrl = 'https://api.company.com';\n  static const String tokenKey = 'auth_token';\n  \n  Future<bool> login(String slug, String password) async {\n    try {\n      final response = await http.post(\n        Uri.parse('$baseUrl/user-svc/login'),\n        headers: {'Content-Type': 'application/json'},\n        body: jsonEncode({\n          'slug': slug,\n          'password': password,\n          'device': 'mobile'\n        }),\n      );\n      \n      if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        final token = data['token']['token'];\n        \n        final prefs = await SharedPreferences.getInstance();\n        await prefs.setString(tokenKey, token);\n        \n        return true;\n      }\n    } catch (e) {\n      print('Login error: $e');\n    }\n    \n    return false;\n  }\n  \n  Future<Map<String, dynamic>?> getCurrentUser() async {\n    final token = await getToken();\n    if (token == null) return null;\n    \n    try {\n      final response = await http.post(\n        Uri.parse('$baseUrl/user-svc/self'),\n        headers: {'Authorization': 'Bearer $token'},\n      );\n      \n      if (response.statusCode == 200) {\n        return jsonDecode(response.body);\n      }\n    } catch (e) {\n      print('Failed to get user: $e');\n    }\n    \n    return null;\n  }\n  \n  Future<bool> hasPermission(String permission) async {\n    final token = await getToken();\n    if (token == null) return false;\n    \n    try {\n      final response = await http.post(\n        Uri.parse('$baseUrl/user-svc/self/has/$permission'),\n        headers: {'Authorization': 'Bearer $token'},\n      );\n      \n      if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        return data['authorized'] ?? false;\n      }\n    } catch (e) {\n      print('Permission check error: $e');\n    }\n    \n    return false;\n  }\n  \n  Future<String?> getToken() async {\n    final prefs = await SharedPreferences.getInstance();\n    return prefs.getString(tokenKey);\n  }\n  \n  Future<void> logout() async {\n    final prefs = await SharedPreferences.getInstance();\n    await prefs.remove(tokenKey);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"api-reference-summary",children:"API Reference Summary"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Endpoint"}),(0,r.jsx)(n.th,{children:"Method"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/register"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Create new user account"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/login"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Authenticate user/service"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/self"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Get current user info"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/self/has/{permission}"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Check permission"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/users"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"List users (admin)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/permits"})}),(0,r.jsx)(n.td,{children:"PUT"}),(0,r.jsx)(n.td,{children:"Save permission grants"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/permits"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"List permits"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/enrolls"})}),(0,r.jsx)(n.td,{children:"PUT"}),(0,r.jsx)(n.td,{children:"Assign roles"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/enrolls"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"List role enrollments"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/organizations"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"List organizations"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/organization"})}),(0,r.jsx)(n.td,{children:"PUT"}),(0,r.jsx)(n.td,{children:"Create/update organization"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/refresh-token"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Refresh authentication token"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/user-svc/public-key"})}),(0,r.jsx)(n.td,{children:"GET"}),(0,r.jsx)(n.td,{children:"Get JWT verification key"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/1backend-api/login",children:"User Svc API Reference"})," - Complete API documentation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/built-in-services/secret-svc",children:"Secret Svc"})," - Secure credential storage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/built-in-services/config-svc",children:"Config Svc"})," - Application configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/built-in-services/policy-svc",children:"Policy Svc"})," - Rate limiting and access policies"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(96540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);