"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[6437],{46284:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>S,frontMatter:()=>u,metadata:()=>r,toc:()=>f});const r=JSON.parse('{"id":"1backend/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/1backend/list-prompts.api.mdx","sourceDirName":"1backend","slug":"/1backend/list-prompts","permalink":"/docs/1backend/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/1backend/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/1backend/subscribe-to-prompt-responses"}}');var s=i(74848),o=i(28453),n=i(53746),p=i.n(n),a=i(56518),m=i.n(a),d=i(99972),l=i.n(d),c=i(25342),g=i.n(c),y=(i(44215),i(82223),i(24861));const u={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend/1-backend",custom_edit_url:null},h=void 0,b={},f=[];function T(e){const t={p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(y.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(y.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(m(),{parameters:void 0}),"\n",(0,s.jsx)(l(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["or","equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpOr","OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]},subFilters:{description:"SubFilters is used for operations like OR where multiple filters are combined.",items:"circular()",type:"array"}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the `go -> openapi -> go` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., `[42]`.",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(g(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function S(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(T,{...e})}):T(e)}}}]);