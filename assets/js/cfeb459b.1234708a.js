"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[2793],{53298:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"built-in-services/secret-svc","title":"Secret Svc","description":"The Secret Svc provides secure, encrypted storage for sensitive configuration data in 1Backend. It offers enterprise-grade secret management with multi-tenant access controls, encryption at rest, GitOps integration, and comprehensive audit capabilities.","source":"@site/docs/built-in-services/secret-svc.md","sourceDirName":"built-in-services","slug":"/built-in-services/secret-svc","permalink":"/docs/built-in-services/secret-svc","draft":false,"unlisted":false,"editUrl":"https://github.com/1backend/1backend/tree/main/docs-source/docs/built-in-services/secret-svc.md","tags":[{"inline":true,"label":"secret-svc","permalink":"/docs/tags/secret-svc"},{"inline":true,"label":"secrets","permalink":"/docs/tags/secrets"},{"inline":true,"label":"configuration","permalink":"/docs/tags/configuration"},{"inline":true,"label":"services","permalink":"/docs/tags/services"},{"inline":true,"label":"multitenant","permalink":"/docs/tags/multitenant"},{"inline":true,"label":"encryption","permalink":"/docs/tags/encryption"},{"inline":true,"label":"security","permalink":"/docs/tags/security"}],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"tags":["secret-svc","secrets","configuration","services","multitenant","encryption","security"]},"sidebar":"tutorialSidebar","previous":{"title":"Proxy Svc","permalink":"/docs/built-in-services/proxy-svc"},"next":{"title":"Prompt Svc","permalink":"/docs/built-in-services/prompt-svc"}}');var t=s(74848),c=s(28453);const i={sidebar_position:20,tags:["secret-svc","secrets","configuration","services","multitenant","encryption","security"]},a="Secret Svc",o={},l=[{value:"Quick Start",id:"quick-start",level:2},{value:"Basic Secret Management",id:"basic-secret-management",level:3},{value:"Secure Encryption Workflow",id:"secure-encryption-workflow",level:3},{value:"CLI Reference",id:"cli-reference",level:2},{value:"Secret Management Commands",id:"secret-management-commands",level:3},{value:"<code>oo secret save</code> - Store Secrets",id:"oo-secret-save---store-secrets",level:4},{value:"<code>oo secret list</code> - View Secrets",id:"oo-secret-list---view-secrets",level:4},{value:"<code>oo secret remove</code> - Delete Secrets",id:"oo-secret-remove---delete-secrets",level:4},{value:"<code>oo secret encrypt</code> - GitOps Encryption",id:"oo-secret-encrypt---gitops-encryption",level:4},{value:"<code>oo secret is-secure</code> - Security Check",id:"oo-secret-is-secure---security-check",level:4},{value:"File-Based Secret Management",id:"file-based-secret-management",level:2},{value:"Single Secret YAML Structure",id:"single-secret-yaml-structure",level:3},{value:"Multiple Secrets YAML Structure",id:"multiple-secrets-yaml-structure",level:3},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Advanced Permission Management",id:"advanced-permission-management",level:2},{value:"Granular Access Control",id:"granular-access-control",level:3},{value:"Permission Types",id:"permission-types",level:4},{value:"User vs Admin Access",id:"user-vs-admin-access",level:4},{value:"Permission Scenarios",id:"permission-scenarios",level:3},{value:"Service-to-Service Communication",id:"service-to-service-communication",level:4},{value:"Cross-Team Secret Sharing",id:"cross-team-secret-sharing",level:4},{value:"Encryption and Security",id:"encryption-and-security",level:2},{value:"Supported Checksum Algorithms",id:"supported-checksum-algorithms",level:3},{value:"Encryption Workflow for GitOps",id:"encryption-workflow-for-gitops",level:3},{value:"1. Encrypt Locally",id:"1-encrypt-locally",level:4},{value:"2. Version Control Integration",id:"2-version-control-integration",level:4},{value:"3. Deployment Pipeline",id:"3-deployment-pipeline",level:4},{value:"Real-World Usage Patterns",id:"real-world-usage-patterns",level:2},{value:"Multi-Environment Management",id:"multi-environment-management",level:3},{value:"Development Environment Setup",id:"development-environment-setup",level:4},{value:"Production Deployment",id:"production-deployment",level:4},{value:"Microservices Architecture",id:"microservices-architecture",level:3},{value:"Service-Specific Secret Management",id:"service-specific-secret-management",level:4},{value:"Cross-Service Dependencies",id:"cross-service-dependencies",level:4},{value:"Infrastructure as Code Integration",id:"infrastructure-as-code-integration",level:3},{value:"Terraform Integration",id:"terraform-integration",level:4},{value:"Kubernetes Integration",id:"kubernetes-integration",level:4},{value:"Docker Compose Integration",id:"docker-compose-integration",level:4},{value:"Security Best Practices",id:"security-best-practices",level:2},{value:"Encryption Key Management",id:"encryption-key-management",level:3},{value:"Access Control Best Practices",id:"access-control-best-practices",level:3},{value:"Rotation and Lifecycle Management",id:"rotation-and-lifecycle-management",level:3},{value:"Automated Secret Rotation",id:"automated-secret-rotation",level:4},{value:"Secret Expiration Tracking",id:"secret-expiration-tracking",level:4},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Permission Denied Errors",id:"permission-denied-errors",level:4},{value:"Encryption/Decryption Failures",id:"encryptiondecryption-failures",level:4},{value:"Import/Export Issues",id:"importexport-issues",level:4},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Batch Operations",id:"batch-operations-1",level:4},{value:"Large Secret Management",id:"large-secret-management",level:4},{value:"Integration Examples",id:"integration-examples",level:2},{value:"CI/CD Pipeline Integration",id:"cicd-pipeline-integration",level:3},{value:"GitHub Actions",id:"github-actions",level:4},{value:"GitLab CI",id:"gitlab-ci",level:4},{value:"Application Integration",id:"application-integration",level:3},{value:"Go Application",id:"go-application",level:4},{value:"Node.js Application",id:"nodejs-application",level:4},{value:"API Reference Summary",id:"api-reference-summary",level:2},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"secret-svc",children:"Secret Svc"})}),"\n",(0,t.jsx)(n.p,{children:"The Secret Svc provides secure, encrypted storage for sensitive configuration data in 1Backend. It offers enterprise-grade secret management with multi-tenant access controls, encryption at rest, GitOps integration, and comprehensive audit capabilities."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This page provides comprehensive usage examples and advanced features. For API details, see ",(0,t.jsx)(n.a,{href:"/docs/1backend-api/list-secrets",children:"Secret Svc API documentation"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.h3,{id:"basic-secret-management",children:"Basic Secret Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Save a simple API key\noo secret save DATABASE_URL "postgresql://user:pass@host:5432/db"\n\n# List all accessible secrets\noo secret list\n\n# Show secret values (unmasked)\noo secret list --show\n\n# Remove a secret by key\noo secret remove --key DATABASE_URL\n'})}),"\n",(0,t.jsx)(n.h3,{id:"secure-encryption-workflow",children:"Secure Encryption Workflow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Encrypt a secret for GitOps (interactive - hides value from terminal)\noo secret encrypt API_KEY\nEnter secret value: [hidden]\n\n# Direct encryption (for automation)\noo secret encrypt API_KEY "super-secret-value"\n\n# Check if service is properly secured\noo secret is-secure\n'})}),"\n",(0,t.jsx)(n.h2,{id:"cli-reference",children:"CLI Reference"}),"\n",(0,t.jsx)(n.h3,{id:"secret-management-commands",children:"Secret Management Commands"}),"\n",(0,t.jsxs)(n.h4,{id:"oo-secret-save---store-secrets",children:[(0,t.jsx)(n.code,{children:"oo secret save"})," - Store Secrets"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Basic Usage:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Save key-value pair\noo secret save <key> <value>\n\n# Save from YAML file\noo secret save <file.yaml>\n\n# Save multiple secrets from directory\noo secret save <directory>\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# API credentials\noo secret save STRIPE_SECRET_KEY "sk_test_abc123"\noo secret save OPENAI_API_KEY "sk-proj-xyz789"\n\n# Database connection\noo secret save DB_PASSWORD "complex-password-123"\n\n# Service-specific secrets (auto-prefixed for non-admin users)\noo secret save auth-svc/JWT_SECRET "jwt-signing-key"\noo secret save payment-svc/WEBHOOK_SECRET "webhook-validation-key"\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"oo-secret-list---view-secrets",children:[(0,t.jsx)(n.code,{children:"oo secret list"})," - View Secrets"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"oo secret list [options]\noo secret list [key-pattern]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Options:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--show"})," - Display actual values (unmasked)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--namespace"}),", ",(0,t.jsx)(n.code,{children:"-n"})," - Filter by namespace/app"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# List all secrets (values masked)\noo secret list\n\n# Show actual secret values\noo secret list --show\n\n# Filter by key pattern\noo secret list DATABASE\n\n# List secrets for specific namespace\noo secret list --namespace production\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"oo-secret-remove---delete-secrets",children:[(0,t.jsx)(n.code,{children:"oo secret remove"})," - Delete Secrets"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"oo secret remove --key <key> [--key <key2>...]\noo secret remove --id <id> [--id <id2>...]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Remove by key\noo secret remove --key API_KEY\n\n# Remove multiple by key\noo secret remove --key DB_USER --key DB_PASS\n\n# Remove by ID\noo secret remove --id secr_abc123\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"oo-secret-encrypt---gitops-encryption",children:[(0,t.jsx)(n.code,{children:"oo secret encrypt"})," - GitOps Encryption"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"oo secret encrypt <key> [value]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Interactive encryption (secure - no terminal history)\noo secret encrypt PRODUCTION_API_KEY\nEnter secret value: [hidden]\n\n# Direct encryption for automation\noo secret encrypt STAGING_KEY "staging-value"\n\n# Output ready for version control\noo secret encrypt DATABASE_PASSWORD > secrets/prod-db.yaml\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"oo-secret-is-secure---security-check",children:[(0,t.jsx)(n.code,{children:"oo secret is-secure"})," - Security Check"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Verify service security configuration\noo secret is-secure\nService is secure.\n\n# Example warning output\noo secret is-secure\nError: secret svc is not secure: it is using the default encryption key\n"})}),"\n",(0,t.jsx)(n.h2,{id:"file-based-secret-management",children:"File-Based Secret Management"}),"\n",(0,t.jsx)(n.h3,{id:"single-secret-yaml-structure",children:"Single Secret YAML Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# production-api-key.yaml\nid: "secr_prod_api_001"\nkey: "PRODUCTION_API_KEY"\nvalue: "a37/KUAr4SOYi6Xw9i9T8qo3QCk8WvnzONo47jHAkwk="\nencrypted: true\nchecksum: "45a3b25f"\nchecksumAlgorithm: "CRC32"\n\n# Access control\nreaders:\n  - "payment-svc"\n  - "order-svc"\n  - "admin-team"\nwriters:\n  - "admin-team"\n  - "devops-team"\ndeleters:\n  - "admin-team"\n\n# Permission management\ncanChangeReaders:\n  - "admin-team"\ncanChangeWriters:\n  - "admin-team"\ncanChangeDeleters:\n  - "admin-team"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"multiple-secrets-yaml-structure",children:"Multiple Secrets YAML Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# application-secrets.yaml\n- id: "secr_db_primary"\n  key: "DATABASE_URL"\n  value: "encrypted-connection-string"\n  encrypted: true\n  readers: ["api-svc", "worker-svc"]\n  writers: ["admin-team"]\n\n- id: "secr_redis_cache"\n  key: "REDIS_URL"  \n  value: "redis://localhost:6379"\n  encrypted: false\n  readers: ["api-svc", "cache-svc"]\n  writers: ["devops-team"]\n\n- id: "secr_jwt_signing"\n  key: "JWT_SECRET"\n  value: "encrypted-jwt-key"\n  encrypted: true\n  readers: ["auth-svc"]\n  writers: ["security-team"]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"batch-operations",children:"Batch Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Deploy all production secrets\noo secret save secrets/production/\n\n# Update staging environment\noo secret save environments/staging-secrets.yaml\n\n# Backup current secrets to directory\nmkdir backup-$(date +%Y%m%d)\noo secret list --show > backup-$(date +%Y%m%d)/secrets-backup.yaml\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-permission-management",children:"Advanced Permission Management"}),"\n",(0,t.jsx)(n.h3,{id:"granular-access-control",children:"Granular Access Control"}),"\n",(0,t.jsx)(n.p,{children:"The Secret Svc implements fine-grained permission management with six distinct access levels:"}),"\n",(0,t.jsx)(n.h4,{id:"permission-types",children:"Permission Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"readers"})})," - Can view secret values"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"writers"})})," - Can modify secret values"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"deleters"})})," - Can remove secrets"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"canChangeReaders"})})," - Can modify the readers list"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"canChangeWriters"})})," - Can modify the writers list"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"canChangeDeleters"})})," - Can modify the deleters list"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"user-vs-admin-access",children:"User vs Admin Access"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Regular Users:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Can only create secrets with keys prefixed by their user slug"}),"\n",(0,t.jsx)(n.li,{children:"Automatically granted all permissions on their own secrets"}),"\n",(0,t.jsx)(n.li,{children:"Must be explicitly granted access to others' secrets"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Admin Users:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Can create secrets with any key name"}),"\n",(0,t.jsx)(n.li,{children:"Have access to all secrets regardless of permission lists"}),"\n",(0,t.jsx)(n.li,{children:"Can modify any secret's permission structure"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"permission-scenarios",children:"Permission Scenarios"}),"\n",(0,t.jsx)(n.h4,{id:"service-to-service-communication",children:"Service-to-Service Communication"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# auth-service-secrets.yaml\n- key: "auth-svc/DATABASE_URL"\n  value: "encrypted-db-connection"\n  encrypted: true\n  readers: ["auth-svc"]           # Only auth service can read\n  writers: ["devops-team"]        # Only devops can update\n  deleters: ["admin-team"]        # Only admins can delete\n\n- key: "auth-svc/JWT_SECRET"\n  value: "encrypted-jwt-key" \n  encrypted: true\n  readers: ["auth-svc", "api-gateway"]  # Both services need access\n  writers: ["security-team"]\n  deleters: ["security-team"]\n'})}),"\n",(0,t.jsx)(n.h4,{id:"cross-team-secret-sharing",children:"Cross-Team Secret Sharing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# shared-infrastructure-secrets.yaml\n- key: "MONITORING_API_KEY"\n  value: "encrypted-monitoring-key"\n  encrypted: true\n  readers: ["platform-team", "sre-team", "monitoring-svc"]\n  writers: ["platform-team"]\n  deleters: ["platform-team"]\n  canChangeReaders: ["platform-team", "sre-team"]  # Both teams can add readers\n  canChangeWriters: ["platform-team"]              # Only platform team controls writers\n'})}),"\n",(0,t.jsx)(n.h2,{id:"encryption-and-security",children:"Encryption and Security"}),"\n",(0,t.jsx)(n.h3,{id:"supported-checksum-algorithms",children:"Supported Checksum Algorithms"}),"\n",(0,t.jsx)(n.p,{children:"The Secret Svc supports multiple checksum algorithms for data integrity verification:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CRC32"})," (default) - Fast, good for basic integrity checks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SHA-256"})," - Cryptographically secure, recommended for production"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SHA-512"})," - Maximum security, slower performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"BLAKE2s"})," - Fast and secure alternative to SHA family"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"encryption-workflow-for-gitops",children:"Encryption Workflow for GitOps"}),"\n",(0,t.jsx)(n.h4,{id:"1-encrypt-locally",children:"1. Encrypt Locally"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create encrypted secret file\noo secret encrypt PRODUCTION_DATABASE_URL > secrets/prod-db.yaml\n\n# Example output (safe for version control):\n# id: "secr_ABC123"\n# key: "PRODUCTION_DATABASE_URL"\n# value: "a37/KUAr4SOYi6Xw9i9T8qo3QCk8WvnzONo47jHAkwk="\n# encrypted: true\n# checksum: "45a3b25f"\n# checksumAlgorithm: "CRC32"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"2-version-control-integration",children:"2. Version Control Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Commit encrypted secrets safely\ngit add secrets/\ngit commit -m "Add production database credentials"\ngit push origin main\n'})}),"\n",(0,t.jsx)(n.h4,{id:"3-deployment-pipeline",children:"3. Deployment Pipeline"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# In CI/CD pipeline\noo secret save secrets/production/\noo secret save secrets/staging/\n\n# Verify deployment\noo secret is-secure\noo secret list --namespace production\n"})}),"\n",(0,t.jsx)(n.h2,{id:"real-world-usage-patterns",children:"Real-World Usage Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"multi-environment-management",children:"Multi-Environment Management"}),"\n",(0,t.jsx)(n.h4,{id:"development-environment-setup",children:"Development Environment Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Development secrets (unencrypted for local debugging)\noo secret save dev/DATABASE_URL "postgresql://localhost:5432/myapp_dev"\noo secret save dev/REDIS_URL "redis://localhost:6379"\noo secret save dev/API_KEY "dev-api-key-12345"\n\n# List development secrets\noo secret list --namespace dev\n'})}),"\n",(0,t.jsx)(n.h4,{id:"production-deployment",children:"Production Deployment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Encrypt production secrets\noo secret encrypt prod/DATABASE_URL > secrets/prod-database.yaml\noo secret encrypt prod/API_KEY > secrets/prod-api.yaml\n\n# Deploy with proper access controls\ncat > secrets/prod-complete.yaml << EOF\n- key: "prod/DATABASE_URL"\n  value: "$(oo secret encrypt prod/DATABASE_URL | grep value:)"\n  encrypted: true\n  readers: ["api-svc", "worker-svc"]\n  writers: ["admin-team"]\n  deleters: ["admin-team"]\n\n- key: "prod/MONITORING_KEY"\n  value: "$(oo secret encrypt prod/MONITORING_KEY | grep value:)"\n  encrypted: true\n  readers: ["monitoring-svc"]\n  writers: ["sre-team"]\n  deleters: ["admin-team"]\nEOF\n\noo secret save secrets/prod-complete.yaml\n'})}),"\n",(0,t.jsx)(n.h3,{id:"microservices-architecture",children:"Microservices Architecture"}),"\n",(0,t.jsx)(n.h4,{id:"service-specific-secret-management",children:"Service-Specific Secret Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Authentication service secrets\noo secret save auth-svc/JWT_SECRET "$(openssl rand -base64 32)"\noo secret save auth-svc/OAUTH_CLIENT_SECRET "oauth-client-secret"\noo secret save auth-svc/PASSWORD_SALT "$(openssl rand -base64 16)"\n\n# Payment service secrets  \noo secret save payment-svc/STRIPE_SECRET_KEY "sk_live_abc123"\noo secret save payment-svc/WEBHOOK_SECRET "whsec_xyz789"\n\n# Email service secrets\noo secret save email-svc/SENDGRID_API_KEY "SG.abc123"\noo secret save email-svc/SMTP_PASSWORD "smtp-password"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"cross-service-dependencies",children:"Cross-Service Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# shared-service-secrets.yaml\n- key: "shared/DATABASE_URL"\n  value: "encrypted-shared-db-connection"\n  encrypted: true\n  readers: \n    - "auth-svc"\n    - "user-svc" \n    - "payment-svc"\n    - "order-svc"\n  writers: ["dba-team"]\n  deleters: ["admin-team"]\n\n- key: "shared/REDIS_URL"\n  value: "encrypted-redis-connection"\n  encrypted: true\n  readers:\n    - "cache-svc"\n    - "session-svc"\n    - "rate-limiter-svc"\n  writers: ["infrastructure-team"]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"infrastructure-as-code-integration",children:"Infrastructure as Code Integration"}),"\n",(0,t.jsx)(n.h4,{id:"terraform-integration",children:"Terraform Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Generate secrets for Terraform\noo secret list --show --namespace terraform > terraform-secrets.env\n\n# Or use in Terraform data sources\ndata "external" "secrets" {\n  program = ["bash", "-c", "oo secret list --show --namespace terraform | yq -o=json"]\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"kubernetes-integration",children:"Kubernetes Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Export secrets for Kubernetes\noo secret list --show --namespace k8s-production | \\\n  yq -r \'.[] | "kubectl create secret generic " + .key + " --from-literal=value=" + .value\' | \\\n  bash\n'})}),"\n",(0,t.jsx)(n.h4,{id:"docker-compose-integration",children:"Docker Compose Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Generate .env file for Docker Compose\noo secret list --show --namespace docker | \\\n  yq -r '.[] | .key + \"=\" + .value' > .env\n\n# Use in docker-compose.yml\ndocker-compose --env-file .env up -d\n"})}),"\n",(0,t.jsx)(n.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"encryption-key-management",children:"Encryption Key Management"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Change Default Encryption Key"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Always verify encryption is properly configured\noo secret is-secure\n\n# Set strong encryption key in environment\nexport OB_ENCRYPTION_KEY="$(openssl rand -base64 32)"\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Regular Security Audits"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Audit secret access patterns\noo secret list | awk '{print $3}' | sort | uniq -c\n\n# Check for secrets without proper access controls\noo secret list --show | grep -E \"(readers|writers|deleters): \\[\\]\"\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"access-control-best-practices",children:"Access Control Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Principle of Least Privilege"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# Give minimum necessary access\n- key: "payment-svc/STRIPE_KEY"\n  readers: ["payment-svc"]           # Only payment service\n  writers: ["payment-admin"]         # Only payment administrators\n  deleters: ["security-team"]        # Only security team can delete\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Regular Access Review"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Review all secrets and their permissions\noo secret list --show | grep -A 10 -B 5 "readers\\|writers\\|deleters"\n\n# Find secrets with overly broad access\noo secret list --show | grep -E "readers.*\\[.*,.*,.*\\]"\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"rotation-and-lifecycle-management",children:"Rotation and Lifecycle Management"}),"\n",(0,t.jsx)(n.h4,{id:"automated-secret-rotation",children:"Automated Secret Rotation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# rotate-database-password.sh\n\n# Generate new password\nNEW_PASSWORD=$(openssl rand -base64 32)\n\n# Encrypt and save\noo secret encrypt DATABASE_PASSWORD "$NEW_PASSWORD" > temp-secret.yaml\noo secret save temp-secret.yaml\n\n# Update database\nmysql -h $DB_HOST -u root -p"$OLD_PASSWORD" -e "SET PASSWORD FOR \'app\'@\'%\' = PASSWORD(\'$NEW_PASSWORD\')"\n\n# Cleanup\nrm temp-secret.yaml\necho "Database password rotated successfully"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"secret-expiration-tracking",children:"Secret Expiration Tracking"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Add expiration metadata to secrets\ncat > expiring-secret.yaml << EOF\nkey: "TEMPORARY_API_KEY"\nvalue: "$(oo secret encrypt TEMP_KEY temp-value | grep value:)"\nencrypted: true\nmetadata:\n  expires: "2024-12-31"\n  rotation_interval: "90d"\n  owner: "security-team"\nEOF\n\noo secret save expiring-secret.yaml\n'})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsx)(n.h4,{id:"permission-denied-errors",children:"Permission Denied Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Check your current user permissions\noo user whoami\n\n# Verify secret access permissions\noo secret list YOUR_SECRET_KEY\n\n# Request access from secret owner\necho "Need access to secret: YOUR_SECRET_KEY" | \\\n  mail -s "Secret Access Request" security-team@company.com\n'})}),"\n",(0,t.jsx)(n.h4,{id:"encryptiondecryption-failures",children:"Encryption/Decryption Failures"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Verify service security status\noo secret is-secure\n\n# Check encryption key configuration\necho $OB_ENCRYPTION_KEY | wc -c  # Should be 32 characters\n\n# Test encryption/decryption cycle\noo secret encrypt test-key test-value > test.yaml\noo secret save test.yaml\noo secret list test-key --show\noo secret remove --key test-key\n"})}),"\n",(0,t.jsx)(n.h4,{id:"importexport-issues",children:"Import/Export Issues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Validate YAML syntax before import\nyamllint secrets/production.yaml\n\n# Test import with single secret first\nhead -n 10 secrets/production.yaml > test-import.yaml\noo secret save test-import.yaml\n\n# Backup before bulk operations\noo secret list --show > backup-$(date +%Y%m%d).yaml\n"})}),"\n",(0,t.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,t.jsx)(n.h4,{id:"batch-operations-1",children:"Batch Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Instead of individual saves:\n# oo secret save KEY1 value1\n# oo secret save KEY2 value2\n# oo secret save KEY3 value3\n\n# Use batch file:\ncat > batch-secrets.yaml << EOF\n- key: "KEY1"\n  value: "value1"\n- key: "KEY2"  \n  value: "value2"\n- key: "KEY3"\n  value: "value3"\nEOF\n\noo secret save batch-secrets.yaml\n'})}),"\n",(0,t.jsx)(n.h4,{id:"large-secret-management",children:"Large Secret Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# For environments with 100+ secrets, use directory organization\nmkdir -p secrets/{production,staging,development}\nmkdir -p secrets/services/{auth,payment,email}\n\n# Batch save by category\noo secret save secrets/production/\noo secret save secrets/services/auth/\n"})}),"\n",(0,t.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,t.jsx)(n.h3,{id:"cicd-pipeline-integration",children:"CI/CD Pipeline Integration"}),"\n",(0,t.jsx)(n.h4,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/deploy-secrets.yml\nname: Deploy Secrets\non:\n  push:\n    paths: ['secrets/**']\n    branches: [main]\n\njobs:\n  deploy-secrets:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      \n      - name: Setup 1Backend CLI\n        run: |\n          curl -L https://releases.1backend.com/oo-linux -o oo\n          chmod +x oo\n          \n      - name: Deploy Production Secrets\n        env:\n          OO_TOKEN: ${{ secrets.ONEBACKEND_TOKEN }}\n          OO_URL: ${{ secrets.ONEBACKEND_URL }}\n        run: |\n          ./oo secret save secrets/production/\n          ./oo secret is-secure\n"})}),"\n",(0,t.jsx)(n.h4,{id:"gitlab-ci",children:"GitLab CI"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# .gitlab-ci.yml\ndeploy-secrets:\n  stage: deploy\n  script:\n    - oo secret save secrets/$CI_ENVIRONMENT_NAME/\n    - oo secret is-secure\n  only:\n    changes:\n      - secrets/**\n  environment:\n    name: $CI_ENVIRONMENT_NAME\n"})}),"\n",(0,t.jsx)(n.h3,{id:"application-integration",children:"Application Integration"}),"\n",(0,t.jsx)(n.h4,{id:"go-application",children:"Go Application"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// Load secrets in Go application\npackage main\n\nimport (\n    "context"\n    "log"\n    "github.com/1backend/1backend/clients/go"\n    "github.com/1backend/1backend/sdk/go/client"\n)\n\nfunc loadSecrets() map[string]string {\n    cf := client.NewApiClientFactory(os.Getenv("ONEBACKEND_URL"))\n    client := cf.Client(client.WithToken(os.Getenv("ONEBACKEND_TOKEN")))\n    \n    secrets := []string{\n        "DATABASE_URL",\n        "REDIS_URL", \n        "API_KEY",\n    }\n    \n    req := openapi.SecretSvcListSecretsRequest{\n        Keys: secrets,\n    }\n    \n    resp, _, err := client.SecretSvcAPI.ListSecrets(context.Background()).\n        Body(req).Execute()\n    if err != nil {\n        log.Fatal("Failed to load secrets:", err)\n    }\n    \n    secretMap := make(map[string]string)\n    for _, secret := range resp.Secrets {\n        secretMap[*secret.Key] = *secret.Value\n    }\n    \n    return secretMap\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"nodejs-application",children:"Node.js Application"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Load secrets in Node.js application\nconst { SecretSvcApi, Configuration } = require('@1backend/client');\n\nasync function loadSecrets() {\n    const config = new Configuration({\n        basePath: process.env.ONEBACKEND_URL,\n        accessToken: process.env.ONEBACKEND_TOKEN\n    });\n    \n    const secretApi = new SecretSvcApi(config);\n    \n    const response = await secretApi.listSecrets({\n        keys: ['DATABASE_URL', 'REDIS_URL', 'API_KEY']\n    });\n    \n    const secrets = {};\n    response.secrets.forEach(secret => {\n        secrets[secret.key] = secret.value;\n    });\n    \n    return secrets;\n}\n\n// Usage\nloadSecrets().then(secrets => {\n    process.env.DATABASE_URL = secrets.DATABASE_URL;\n    process.env.REDIS_URL = secrets.REDIS_URL;\n    process.env.API_KEY = secrets.API_KEY;\n    \n    // Start application with loaded secrets\n    require('./app');\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"api-reference-summary",children:"API Reference Summary"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Endpoint"}),(0,t.jsx)(n.th,{children:"Method"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/secret-svc/secrets"})}),(0,t.jsx)(n.td,{children:"POST"}),(0,t.jsx)(n.td,{children:"List secrets by key(s)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/secret-svc/secrets"})}),(0,t.jsx)(n.td,{children:"PUT"}),(0,t.jsx)(n.td,{children:"Save/update secrets"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/secret-svc/secrets"})}),(0,t.jsx)(n.td,{children:"DELETE"}),(0,t.jsx)(n.td,{children:"Remove secrets"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/secret-svc/encrypt"})}),(0,t.jsx)(n.td,{children:"POST"}),(0,t.jsx)(n.td,{children:"Encrypt values for GitOps"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/secret-svc/decrypt"})}),(0,t.jsx)(n.td,{children:"POST"}),(0,t.jsx)(n.td,{children:"Decrypt values"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/secret-svc/is-secure"})}),(0,t.jsx)(n.td,{children:"GET"}),(0,t.jsx)(n.td,{children:"Check security status"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/1backend-api/list-secrets",children:"Secret Svc API Reference"})," - Complete API documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/built-in-services/config-svc",children:"Config Svc"})," - For non-sensitive configuration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/built-in-services/user-svc",children:"User Svc"})," - User and role management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/built-in-services/container-svc",children:"Container Svc"})," - Service deployment and secrets injection"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var r=s(96540);const t={},c=r.createContext(t);function i(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);