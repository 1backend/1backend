"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[6437],{46284:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>I,frontMatter:()=>y,metadata:()=>r,toc:()=>f});const r=JSON.parse('{"id":"1backend/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/1backend/list-prompts.api.mdx","sourceDirName":"1backend","slug":"/1backend/list-prompts","permalink":"/docs/1backend/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/1backend/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/1backend/subscribe-to-prompt-responses"}}');var s=i(74848),o=i(28453),n=i(53746),p=i.n(n),a=i(56518),d=i.n(a),l=i(99972),c=i.n(l),m=i(25342),g=i.n(m),u=(i(44215),i(82223),i(24861));const y={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend/1-backend",custom_edit_url:null},h=void 0,b={},f=[];function v(e){const t={p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(u.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(u.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(d(),{parameters:void 0}),"\n",(0,s.jsx)(c(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["or","equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpOr","OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]},subFilters:{description:"SubFilters is used for operations like OR where multiple filters are combined.",items:"circular()",type:"array"}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the `go -> openapi -> go` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., `[42]`.",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(g(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function I(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(v,{...e})}):v(e)}}}]);