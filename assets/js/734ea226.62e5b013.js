"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[8825],{70978:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>f,contentTitle:()=>h,default:()=>j,frontMatter:()=>g,metadata:()=>i,toc:()=>b});const i=JSON.parse('{"id":"1backend-api/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/1backend-api/list-prompts.api.mdx","sourceDirName":"1backend-api","slug":"/1backend-api/list-prompts","permalink":"/docs/1backend-api/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend-api/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/1backend-api/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/1backend-api/subscribe-to-prompt-responses"}}');var s=r(74848),o=r(28453),n=r(57742),p=r.n(n),a=r(78178),d=r.n(a),m=r(19624),c=r.n(m),l=r(96226),u=r.n(l),y=(r(77675),r(19365),r(51107));const g={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend-api/1-backend",custom_edit_url:null},h=void 0,f={},b=[];function w(e){const t={p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(y.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(y.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(d(),{parameters:void 0}),"\n",(0,s.jsx)(c(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{afterJson:{description:"AfterJson is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.",type:"string"},count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},op:{enum:["or","equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpOr","OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]},subFilters:{description:"SubFilters is used for operations like OR where multiple filters are combined.",items:"circular()",type:"array"},valuesJson:{type:"string"}},type:"object"},type:"array"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},sortingType:{allOf:[{enum:["","numeric","text","date","random"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate","SortingTypeRandom"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(u(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function j(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(w,{...e})}):w(e)}}}]);