"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[6437],{46284:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>b,contentTitle:()=>g,default:()=>S,frontMatter:()=>u,metadata:()=>r,toc:()=>f});const r=JSON.parse('{"id":"1backend/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/1backend/list-prompts.api.mdx","sourceDirName":"1backend","slug":"/1backend/list-prompts","permalink":"/docs/1backend/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/1backend/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/1backend/subscribe-to-prompt-responses"}}');var s=i(74848),n=i(28453),o=i(53746),p=i.n(o),a=i(56518),d=i.n(a),c=i(99972),m=i.n(c),l=i(25342),y=i.n(l),h=(i(44215),i(82223),i(24861));const u={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend/1-backend",custom_edit_url:null},g=void 0,b={},f=[];function T(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(h.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(h.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(d(),{parameters:void 0}),"\n",(0,s.jsx)(m(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["or","equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpOr","OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]},subFilters:{description:"SubFilters is used for operations like OR where multiple filters are combined.",items:"circular()",type:"array"}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the `go -> openapi -> go` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., `[42]`.",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(y(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function S(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(T,{...e})}):T(e)}}}]);