"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[7184],{79795:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>b,contentTitle:()=>y,default:()=>x,frontMatter:()=>u,metadata:()=>i,toc:()=>f});const i=JSON.parse('{"id":"openorch/list-platforms","title":"List Platforms","description":"Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc.","source":"@site/docs/openorch/list-platforms.api.mdx","sourceDirName":"openorch","slug":"/openorch/list-platforms","permalink":"/docs/openorch/list-platforms","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-platforms","title":"List Platforms","description":"Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc.","sidebar_label":"List Platforms","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend/1backend","custom_edit_url":null},"sidebar":"tutorialSidebar","previous":{"title":"List Nodes","permalink":"/docs/openorch/list-nodes"},"next":{"title":"List Prompts","permalink":"/docs/openorch/list-prompts"}}');var s=o(74848),r=o(28453),n=o(53746),p=o.n(n),a=o(56518),c=o.n(a),l=o(99972),m=o.n(l),d=o(25342),g=o.n(d),h=(o(44215),o(82223),o(24861));const u={id:"list-platforms",title:"List Platforms",description:"Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc.",sidebar_label:"List Platforms",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend/1backend",custom_edit_url:null},y=void 0,b={},f=[];function T(e){const t={code:"code",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(h.default,{as:"h1",className:"openapi__heading",children:"List Platforms"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/model-svc/platforms",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc."}),"\n",(0,s.jsxs)(t.p,{children:["Requires ",(0,s.jsx)(t.code,{children:"model-svc:platform:view"})," permission."]}),"\n",(0,s.jsx)(c(),{parameters:void 0}),"\n",(0,s.jsx)(m(),{title:"Body",body:void 0}),"\n",(0,s.jsx)(g(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{platforms:{items:{properties:{architectures:{properties:{cuda:{allOf:[{properties:{container:{allOf:[{properties:{envars:{description:'Environment variables to be passed to the container (e.g., "DEVICES=all").',items:{properties:{key:{description:"Key is the environment variable name.",type:"string"},value:{description:"Value is the environment variable value.",type:"string"}},type:"object"},type:"array"},imageTemplate:{description:"Template for constructing the container image name.",type:"string"},keeps:{description:"List of container paths that should persist across restarts.",items:{properties:{path:{description:"Path is the absolute path inside the container for the folder that should persist across restarts.",type:"string"},readOnly:{description:"ReadOnly indicates whether the keep is read-only.",type:"boolean"}},type:"object"},type:"array"},port:{description:"Internal port exposed by the container.",type:"integer"}},type:"object"}],description:"Container configuration related to CUDA usage."},cudaVersionPrecision:{description:'Level of precision for selecting the CUDA version when resolving the container image.\n- 2 -> Use "major.minor" (e.g., "12.2")\n- 3 -> Use "major.minor.patch" (e.g., "12.2.0")',type:"integer"},defaultCudaVersion:{description:'Default CUDA version to use (e.g., "12.2" or "12.2.0").',type:"string"},defaultCudnnVersion:{description:"Default cuDNN version to use alongside CUDA.",type:"string"}},type:"object"}],description:"CUDA-specific container parameters, if applicable."},default:{allOf:[{properties:{container:{properties:{envars:{description:'Environment variables to be passed to the container (e.g., "DEVICES=all").',items:{properties:{key:{description:"Key is the environment variable name.",type:"string"},value:{description:"Value is the environment variable value.",type:"string"}},type:"object"},type:"array"},imageTemplate:{description:"Template for constructing the container image name.",type:"string"},keeps:{description:"List of container paths that should persist across restarts.",items:{properties:{path:{description:"Path is the absolute path inside the container for the folder that should persist across restarts.",type:"string"},readOnly:{description:"ReadOnly indicates whether the keep is read-only.",type:"boolean"}},type:"object"},type:"array"},port:{description:"Internal port exposed by the container.",type:"integer"}},type:"object"}},type:"object"}],description:"Default container configuration for non-GPU environments."}},type:"object"},id:{type:"string"},name:{type:"string"},types:{description:"List of prompt types that the AI engine supports.",items:{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]},type:"array"},version:{type:"integer"}},type:"object"},type:"array"}},required:["platforms"],type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function x(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(T,{...e})}):T(e)}}}]);