"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[3215],{31542:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>T,contentTitle:()=>u,default:()=>j,frontMatter:()=>h,metadata:()=>i,toc:()=>f});const i=JSON.parse('{"id":"1backend/list-platforms","title":"List Platforms","description":"Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc.","source":"@site/docs/1backend/list-platforms.api.mdx","sourceDirName":"1backend","slug":"/1backend/list-platforms","permalink":"/docs/1backend/list-platforms","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-platforms","title":"List Platforms","description":"Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc.","sidebar_label":"List Platforms","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"List Models","permalink":"/docs/1backend/list-models"},"next":{"title":"Check","permalink":"/docs/1backend/check"}}');var n=o(74848),r=o(28453),a=o(53746),s=o.n(a),p=o(56518),c=o.n(p),l=o(99972),m=o.n(l),d=o(25342),y=o.n(d),g=(o(44215),o(82223),o(24861));const h={id:"list-platforms",title:"List Platforms",description:"Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc.",sidebar_label:"List Platforms",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend/1-backend",custom_edit_url:null},u=void 0,T={},f=[];function b(e){const t={code:"code",p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(g.default,{as:"h1",className:"openapi__heading",children:"List Platforms"}),"\n",(0,n.jsx)(s(),{method:"post",path:"/model-svc/platforms",context:"endpoint"}),"\n",(0,n.jsx)(t.p,{children:"Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc."}),"\n",(0,n.jsxs)(t.p,{children:["Requires ",(0,n.jsx)(t.code,{children:"model-svc:platform:view"})," permission."]}),"\n",(0,n.jsx)(c(),{parameters:void 0}),"\n",(0,n.jsx)(m(),{title:"Body",body:void 0}),"\n",(0,n.jsx)(y(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{platforms:{items:{properties:{architectures:{properties:{cuda:{allOf:[{properties:{container:{allOf:[{properties:{envars:{description:'Environment variables to be passed to the container (e.g., "DEVICES=all").',items:{properties:{key:{description:"Key is the environment variable name.",type:"string"},value:{description:"Value is the environment variable value.",type:"string"}},type:"object"},type:"array"},imageTemplate:{description:"Template for constructing the container image name.",type:"string"},keeps:{description:"List of container paths that should persist across restarts.",items:{properties:{path:{description:"Path is the absolute path inside the container for the folder that should persist across restarts.",type:"string"},readOnly:{description:"ReadOnly indicates whether the keep is read-only.",type:"boolean"}},type:"object"},type:"array"},port:{description:"Internal port exposed by the container.",type:"integer"}},type:"object"}],description:"Container configuration related to CUDA usage."},cudaVersionPrecision:{description:'Level of precision for selecting the CUDA version when resolving the container image.\n- 2 -> Use "major.minor" (e.g., "12.2")\n- 3 -> Use "major.minor.patch" (e.g., "12.2.0")',type:"integer"},defaultCudaVersion:{description:'Default CUDA version to use (e.g., "12.2" or "12.2.0").',type:"string"},defaultCudnnVersion:{description:"Default cuDNN version to use alongside CUDA.",type:"string"}},type:"object"}],description:"CUDA-specific container parameters, if applicable."},default:{allOf:[{properties:{container:{properties:{envars:{description:'Environment variables to be passed to the container (e.g., "DEVICES=all").',items:{properties:{key:{description:"Key is the environment variable name.",type:"string"},value:{description:"Value is the environment variable value.",type:"string"}},type:"object"},type:"array"},imageTemplate:{description:"Template for constructing the container image name.",type:"string"},keeps:{description:"List of container paths that should persist across restarts.",items:{properties:{path:{description:"Path is the absolute path inside the container for the folder that should persist across restarts.",type:"string"},readOnly:{description:"ReadOnly indicates whether the keep is read-only.",type:"boolean"}},type:"object"},type:"array"},port:{description:"Internal port exposed by the container.",type:"integer"}},type:"object"}},type:"object"}],description:"Default container configuration for non-GPU environments."}},type:"object"},id:{type:"string"},name:{type:"string"},types:{description:"List of prompt types that the AI engine supports.",items:{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]},type:"array"},version:{type:"integer"}},type:"object"},type:"array"}},required:["platforms"],type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function j(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(b,{...e})}):b(e)}}}]);