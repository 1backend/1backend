"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[6437],{46284:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>h,contentTitle:()=>b,default:()=>P,frontMatter:()=>g,metadata:()=>r,toc:()=>f});const r=JSON.parse('{"id":"1backend/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/1backend/list-prompts.api.mdx","sourceDirName":"1backend","slug":"/1backend/list-prompts","permalink":"/docs/1backend/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/1backend/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/1backend/subscribe-to-prompt-responses"}}');var s=i(74848),n=i(28453),o=i(53746),p=i.n(o),a=i(56518),c=i.n(a),m=i(99972),d=i.n(m),l=i(25342),u=i.n(l),y=(i(44215),i(82223),i(24861));const g={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend/1-backend",custom_edit_url:null},b=void 0,h={},f=[];function x(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(y.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(y.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(c(),{parameters:void 0}),"\n",(0,s.jsx)(d(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the `go -> openapi -> go` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., `[42]`.",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(u(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function P(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}}}]);