"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[6624],{25413:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"running-the-server/backend-environment-variables","title":"Backend Environment Variables","description":"OBSERVERURL","source":"@site/docs/running-the-server/backend-environment-variables.md","sourceDirName":"running-the-server","slug":"/running-the-server/backend-environment-variables","permalink":"/docs/running-the-server/backend-environment-variables","draft":false,"unlisted":false,"editUrl":"https://github.com/1backend/1backend/tree/main/docs-source/docs/running-the-server/backend-environment-variables.md","tags":[{"inline":true,"label":"configuration","permalink":"/docs/tags/configuration"},{"inline":true,"label":"envars","permalink":"/docs/tags/envars"},{"inline":true,"label":"backend","permalink":"/docs/tags/backend"},{"inline":true,"label":"daemon","permalink":"/docs/tags/daemon"},{"inline":true,"label":"setup","permalink":"/docs/tags/setup"}],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"tags":["configuration","envars","backend","daemon","setup"]},"sidebar":"tutorialSidebar","previous":{"title":"Frontend Environment Variables","permalink":"/docs/running-the-server/frontend-environment-variables"},"next":{"title":"Once the 1Backend server is running","permalink":"/docs/running-the-server/using"}}');var i=s(74848),o=s(28453);const t={sidebar_position:3,tags:["configuration","envars","backend","daemon","setup"]},a="Backend Environment Variables",d={},c=[{value:"<code>OB_SERVER_URL</code>",id:"ob_server_url",level:2},{value:"<code>OB_SELF_URL</code>",id:"ob_self_url",level:2},{value:"<code>OB_TEST</code>",id:"ob_test",level:2},{value:"<code>OB_NODE_ID</code>",id:"ob_node_id",level:2},{value:"<code>OB_GPU_PLATFORM</code>",id:"ob_gpu_platform",level:2},{value:"<code>OB_VOLUME_NAME</code>",id:"ob_volume_name",level:2},{value:"<code>OB_LLM_HOST</code>",id:"ob_llm_host",level:2},{value:"<code>OB_DB</code>",id:"ob_db",level:2},{value:"PostgreSQL",id:"postgresql",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"backend-environment-variables",children:"Backend Environment Variables"})}),"\n",(0,i.jsx)(n.h2,{id:"ob_server_url",children:(0,i.jsx)(n.code,{children:"OB_SERVER_URL"})}),"\n",(0,i.jsx)(n.p,{children:"The OB_SERVER_URL is the internally addressable (non-public-facing) URL of an 1Backend server. It should point to the local 1Backend instance on each physical node. Ideally, every node should have its own 1Backend instance."}),"\n",(0,i.jsxs)(n.p,{children:["This envar should be set only for microservices built on 1Backend. The 1Backend server itself should use ",(0,i.jsx)(n.code,{children:"OB_SELF_URL"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"ob_self_url",children:(0,i.jsx)(n.code,{children:"OB_SELF_URL"})}),"\n",(0,i.jsx)(n.p,{children:"Microservices use this to register themselves in the 1Backend registry. The 1Backend server uses this to address itself."}),"\n",(0,i.jsx)(n.h2,{id:"ob_test",children:(0,i.jsx)(n.code,{children:"OB_TEST"})}),"\n",(0,i.jsx)(n.p,{children:"Microservices and the 1Backend server uses this envar to detect if they are running as part of a test."}),"\n",(0,i.jsx)(n.p,{children:"When set to true, subsystems act accordingly: for example the datastore will prefix tables with random numbers to provide a unique and clean environment for each test."}),"\n",(0,i.jsx)(n.h2,{id:"ob_node_id",children:(0,i.jsx)(n.code,{children:"OB_NODE_ID"})}),"\n",(0,i.jsxs)(n.p,{children:["For information about this, please refer to the ",(0,i.jsx)(n.a,{href:"/docs/built-in-services/registry-svc#node",children:"Registry Svc Node section"})]}),"\n",(0,i.jsx)(n.h2,{id:"ob_gpu_platform",children:(0,i.jsx)(n.code,{children:"OB_GPU_PLATFORM"})}),"\n",(0,i.jsx)(n.p,{children:"This envar is used to enabel GPU acceleration.\nSupported platforms:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"cuda"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Do not set this if your card doesn't support the given architecture or things will break."}),"\n",(0,i.jsx)(n.h2,{id:"ob_volume_name",children:(0,i.jsx)(n.code,{children:"OB_VOLUME_NAME"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["This flag is typically unnecessary since 1Backend automatically detects the volume that is bound to ",(0,i.jsx)(n.code,{children:"/root/.1backend"}),". Use it only as a corrective action."]})}),"\n",(0,i.jsx)(n.p,{children:"This envar is needed when 1Backend runs as a container next to containers it starts:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"Host\n |\n |-> 1Backend Container\n |-> Container Launched By 1Backend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For the containers like ",(0,i.jsx)(n.code,{children:"llama-cpp"})," to be able to read the models downloaded by 1Backend we they must both mount the same docker volume."]}),"\n",(0,i.jsxs)(n.p,{children:["An example of this can be seen in the root ",(0,i.jsx)(n.code,{children:"docker-compose.yaml"})," file: ",(0,i.jsx)(n.code,{children:"OB_VOLUME_NAME=singulatron-data"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"So cycle goes like this:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["1Backend container writes to ",(0,i.jsx)(n.code,{children:"/root/.1backend"}),", which is mounted to the volume ",(0,i.jsx)(n.code,{children:"singulatron-data"})]}),"\n",(0,i.jsxs)(n.li,{children:["Assets (which are basically downloaded files) will be passed to containers created by 1Backend by mounting files in ",(0,i.jsx)(n.code,{children:"singulatron-data"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"ob_llm_host",children:(0,i.jsx)(n.code,{children:"OB_LLM_HOST"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"This flag is typically unnecessary since 1Backend retrieves the IP of the Docker bridge. Use it only as a corrective action."})}),"\n",(0,i.jsx)(n.p,{children:"When 1Backend is running in a container, it needs to know how to address its siblings (other containers it started):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"Host\n |\n |-> 1Backend Container\n |-> Container Launched By 1Backend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"1Backend Container"})," uses the envar ",(0,i.jsx)(n.code,{children:"OB_LLM_HOST"})," to address ",(0,i.jsx)(n.code,{children:"Container Launched By 1Backend"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Typically this value should be ",(0,i.jsx)(n.code,{children:"172.17.0.1"})," if you are using the default docker network."]}),"\n",(0,i.jsxs)(n.p,{children:["If you are using an other network than default, use ",(0,i.jsx)(n.code,{children:"docker network inspect"})," to find out the IP of your docker bridge for that network.\nUsually it's going to be ",(0,i.jsx)(n.code,{children:"172.18.0.1"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"This envar is not needed if 1Backend runs directly on the host:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"Host With 1Backend\n |\n |-> Container Launched By 1Backend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"ob_db",children:(0,i.jsx)(n.code,{children:"OB_DB"})}),"\n",(0,i.jsx)(n.p,{children:"You can use this envar to make 1Backend actually use a database instead of local file storage to store data."}),"\n",(0,i.jsx)(n.h3,{id:"postgresql",children:"PostgreSQL"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:'OB_DB=postgres\nOB_DB_DRIVER="postgres" # or "mysql"\nOB_DB_CONNECTION_STRING="postgres://postgres:mysecretpassword@localhost:5432/mydatabase?sslmode=disable"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Naturally, you should change the details of the connection string to reflect your environment."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(96540);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);