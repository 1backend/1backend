"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[3780],{1294:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"built-in-services/proxy-svc","title":"Proxy Svc","description":"The Proxy Svc is a sophisticated reverse proxy and load balancer that handles both internal service routing and edge traffic management with automatic HTTPS certificate provisioning.","source":"@site/docs/built-in-services/proxy-svc.md","sourceDirName":"built-in-services","slug":"/built-in-services/proxy-svc","permalink":"/docs/built-in-services/proxy-svc","draft":false,"unlisted":false,"editUrl":"https://github.com/1backend/1backend/tree/main/docs-source/docs/built-in-services/proxy-svc.md","tags":[{"inline":true,"label":"proxy-svc","permalink":"/docs/tags/proxy-svc"},{"inline":true,"label":"routing","permalink":"/docs/tags/routing"},{"inline":true,"label":"reverse-proxy","permalink":"/docs/tags/reverse-proxy"},{"inline":true,"label":"edge-proxy","permalink":"/docs/tags/edge-proxy"},{"inline":true,"label":"load-balancer","permalink":"/docs/tags/load-balancer"},{"inline":true,"label":"certificates","permalink":"/docs/tags/certificates"},{"inline":true,"label":"https","permalink":"/docs/tags/https"},{"inline":true,"label":"tls","permalink":"/docs/tags/tls"},{"inline":true,"label":"acme","permalink":"/docs/tags/acme"},{"inline":true,"label":"lets-encrypt","permalink":"/docs/tags/lets-encrypt"},{"inline":true,"label":"multitenant","permalink":"/docs/tags/multitenant"}],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15,"tags":["proxy-svc","routing","reverse-proxy","edge-proxy","load-balancer","certificates","https","tls","acme","lets-encrypt","multitenant"]},"sidebar":"tutorialSidebar","previous":{"title":"User Svc","permalink":"/docs/built-in-services/user-svc"},"next":{"title":"Secret Svc","permalink":"/docs/built-in-services/secret-svc"}}');var i=t(74848),s=t(28453);const o={sidebar_position:15,tags:["proxy-svc","routing","reverse-proxy","edge-proxy","load-balancer","certificates","https","tls","acme","lets-encrypt","multitenant"]},a="Proxy Svc",c={},l=[{value:"Architecture &amp; Purpose",id:"architecture--purpose",level:2},{value:"Dual Operation Modes",id:"dual-operation-modes",level:3},{value:"CLI Usage",id:"cli-usage",level:2},{value:"Route Management",id:"route-management",level:3},{value:"Route Configuration Files",id:"route-configuration-files",level:3},{value:"Single Route YAML",id:"single-route-yaml",level:4},{value:"Multiple Routes YAML",id:"multiple-routes-yaml",level:4},{value:"Route Management Examples",id:"route-management-examples",level:3},{value:"HTTP API Usage",id:"http-api-usage",level:3},{value:"Service Proxying (Internal Routing)",id:"service-proxying-internal-routing",level:2},{value:"How Service Routing Works",id:"how-service-routing-works",level:3},{value:"Service Discovery Integration",id:"service-discovery-integration",level:3},{value:"Load Balancing &amp; Health Checking",id:"load-balancing--health-checking",level:3},{value:"Service Routing Examples",id:"service-routing-examples",level:3},{value:"Edge Proxying (External Traffic)",id:"edge-proxying-external-traffic",level:2},{value:"Enabling Edge Proxy",id:"enabling-edge-proxy",level:3},{value:"Domain-Based Routing",id:"domain-based-routing",level:3},{value:"Edge Proxy Flow",id:"edge-proxy-flow",level:3},{value:"Automatic HTTPS Certificates",id:"automatic-https-certificates",level:3},{value:"Certificate File Sync",id:"certificate-file-sync",level:3},{value:"Real-World Configuration Examples",id:"real-world-configuration-examples",level:2},{value:"1. Single Application Deployment",id:"1-single-application-deployment",level:3},{value:"2. Multi-Tenant SaaS Platform",id:"2-multi-tenant-saas-platform",level:3},{value:"3. Microservices Architecture",id:"3-microservices-architecture",level:3},{value:"4. Development Environment",id:"4-development-environment",level:3},{value:"5. Staging &amp; Production Split",id:"5-staging--production-split",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Custom Service Registration with Proxy",id:"custom-service-registration-with-proxy",level:3},{value:"Health Check Integration",id:"health-check-integration",level:3},{value:"Load Balancing Strategies",id:"load-balancing-strategies",level:3},{value:"SSL/TLS Configuration",id:"ssltls-configuration",level:3},{value:"Monitoring &amp; Observability",id:"monitoring--observability",level:2},{value:"Route Health Monitoring",id:"route-health-monitoring",level:3},{value:"Service Proxy Monitoring",id:"service-proxy-monitoring",level:3},{value:"Certificate Monitoring",id:"certificate-monitoring",level:3},{value:"Performance Analytics",id:"performance-analytics",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"<strong>Routes Not Working</strong>",id:"routes-not-working",level:4},{value:"<strong>Certificate Issues</strong>",id:"certificate-issues",level:4},{value:"<strong>Service Proxy Issues</strong>",id:"service-proxy-issues",level:4},{value:"<strong>Load Balancing Problems</strong>",id:"load-balancing-problems",level:4},{value:"Debug Commands",id:"debug-commands",level:3},{value:"Performance Debugging",id:"performance-debugging",level:3},{value:"Configuration Examples",id:"configuration-examples",level:2},{value:"Docker Compose Integration",id:"docker-compose-integration",level:3},{value:"Kubernetes Deployment",id:"kubernetes-deployment",level:3},{value:"Nginx Integration",id:"nginx-integration",level:3},{value:"API Reference Summary",id:"api-reference-summary",level:2},{value:"Permissions &amp; Security",id:"permissions--security",level:2},{value:"Related Services",id:"related-services",level:2},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Production Best Practices",id:"production-best-practices",level:2},{value:"SSL/TLS Security",id:"ssltls-security",level:3},{value:"High Availability",id:"high-availability",level:3},{value:"Backup &amp; Recovery",id:"backup--recovery",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"proxy-svc",children:"Proxy Svc"})}),"\n",(0,i.jsx)(n.p,{children:"The Proxy Svc is a sophisticated reverse proxy and load balancer that handles both internal service routing and edge traffic management with automatic HTTPS certificate provisioning."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This page provides a comprehensive overview of ",(0,i.jsx)(n.code,{children:"Proxy Svc"}),". For detailed API information, refer to the ",(0,i.jsx)(n.a,{href:"/docs/1backend-api/list-routes",children:"Proxy Svc API documentation"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"architecture--purpose",children:"Architecture & Purpose"}),"\n",(0,i.jsxs)(n.p,{children:["Proxy Svc serves as the ",(0,i.jsx)(n.strong,{children:"traffic management layer"})," for 1Backend, providing:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service Proxying"}),": Routes requests to custom services registered in the Registry Svc"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edge Proxying"}),": Handles external HTTPS traffic with automatic TLS termination"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load Balancing"}),": Intelligent distribution with health-aware routing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Certificate Management"}),": Automatic Let's Encrypt certificate provisioning and renewal"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-Tenant Routing"}),": Domain-based routing for multiple applications"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dual-operation-modes",children:"Dual Operation Modes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-mermaid",children:'graph TD\n    Client[External Client]\n    Edge[Edge Proxy :80/:443]\n    Internal[Internal Proxy :11337]\n    Registry[Registry Svc]\n    Service[Custom Services]\n    \n    Client --\x3e Edge\n    Edge --\x3e |Domain routing| Service\n    Client --\x3e Internal\n    Internal --\x3e Registry\n    Registry --\x3e |Service discovery| Service\n    \n    subgraph "Edge Mode (OB_EDGE_PROXY=true)"\n        Edge\n    end\n    \n    subgraph "Service Mode (Always Active)"\n        Internal\n        Registry\n    end\n'})}),"\n",(0,i.jsx)(n.h2,{id:"cli-usage",children:"CLI Usage"}),"\n",(0,i.jsx)(n.h3,{id:"route-management",children:"Route Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# List all configured routes\noo routes list\noo routes ls\noo r ls\n\n# Save routes from YAML file\noo routes save routes.yaml\noo r s routes.yaml\n\n# Save routes from directory (processes all .yaml files)\noo routes save ./config/routes/\n"})}),"\n",(0,i.jsx)(n.h3,{id:"route-configuration-files",children:"Route Configuration Files"}),"\n",(0,i.jsx)(n.h4,{id:"single-route-yaml",children:"Single Route YAML"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# api-route.yaml\nid: "api.example.com"\ntarget: "http://1backend:11337"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"multiple-routes-yaml",children:"Multiple Routes YAML"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# routes.yaml\n- id: "api.example.com"\n  target: "http://1backend:11337"\n- id: "example.com"\n  target: "http://frontend:8080"\n- id: "cdn.example.com"\n  target: "http://nginx:80"\n- id: "app.example.com"\n  target: "http://react-app:3000"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"route-management-examples",children:"Route Management Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Development setup\ncat > dev-routes.yaml << EOF\n- id: "api.localhost"\n  target: "http://localhost:11337"\n- id: "app.localhost"  \n  target: "http://localhost:3000"\n- id: "admin.localhost"\n  target: "http://localhost:8080"\nEOF\n\noo routes save dev-routes.yaml\n\n# Production setup\ncat > prod-routes.yaml << EOF\n- id: "api.mycompany.com"\n  target: "http://1backend:11337"\n- id: "mycompany.com"\n  target: "http://frontend:8080"\n- id: "cdn.mycompany.com"\n  target: "http://cdn-server:80"\n- id: "admin.mycompany.com"\n  target: "http://admin-panel:3000"\nEOF\n\noo routes save prod-routes.yaml\n\n# Staging environment\ncat > staging-routes.yaml << EOF\n- id: "staging-api.mycompany.com"\n  target: "http://staging-backend:11337"\n- id: "staging.mycompany.com"\n  target: "http://staging-frontend:8080"\nEOF\n\noo routes save staging-routes.yaml\n'})}),"\n",(0,i.jsx)(n.h3,{id:"http-api-usage",children:"HTTP API Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# List routes via API\noo post /proxy-svc/routes\n\n# Save routes via API\noo put /proxy-svc/routes \\\n  --routes=\'[\n    {"id": "api.example.com", "target": "http://1backend:11337"},\n    {"id": "example.com", "target": "http://frontend:8080"}\n  ]\'\n\n# List certificates\noo post /proxy-svc/certs\n\n# Filter routes by IDs\noo post /proxy-svc/routes \\\n  --ids=\'["api.example.com", "example.com"]\'\n\n# Filter certificates by domain\noo post /proxy-svc/certs \\\n  --ids=\'["example.com", "api.example.com"]\'\n'})}),"\n",(0,i.jsx)(n.h2,{id:"service-proxying-internal-routing",children:"Service Proxying (Internal Routing)"}),"\n",(0,i.jsx)(n.h3,{id:"how-service-routing-works",children:"How Service Routing Works"}),"\n",(0,i.jsx)(n.p,{children:"When you send a request to 1Backend:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl http://127.0.0.1:11337/user-svc/login\n"})}),"\n",(0,i.jsx)(n.p,{children:"The routing decision follows this flow:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-mermaid",children:'flowchart TD\n    Request["`**Client Request**\n    /user-svc/login`"]\n    BuiltIn{"`Is \'user-svc\' \n    a built-in service?`"}\n    Registry["`**Registry Lookup**\n    Find \'user-svc\' instances`"]\n    Health{"`Any healthy \n    instances?`"}\n    LoadBalance["`**Load Balancing**\n    Select healthy instance`"]\n    Proxy["`**Proxy Request**\n    Forward to target`"]\n    Error404["`**404 Not Found**\n    No instances available`"]\n    Direct["`**Direct Route**\n    Built-in service`"]\n    \n    Request --\x3e BuiltIn\n    BuiltIn --\x3e|Yes| Direct\n    BuiltIn --\x3e|No| Registry\n    Registry --\x3e Health\n    Health --\x3e|Yes| LoadBalance\n    Health --\x3e|No| Error404\n    LoadBalance --\x3e Proxy\n'})}),"\n",(0,i.jsx)(n.h3,{id:"service-discovery-integration",children:"Service Discovery Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Register a service instance (prerequisite for proxying)\noo post /registry-svc/instances/register \\\n  --slug="user-svc" \\\n  --url="http://user-service:8080"\n\n# Test service proxying\ncurl http://localhost:11337/user-svc/health\n# This gets proxied to: http://user-service:8080/user-svc/health\n\n# Check instance health status\noo post /registry-svc/instances \\\n  --slug="user-svc"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"load-balancing--health-checking",children:"Load Balancing & Health Checking"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Multiple instances for load balancing\noo post /registry-svc/instances/register \\\n  --slug="api-svc" \\\n  --url="http://api-server-1:8080"\n\noo post /registry-svc/instances/register \\\n  --slug="api-svc" \\\n  --url="http://api-server-2:8080"\n\noo post /registry-svc/instances/register \\\n  --slug="api-svc" \\\n  --url="http://api-server-3:8080"\n\n# Proxy Svc will:\n# 1. Prioritize healthy instances\n# 2. Fall back to any available instances\n# 3. Randomly distribute load\n# 4. Return 404 if no instances exist\n'})}),"\n",(0,i.jsx)(n.h3,{id:"service-routing-examples",children:"Service Routing Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# E-commerce microservices\noo post /registry-svc/instances/register --slug="product-svc" --url="http://product-service:8080"\noo post /registry-svc/instances/register --slug="cart-svc" --url="http://cart-service:8080"\noo post /registry-svc/instances/register --slug="payment-svc" --url="http://payment-service:8080"\n\n# Client requests get automatically routed:\ncurl http://localhost:11337/product-svc/catalog\ncurl http://localhost:11337/cart-svc/add-item\ncurl http://localhost:11337/payment-svc/process\n\n# Multi-instance services for high availability\noo post /registry-svc/instances/register --slug="auth-svc" --url="http://auth-1:8080"\noo post /registry-svc/instances/register --slug="auth-svc" --url="http://auth-2:8080"\noo post /registry-svc/instances/register --slug="auth-svc" --url="http://auth-3:8080"\n\n# Requests to /auth-svc/* get load balanced across all 3 instances\n'})}),"\n",(0,i.jsx)(n.h2,{id:"edge-proxying-external-traffic",children:"Edge Proxying (External Traffic)"}),"\n",(0,i.jsx)(n.h3,{id:"enabling-edge-proxy",children:"Enabling Edge Proxy"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Enable edge proxy mode\nexport OB_EDGE_PROXY=true\n\n# The proxy will now listen on:\n# Port 80 (HTTP) - for ACME challenges and HTTP redirects\n# Port 443 (HTTPS) - for secure traffic with automatic TLS termination\n"})}),"\n",(0,i.jsx)(n.h3,{id:"domain-based-routing",children:"Domain-Based Routing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Configure production domain routing\ncat > production-routes.yaml << EOF\n- id: "myapp.com"\n  target: "http://frontend:8080"\n- id: "api.myapp.com"\n  target: "http://1backend:11337"\n- id: "admin.myapp.com"\n  target: "http://admin-dashboard:3000"\n- id: "docs.myapp.com"\n  target: "http://documentation:4000"\nEOF\n\noo routes save production-routes.yaml\n'})}),"\n",(0,i.jsx)(n.h3,{id:"edge-proxy-flow",children:"Edge Proxy Flow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant Browser\n    participant EdgeProxy as Edge Proxy :443\n    participant ACME as Let's Encrypt\n    participant Backend as Target Service\n    \n    Note over Browser,Backend: First-time domain setup\n    Browser->>EdgeProxy: HTTPS request to myapp.com\n    EdgeProxy->>ACME: Request certificate for myapp.com\n    ACME--\x3e>EdgeProxy: Certificate + Private Key\n    EdgeProxy->>EdgeProxy: Store encrypted certificate\n    EdgeProxy->>Backend: Forward request to http://frontend:8080\n    Backend--\x3e>EdgeProxy: Response\n    EdgeProxy--\x3e>Browser: HTTPS response\n    \n    Note over Browser,Backend: Subsequent requests\n    Browser->>EdgeProxy: HTTPS request to myapp.com\n    EdgeProxy->>EdgeProxy: TLS termination with stored cert\n    EdgeProxy->>Backend: Forward request to http://frontend:8080\n    Backend--\x3e>EdgeProxy: Response\n    EdgeProxy--\x3e>Browser: HTTPS response\n"})}),"\n",(0,i.jsx)(n.h3,{id:"automatic-https-certificates",children:"Automatic HTTPS Certificates"}),"\n",(0,i.jsx)(n.p,{children:"The edge proxy automatically handles:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Certificate Provisioning"}),": Requests certificates from Let's Encrypt"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Challenge Handling"}),": Responds to ACME HTTP-01 challenges on port 80"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TLS Termination"}),": Handles SSL/TLS encryption/decryption"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Certificate Renewal"}),": Automatically renews certificates before expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Certificate Storage"}),": Encrypted storage in the database"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check certificate status\noo post /proxy-svc/certs\n\n# View certificate details for a domain\noo post /proxy-svc/certs \\\n  --ids=\'["myapp.com"]\'\n\n# Sample certificate response:\n{\n  "certs": [\n    {\n      "id": "myapp.com",\n      "commonName": "myapp.com",\n      "dnsNames": ["myapp.com"],\n      "issuer": "Let\'s Encrypt",\n      "notBefore": "2024-01-01T00:00:00Z",\n      "notAfter": "2024-04-01T00:00:00Z",\n      "signatureAlgorithm": "SHA256-RSA",\n      "publicKeyAlgorithm": "RSA",\n      "publicKeyBitLength": 2048\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"certificate-file-sync",children:"Certificate File Sync"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Enable certificate file synchronization\nexport OB_SYNC_CERTS_TO_FILES=true\n\n# Certificates will be written to:\n# ~/.1backend/certs/live/myapp.com/cert.pem\n# ~/.1backend/certs/live/myapp.com/privkey.pem\n# ~/.1backend/certs/live/myapp.com/chain.pem\n# ~/.1backend/certs/live/myapp.com/fullchain.pem\n\n# This enables integration with external tools like nginx\n"})}),"\n",(0,i.jsx)(n.h2,{id:"real-world-configuration-examples",children:"Real-World Configuration Examples"}),"\n",(0,i.jsx)(n.h3,{id:"1-single-application-deployment",children:"1. Single Application Deployment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# simple-app.yaml\n- id: "myapp.com"\n  target: "http://frontend:8080"\n- id: "api.myapp.com"\n  target: "http://1backend:11337"\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# DNS Configuration\n# A record: myapp.com -> YOUR_SERVER_IP\n# A record: api.myapp.com -> YOUR_SERVER_IP\n\noo routes save simple-app.yaml\n\n# Test the setup\ncurl https://myapp.com\ncurl https://api.myapp.com/user-svc/health\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-multi-tenant-saas-platform",children:"2. Multi-Tenant SaaS Platform"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# saas-platform.yaml\n- id: "myplatform.com"\n  target: "http://marketing-site:8080"\n- id: "app.myplatform.com"\n  target: "http://app-frontend:3000"\n- id: "api.myplatform.com"\n  target: "http://1backend:11337"\n- id: "admin.myplatform.com"\n  target: "http://admin-panel:4000"\n- id: "docs.myplatform.com"\n  target: "http://documentation:5000"\n- id: "status.myplatform.com"\n  target: "http://status-page:6000"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-microservices-architecture",children:"3. Microservices Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# microservices.yaml\n- id: "gateway.company.com"\n  target: "http://1backend:11337"\n- id: "web.company.com" \n  target: "http://web-app:8080"\n- id: "mobile-api.company.com"\n  target: "http://mobile-backend:9000"\n- id: "analytics.company.com"\n  target: "http://analytics-dashboard:7000"\n- id: "monitoring.company.com"\n  target: "http://grafana:3000"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-development-environment",children:"4. Development Environment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# dev-environment.yaml\n- id: "api.dev.company.com"\n  target: "http://localhost:11337"\n- id: "app.dev.company.com"\n  target: "http://localhost:3000"\n- id: "admin.dev.company.com"\n  target: "http://localhost:8080"\n- id: "docs.dev.company.com"\n  target: "http://localhost:4000"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"5-staging--production-split",children:"5. Staging & Production Split"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Staging routes\ncat > staging.yaml << EOF\n- id: "staging-api.company.com"\n  target: "http://staging-backend:11337"\n- id: "staging.company.com"\n  target: "http://staging-frontend:8080"\nEOF\n\n# Production routes  \ncat > production.yaml << EOF\n- id: "api.company.com"\n  target: "http://prod-backend:11337"\n- id: "company.com"\n  target: "http://prod-frontend:8080"\n- id: "www.company.com"\n  target: "http://prod-frontend:8080"\nEOF\n\noo routes save staging.yaml\noo routes save production.yaml\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"custom-service-registration-with-proxy",children:"Custom Service Registration with Proxy"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Register custom services for proxying\nregister_service() {\n  local service_name=$1\n  local service_url=$2\n  \n  oo post /registry-svc/instances/register \\\n    --slug="$service_name" \\\n    --url="$service_url" \\\n    --metadata.version="1.0.0" \\\n    --metadata.environment="production"\n}\n\n# Register multiple services\nregister_service "user-svc" "http://user-service:8080"\nregister_service "product-svc" "http://product-service:8080"\nregister_service "order-svc" "http://order-service:8080"\nregister_service "notification-svc" "http://notification-service:8080"\n\n# These services become available at:\n# http://localhost:11337/user-svc/*\n# http://localhost:11337/product-svc/*\n# http://localhost:11337/order-svc/*\n# http://localhost:11337/notification-svc/*\n'})}),"\n",(0,i.jsx)(n.h3,{id:"health-check-integration",children:"Health Check Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check service health before routing\nhealth_check() {\n  local service_url=$1\n  curl -f "$service_url/health" > /dev/null 2>&1\n}\n\n# Automated health checking script\nmonitor_services() {\n  services=(\n    "user-svc:http://user-service:8080"\n    "product-svc:http://product-service:8080"\n    "order-svc:http://order-service:8080"\n  )\n  \n  for service in "${services[@]}"; do\n    IFS=\':\' read -r name url <<< "$service"\n    \n    if health_check "$url"; then\n      echo "\u2705 $name is healthy"\n    else\n      echo "\u274c $name is unhealthy"\n      # Optionally remove unhealthy instance\n      # oo delete /registry-svc/instances/$instance_id\n    fi\n  done\n}\n\n# Run health checks\nmonitor_services\n'})}),"\n",(0,i.jsx)(n.h3,{id:"load-balancing-strategies",children:"Load Balancing Strategies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Round-robin load balancing with multiple instances\nsetup_load_balanced_service() {\n  local service_name=$1\n  shift\n  local instances=("$@")\n  \n  for instance in "${instances[@]}"; do\n    oo post /registry-svc/instances/register \\\n      --slug="$service_name" \\\n      --url="$instance"\n  done\n}\n\n# Setup load balanced API service\nsetup_load_balanced_service "api-svc" \\\n  "http://api-1:8080" \\\n  "http://api-2:8080" \\\n  "http://api-3:8080"\n\n# Proxy Svc will automatically:\n# 1. Prefer healthy instances\n# 2. Randomly distribute requests\n# 3. Handle instance failures gracefully\n'})}),"\n",(0,i.jsx)(n.h3,{id:"ssltls-configuration",children:"SSL/TLS Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Manual certificate installation (for custom CAs)\ninstall_custom_cert() {\n  local domain=$1\n  local cert_file=$2\n  \n  # Note: This endpoint is primarily for testing\n  # Production certificates should be managed automatically\n  oo put /proxy-svc/certs \\\n    --certs=\'[{\n      "id": "\'$domain\'",\n      "cert": "\'$(base64 -w 0 < $cert_file)\'"\n    }]\'\n}\n\n# Check certificate expiration\ncheck_cert_expiry() {\n  local domain=$1\n  echo | openssl s_client -servername $domain -connect $domain:443 2>/dev/null | \\\n    openssl x509 -noout -dates\n}\n\n# Monitor certificate expiration\nfor domain in myapp.com api.myapp.com admin.myapp.com; do\n  echo "Certificate expiry for $domain:"\n  check_cert_expiry $domain\ndone\n'})}),"\n",(0,i.jsx)(n.h2,{id:"monitoring--observability",children:"Monitoring & Observability"}),"\n",(0,i.jsx)(n.h3,{id:"route-health-monitoring",children:"Route Health Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Monitor edge proxy routes\nmonitor_edge_routes() {\n  while true; do\n    echo "=== Edge Route Health Check $(date) ==="\n    \n    oo post /proxy-svc/routes | jq -r \'.routes[] | "\\(.id) -> \\(.target)"\' | \\\n    while IFS=\' -> \' read -r domain target; do\n      # Check HTTPS accessibility\n      if curl -fsSL --max-time 5 "https://$domain" > /dev/null 2>&1; then\n        echo "\u2705 $domain (https)"\n      else\n        echo "\u274c $domain (https) - checking http..."\n        if curl -fsSL --max-time 5 "http://$domain" > /dev/null 2>&1; then\n          echo "\u26a0\ufe0f  $domain (http only)"\n        else\n          echo "\u274c $domain (unreachable)"\n        fi\n      fi\n      \n      # Check target availability\n      if curl -fsSL --max-time 5 "$target" > /dev/null 2>&1; then\n        echo "\u2705 Target: $target"\n      else\n        echo "\u274c Target: $target (unreachable)"\n      fi\n      \n      echo "---"\n    done\n    \n    sleep 30\n  done\n}\n\nmonitor_edge_routes\n'})}),"\n",(0,i.jsx)(n.h3,{id:"service-proxy-monitoring",children:"Service Proxy Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Monitor service proxy health\nmonitor_service_routes() {\n  echo "=== Service Route Health Check $(date) ==="\n  \n  # Get all registered services\n  oo post /registry-svc/instances | jq -r \'.instances[] | "\\(.slug) -> \\(.url)"\' | \\\n  while IFS=\' -> \' read -r slug url; do\n    # Test proxy routing\n    proxy_url="http://localhost:11337/$slug/health"\n    \n    if curl -fsSL --max-time 5 "$proxy_url" > /dev/null 2>&1; then\n      echo "\u2705 Proxy: $slug (via 1Backend)"\n    else\n      echo "\u274c Proxy: $slug (proxy failed)"\n    fi\n    \n    # Test direct access\n    if curl -fsSL --max-time 5 "$url/health" > /dev/null 2>&1; then\n      echo "\u2705 Direct: $url"\n    else\n      echo "\u274c Direct: $url (unreachable)"\n    fi\n    \n    echo "---"\n  done\n}\n\nmonitor_service_routes\n'})}),"\n",(0,i.jsx)(n.h3,{id:"certificate-monitoring",children:"Certificate Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Monitor certificate status\nmonitor_certificates() {\n  echo "=== Certificate Status $(date) ==="\n  \n  oo post /proxy-svc/certs | jq -r \'.certs[] | "\\(.id) \\(.notAfter) \\(.issuer)"\' | \\\n  while read -r domain expiry issuer; do\n    # Calculate days until expiry\n    expiry_epoch=$(date -d "$expiry" +%s)\n    current_epoch=$(date +%s)\n    days_left=$(( (expiry_epoch - current_epoch) / 86400 ))\n    \n    if [ $days_left -gt 30 ]; then\n      status="\u2705"\n    elif [ $days_left -gt 7 ]; then\n      status="\u26a0\ufe0f "\n    else\n      status="\u274c"\n    fi\n    \n    echo "$status $domain - $days_left days left ($issuer)"\n  done\n}\n\nmonitor_certificates\n'})}),"\n",(0,i.jsx)(n.h3,{id:"performance-analytics",children:"Performance Analytics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Proxy performance testing\ntest_proxy_performance() {\n  local target_url=$1\n  local num_requests=${2:-100}\n  \n  echo "Testing proxy performance: $target_url"\n  \n  # Direct target test\n  echo "Direct target performance:"\n  curl -w "@curl-format.txt" -o /dev/null -s "$target_url"\n  \n  # Proxy performance test\n  echo "Proxy performance:"\n  proxy_url="http://localhost:11337/$(basename $target_url)"\n  curl -w "@curl-format.txt" -o /dev/null -s "$proxy_url"\n  \n  # Concurrent test\n  echo "Concurrent test ($num_requests requests):"\n  time for i in $(seq 1 $num_requests); do\n    curl -s "$proxy_url" > /dev/null &\n  done\n  wait\n}\n\n# Create curl format file\ncat > curl-format.txt << \'EOF\'\n     time_namelookup:  %{time_namelookup}\\n\n        time_connect:  %{time_connect}\\n\n     time_appconnect:  %{time_appconnect}\\n\n    time_pretransfer:  %{time_pretransfer}\\n\n       time_redirect:  %{time_redirect}\\n\n  time_starttransfer:  %{time_starttransfer}\\n\n                     ----------\\n\n          time_total:  %{time_total}\\n\nEOF\n\n# Run performance tests\ntest_proxy_performance "http://frontend:8080"\ntest_proxy_performance "http://api-service:8080"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsx)(n.h4,{id:"routes-not-working",children:(0,i.jsx)(n.strong,{children:"Routes Not Working"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check if routes are properly configured\noo routes list\n\n# Verify route exists for your domain\noo post /proxy-svc/routes \\\n  --ids='[\"your-domain.com\"]'\n\n# Test if target is reachable\ncurl -v http://your-target-service:8080\n\n# Check DNS configuration\nnslookup your-domain.com\ndig your-domain.com A\n\n# Test HTTPS certificate\ncurl -vI https://your-domain.com\n"})}),"\n",(0,i.jsx)(n.h4,{id:"certificate-issues",children:(0,i.jsx)(n.strong,{children:"Certificate Issues"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check certificate status\noo post /proxy-svc/certs \\\n  --ids=\'["your-domain.com"]\'\n\n# Test certificate chain\necho | openssl s_client -servername your-domain.com -connect your-domain.com:443\n\n# Check Let\'s Encrypt rate limits\ncurl "https://crt.sh/?q=your-domain.com&output=json" | jq length\n\n# Manually trigger certificate request (restart service)\ndocker restart 1backend-container\n'})}),"\n",(0,i.jsx)(n.h4,{id:"service-proxy-issues",children:(0,i.jsx)(n.strong,{children:"Service Proxy Issues"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check if service is registered\noo post /registry-svc/instances \\\n  --slug="your-service"\n\n# Verify service health\ncurl http://your-service:8080/health\n\n# Test direct proxy call\ncurl -v http://localhost:11337/your-service/health\n\n# Check service logs\ndocker logs your-service-container\n'})}),"\n",(0,i.jsx)(n.h4,{id:"load-balancing-problems",children:(0,i.jsx)(n.strong,{children:"Load Balancing Problems"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check all instances for a service\noo post /registry-svc/instances \\\n  --slug="your-service"\n\n# Test each instance individually\nfor url in $(oo post /registry-svc/instances --slug="your-service" | jq -r \'.instances[].url\'); do\n  echo "Testing: $url"\n  curl -f "$url/health" && echo "\u2705 Healthy" || echo "\u274c Unhealthy"\ndone\n\n# Check proxy logs for routing decisions\ndocker logs 1backend-proxy\n'})}),"\n",(0,i.jsx)(n.h3,{id:"debug-commands",children:"Debug Commands"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Comprehensive proxy debug\ndebug_proxy() {\n  echo "=== Proxy Service Debug ==="\n  \n  echo "1. Routes Configuration:"\n  oo routes list\n  \n  echo "2. Certificate Status:"\n  oo post /proxy-svc/certs\n  \n  echo "3. Service Instances:"\n  oo post /registry-svc/instances\n  \n  echo "4. Service Health Check:"\n  for service in $(oo post /registry-svc/instances | jq -r \'.instances[].slug\' | sort -u); do\n    echo "Testing service: $service"\n    curl -f "http://localhost:11337/$service/health" && echo "\u2705" || echo "\u274c"\n  done\n  \n  echo "5. Edge Proxy Test:"\n  if [ "$OB_EDGE_PROXY" = "true" ]; then\n    echo "Edge proxy is enabled"\n    for domain in $(oo routes list | tail -n +2 | awk \'{print $1}\'); do\n      echo "Testing domain: $domain"\n      curl -f "https://$domain" > /dev/null && echo "\u2705" || echo "\u274c"\n    done\n  else\n    echo "Edge proxy is disabled"\n  fi\n}\n\ndebug_proxy\n\n# Network connectivity test\ntest_connectivity() {\n  local target=$1\n  echo "Testing connectivity to: $target"\n  \n  # Extract host and port\n  if [[ $target =~ ^https?://([^:/]+)(:([0-9]+))?.*$ ]]; then\n    host=${BASH_REMATCH[1]}\n    port=${BASH_REMATCH[3]:-$(echo $target | grep -q ^https && echo 443 || echo 80)}\n  else\n    echo "Invalid URL format"\n    return 1\n  fi\n  \n  # Test DNS resolution\n  echo "DNS resolution:"\n  nslookup $host || echo "DNS resolution failed"\n  \n  # Test port connectivity\n  echo "Port connectivity:"\n  nc -zv $host $port || echo "Port $port is not reachable"\n  \n  # Test HTTP response\n  echo "HTTP response:"\n  curl -I --max-time 10 $target || echo "HTTP request failed"\n}\n\n# Usage\ntest_connectivity "http://frontend:8080"\ntest_connectivity "https://api.example.com"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"performance-debugging",children:"Performance Debugging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Proxy latency analysis\nanalyze_proxy_latency() {\n  local service=$1\n  local iterations=${2:-10}\n  \n  echo "Analyzing proxy latency for: $service"\n  \n  # Direct service call\n  echo "Direct service latency:"\n  for i in $(seq 1 $iterations); do\n    direct_time=$(curl -w "%{time_total}" -o /dev/null -s "http://$service:8080/health" 2>/dev/null || echo "0")\n    echo "Iteration $i: ${direct_time}s"\n  done\n  \n  # Proxy call\n  echo "Proxy service latency:"\n  for i in $(seq 1 $iterations); do\n    proxy_time=$(curl -w "%{time_total}" -o /dev/null -s "http://localhost:11337/${service}-svc/health" 2>/dev/null || echo "0")\n    echo "Iteration $i: ${proxy_time}s"\n  done\n}\n\n# Usage\nanalyze_proxy_latency "user-service" 5\n\n# Load testing\nload_test_proxy() {\n  local endpoint=$1\n  local concurrent=${2:-10}\n  local requests=${3:-100}\n  \n  echo "Load testing: $endpoint"\n  echo "Concurrent users: $concurrent"\n  echo "Total requests: $requests"\n  \n  # Using curl for simple load test\n  for i in $(seq 1 $concurrent); do\n    (\n      for j in $(seq 1 $((requests / concurrent))); do\n        curl -s "$endpoint" > /dev/null\n      done\n    ) &\n  done\n  \n  wait\n  echo "Load test completed"\n}\n\n# Usage\nload_test_proxy "http://localhost:11337/user-svc/health" 5 50\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,i.jsx)(n.h3,{id:"docker-compose-integration",children:"Docker Compose Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.yml\nversion: \'3.8\'\nservices:\n  1backend:\n    image: 1backend/1backend:latest\n    ports:\n      - "11337:11337"\n      - "80:80"\n      - "443:443"\n    environment:\n      - OB_EDGE_PROXY=true\n      - OB_SYNC_CERTS_TO_FILES=true\n    volumes:\n      - ./certs:/root/.1backend/certs\n      - ./routes:/app/routes\n    \n  frontend:\n    image: nginx:alpine\n    ports:\n      - "8080:80"\n    \n  api-service:\n    image: my-api:latest\n    ports:\n      - "8081:8080"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"kubernetes-deployment",children:"Kubernetes Deployment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# proxy-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: proxy-routes\ndata:\n  routes.yaml: |\n    - id: "api.myapp.com"\n      target: "http://1backend-service:11337"\n    - id: "myapp.com"\n      target: "http://frontend-service:80"\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: 1backend-proxy\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: 1backend-proxy\n  template:\n    metadata:\n      labels:\n        app: 1backend-proxy\n    spec:\n      containers:\n      - name: proxy\n        image: 1backend/1backend:latest\n        ports:\n        - containerPort: 11337\n        - containerPort: 80  \n        - containerPort: 443\n        env:\n        - name: OB_EDGE_PROXY\n          value: "true"\n        volumeMounts:\n        - name: routes\n          mountPath: /app/routes\n      volumes:\n      - name: routes\n        configMap:\n          name: proxy-routes\n'})}),"\n",(0,i.jsx)(n.h3,{id:"nginx-integration",children:"Nginx Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nginx",children:"# nginx.conf (when using certificate file sync)\nserver {\n    listen 443 ssl;\n    server_name myapp.com;\n    \n    ssl_certificate /path/to/.1backend/certs/live/myapp.com/fullchain.pem;\n    ssl_certificate_key /path/to/.1backend/certs/live/myapp.com/privkey.pem;\n    \n    location / {\n        proxy_pass http://frontend:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"api-reference-summary",children:"API Reference Summary"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Endpoint"}),(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"/proxy-svc/routes"})}),(0,i.jsx)(n.td,{children:"POST"}),(0,i.jsx)(n.td,{children:"List configured routes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"/proxy-svc/routes"})}),(0,i.jsx)(n.td,{children:"PUT"}),(0,i.jsx)(n.td,{children:"Save/update routes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"/proxy-svc/certs"})}),(0,i.jsx)(n.td,{children:"POST"}),(0,i.jsx)(n.td,{children:"List SSL certificates"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"/proxy-svc/certs"})}),(0,i.jsx)(n.td,{children:"PUT"}),(0,i.jsx)(n.td,{children:"Save certificates (testing only)"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"permissions--security",children:"Permissions & Security"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Required permissions\nproxy-svc:route:view    # List routes\nproxy-svc:route:edit    # Save/update routes\nproxy-svc:cert:view     # List certificates\nproxy-svc:cert:edit     # Save certificates (admin only)\n\n# Security features\n# - Encrypted certificate storage\n# - Automatic HTTPS certificate provisioning\n# - Health-aware load balancing\n# - Request header forwarding (X-Forwarded-For, X-Real-IP)\n# - Host policy validation for ACME challenges\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-services",children:"Related Services"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/built-in-services/registry-svc",children:"Registry Svc"})}),": Service discovery and instance management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/built-in-services/secret-svc",children:"Secret Svc"})}),": Secure storage of certificate private keys"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/built-in-services/policy-svc",children:"Policy Svc"})}),": Rate limiting and access control"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Edge proxy configuration\nOB_EDGE_PROXY=true                 # Enable edge proxy on ports 80/443\nOB_SYNC_CERTS_TO_FILES=true        # Write certificates to filesystem\nOB_SECRET_ENCRYPTION_KEY=your_key  # Key for encrypting stored certificates\n\n# Server configuration  \nOB_SERVER_URL=http://localhost:11337  # Internal proxy endpoint\n"})}),"\n",(0,i.jsx)(n.h2,{id:"production-best-practices",children:"Production Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"ssltls-security",children:"SSL/TLS Security"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Monitor certificate expiration\nmonitor_ssl_expiry() {\n  oo post /proxy-svc/certs | jq -r \'.certs[] | select(.notAfter | fromdateiso8601 < (now + 86400*30)) | .id\'\n}\n\n# Test SSL configuration\ntest_ssl_security() {\n  local domain=$1\n  echo "Testing SSL security for: $domain"\n  \n  # Test SSL Labs grade (requires external service)\n  # curl "https://api.ssllabs.com/api/v3/analyze?host=$domain"\n  \n  # Test certificate chain\n  echo | openssl s_client -servername $domain -connect $domain:443 -verify_return_error\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"high-availability",children:"High Availability"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Multiple edge proxy instances (load balancer)\n# Use external load balancer (HAProxy, AWS ALB, etc.) in front of multiple 1Backend instances\n\n# Health check endpoints\ncurl http://localhost:11337/health\ncurl https://your-domain.com/health\n\n# Monitoring integration\nmonitor_proxy_health() {\n  # Check internal proxy\n  if curl -f http://localhost:11337/health > /dev/null 2>&1; then\n    echo "\u2705 Internal proxy healthy"\n  else\n    echo "\u274c Internal proxy unhealthy"\n    exit 1\n  fi\n  \n  # Check edge proxy (if enabled)\n  if [ "$OB_EDGE_PROXY" = "true" ]; then\n    if netstat -tlnp | grep -q ":443.*LISTEN"; then\n      echo "\u2705 Edge proxy listening on 443"\n    else\n      echo "\u274c Edge proxy not listening on 443"\n      exit 1\n    fi\n  fi\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"backup--recovery",children:"Backup & Recovery"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Export routes configuration\nbackup_routes() {\n  local backup_file="routes-backup-$(date +%Y%m%d-%H%M%S).yaml"\n  oo post /proxy-svc/routes | jq -r \'.routes[] | {id, target}\' | \\\n    yq eval -P \'map(.)\' > "$backup_file"\n  echo "Routes backed up to: $backup_file"\n}\n\n# Restore routes configuration\nrestore_routes() {\n  local backup_file=$1\n  if [ -f "$backup_file" ]; then\n    oo routes save "$backup_file"\n    echo "Routes restored from: $backup_file"\n  else\n    echo "Backup file not found: $backup_file"\n    exit 1\n  fi\n}\n\n# Usage\nbackup_routes\nrestore_routes "routes-backup-20241215-143022.yaml"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Proxy Svc provides essential traffic management for 1Backend, handling everything from internal service discovery to production HTTPS traffic with automatic certificate management. It's the foundation for scalable, secure, and reliable service architecture."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);