"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[8825],{70978:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>T,frontMatter:()=>y,metadata:()=>r,toc:()=>f});const r=JSON.parse('{"id":"1backend-api/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/1backend-api/list-prompts.api.mdx","sourceDirName":"1backend-api","slug":"/1backend-api/list-prompts","permalink":"/docs/1backend-api/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend-api/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/1backend-api/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/1backend-api/subscribe-to-prompt-responses"}}');var s=i(74848),n=i(28453),o=i(57742),p=i.n(o),a=i(78178),d=i.n(a),m=i(19624),g=i.n(m),l=i(96226),c=i.n(l),u=(i(77675),i(19365),i(51107));const y={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend-api/1-backend",custom_edit_url:null},h=void 0,b={},f=[];function x(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(u.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(u.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(d(),{parameters:void 0}),"\n",(0,s.jsx)(g(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{afterJson:{description:"AfterJson is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.",type:"string"},count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},op:{enum:["or","equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpOr","OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]},subFilters:{description:"SubFilters is used for operations like OR where multiple filters are combined.",items:"circular()",type:"array"},valuesJson:{type:"string"}},type:"object"},type:"array"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},sortingType:{allOf:[{enum:["","numeric","text","date","random"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate","SortingTypeRandom"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(c(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function T(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}}}]);