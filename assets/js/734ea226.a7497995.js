"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[8825],{70978:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>f,contentTitle:()=>h,default:()=>T,frontMatter:()=>y,metadata:()=>r,toc:()=>b});const r=JSON.parse('{"id":"1backend-api/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/1backend-api/list-prompts.api.mdx","sourceDirName":"1backend-api","slug":"/1backend-api/list-prompts","permalink":"/docs/1backend-api/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend-api/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/1backend-api/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/1backend-api/subscribe-to-prompt-responses"}}');var s=i(74848),n=i(28453),o=i(57742),p=i.n(o),a=i(78178),d=i.n(a),m=i(19624),c=i.n(m),u=i(96226),l=i.n(u),g=(i(77675),i(19365),i(51107));const y={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend-api/1-backend",custom_edit_url:null},h=void 0,f={},b=[];function x(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(g.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(g.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(d(),{parameters:void 0}),"\n",(0,s.jsx)(c(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{afterJson:{description:"AfterJson is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.",type:"string"},count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},op:{enum:["or","equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpOr","OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]},subFilters:{description:"SubFilters is used for operations like OR where multiple filters are combined.",items:"circular()",type:"array"},valuesJson:{type:"string"}},type:"object"},type:"array"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},sortingType:{allOf:[{enum:["","numeric","text","date","random"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate","SortingTypeRandom"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(l(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function T(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}}}]);