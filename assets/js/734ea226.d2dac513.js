"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[8825],{70978:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>f,contentTitle:()=>h,default:()=>W,frontMatter:()=>u,metadata:()=>r,toc:()=>b});const r=JSON.parse('{"id":"1backend-api/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/1backend-api/list-prompts.api.mdx","sourceDirName":"1backend-api","slug":"/1backend-api/list-prompts","permalink":"/docs/1backend-api/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend-api/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/1backend-api/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/1backend-api/subscribe-to-prompt-responses"}}');var n=i(74848),s=i(28453),o=i(57742),a=i.n(o),p=i(78178),d=i.n(p),c=i(19624),l=i.n(c),m=i(96226),g=i.n(m),y=(i(77675),i(19365),i(51107));const u={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend-api/1-backend",custom_edit_url:null},h=void 0,f={},b=[];function T(e){const t={p:"p",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(y.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,n.jsx)(a(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,n.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,n.jsx)(y.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,n.jsx)(d(),{parameters:void 0}),"\n",(0,n.jsx)(l(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["or","equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpOr","OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]},subFilters:{description:"SubFilters is used for operations like OR where multiple filters are combined.",items:"circular()",type:"array"}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the `go -> openapi -> go` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., `[42]`.",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,n.jsx)(g(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function W(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(T,{...e})}):T(e)}}}]);