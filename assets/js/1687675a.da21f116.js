"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[5026],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var i=s(96540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},70083:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"built-in-services/registry-svc","title":"Registry Svc","description":"The Registry Svc is a comprehensive service discovery and registry system that manages service definitions, running instances, and distributed nodes in a microservices architecture.","source":"@site/docs/built-in-services/registry-svc.md","sourceDirName":"built-in-services","slug":"/built-in-services/registry-svc","permalink":"/docs/built-in-services/registry-svc","draft":false,"unlisted":false,"editUrl":"https://github.com/1backend/1backend/tree/main/docs-source/docs/built-in-services/registry-svc.md","tags":[{"inline":true,"label":"registry-svc","permalink":"/docs/tags/registry-svc"},{"inline":true,"label":"service-discovery","permalink":"/docs/tags/service-discovery"},{"inline":true,"label":"microservices","permalink":"/docs/tags/microservices"},{"inline":true,"label":"instances","permalink":"/docs/tags/instances"},{"inline":true,"label":"definitions","permalink":"/docs/tags/definitions"},{"inline":true,"label":"nodes","permalink":"/docs/tags/nodes"},{"inline":true,"label":"distributed","permalink":"/docs/tags/distributed"},{"inline":true,"label":"service-mesh","permalink":"/docs/tags/service-mesh"},{"inline":true,"label":"authentication","permalink":"/docs/tags/authentication"},{"inline":true,"label":"load-balancing","permalink":"/docs/tags/load-balancing"}],"version":"current","sidebarPosition":40,"frontMatter":{"sidebar_position":40,"tags":["registry-svc","service-discovery","microservices","instances","definitions","nodes","distributed","service-mesh","authentication","load-balancing"]},"sidebar":"tutorialSidebar","previous":{"title":"Config Svc","permalink":"/docs/built-in-services/config-svc"},"next":{"title":"File Svc","permalink":"/docs/built-in-services/file-svc"}}');var t=s(74848),r=s(28453);const o={sidebar_position:40,tags:["registry-svc","service-discovery","microservices","instances","definitions","nodes","distributed","service-mesh","authentication","load-balancing"]},c="Registry Svc",a={},l=[{value:"Architecture &amp; Purpose",id:"architecture--purpose",level:2},{value:"Core Entities Relationship",id:"core-entities-relationship",level:3},{value:"CLI Usage",id:"cli-usage",level:2},{value:"Instance Management",id:"instance-management",level:3},{value:"Definition Management",id:"definition-management",level:3},{value:"Node Management",id:"node-management",level:3},{value:"HTTP API Usage",id:"http-api-usage",level:3},{value:"Service Definitions",id:"service-definitions",level:2},{value:"Container-Based Definitions",id:"container-based-definitions",level:3},{value:"Simple Container Definition",id:"simple-container-definition",level:4},{value:"Advanced Container Definition",id:"advanced-container-definition",level:4},{value:"Repository-Based Definitions",id:"repository-based-definitions",level:3},{value:"Definition Management Commands",id:"definition-management-commands",level:3},{value:"Service Instance Registration",id:"service-instance-registration",level:2},{value:"Manual Instance Registration",id:"manual-instance-registration",level:3},{value:"Service Instance Discovery",id:"service-instance-discovery",level:3},{value:"Instance Status Management",id:"instance-status-management",level:3},{value:"Node Management &amp; Cluster Topology",id:"node-management--cluster-topology",level:2},{value:"Node Registration &amp; Heartbeat",id:"node-registration--heartbeat",level:3},{value:"Node Configuration",id:"node-configuration",level:3},{value:"Node Resource Monitoring",id:"node-resource-monitoring",level:3},{value:"GPU Node Management",id:"gpu-node-management",level:3},{value:"Node Removal &amp; Cleanup",id:"node-removal--cleanup",level:3},{value:"Service Discovery Integration",id:"service-discovery-integration",level:2},{value:"Proxy Svc Integration",id:"proxy-svc-integration",level:3},{value:"Deploy Svc Integration",id:"deploy-svc-integration",level:3},{value:"Real-World Usage Examples",id:"real-world-usage-examples",level:2},{value:"1. Microservices E-Commerce Platform",id:"1-microservices-e-commerce-platform",level:3},{value:"2. Multi-Environment Service Management",id:"2-multi-environment-service-management",level:3},{value:"3. AI/ML Service Discovery",id:"3-aiml-service-discovery",level:3},{value:"4. Service Health Monitoring",id:"4-service-health-monitoring",level:3},{value:"5. Distributed Application Discovery",id:"5-distributed-application-discovery",level:3},{value:"6. Service Auto-Discovery Script",id:"6-service-auto-discovery-script",level:3},{value:"Advanced Service Discovery Patterns",id:"advanced-service-discovery-patterns",level:2},{value:"Circuit Breaker Integration",id:"circuit-breaker-integration",level:3},{value:"Service Versioning",id:"service-versioning",level:3},{value:"Blue-Green Deployment Discovery",id:"blue-green-deployment-discovery",level:3},{value:"Monitoring &amp; Observability",id:"monitoring--observability",level:2},{value:"Registry Health Dashboard",id:"registry-health-dashboard",level:3},{value:"Automated Instance Cleanup",id:"automated-instance-cleanup",level:3},{value:"Service Dependency Mapping",id:"service-dependency-mapping",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"<strong>Service Not Discoverable</strong>",id:"service-not-discoverable",level:4},{value:"<strong>Instances Showing as Unhealthy</strong>",id:"instances-showing-as-unhealthy",level:4},{value:"<strong>Node Communication Issues</strong>",id:"node-communication-issues",level:4},{value:"<strong>Definition Deployment Issues</strong>",id:"definition-deployment-issues",level:4},{value:"API Reference Summary",id:"api-reference-summary",level:2},{value:"Permissions &amp; Security",id:"permissions--security",level:2},{value:"Related Services",id:"related-services",level:2},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Production Best Practices",id:"production-best-practices",level:2},{value:"Multi-Node Setup",id:"multi-node-setup",level:3},{value:"Health Monitoring",id:"health-monitoring",level:3},{value:"Service Mesh Observability",id:"service-mesh-observability",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"registry-svc",children:"Registry Svc"})}),"\n",(0,t.jsx)(n.p,{children:"The Registry Svc is a comprehensive service discovery and registry system that manages service definitions, running instances, and distributed nodes in a microservices architecture."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This page provides a comprehensive overview of ",(0,t.jsx)(n.code,{children:"Registry Svc"}),". For detailed API information, refer to the ",(0,t.jsx)(n.a,{href:"/docs/1backend-api/register-instance",children:"Registry Svc API documentation"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"architecture--purpose",children:"Architecture & Purpose"}),"\n",(0,t.jsxs)(n.p,{children:["Registry Svc serves as the ",(0,t.jsx)(n.strong,{children:"service discovery backbone"})," for 1Backend, providing:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Service Definitions"}),": Template specifications for deployable services (images, repositories, APIs)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Instance Management"}),": Registry of running service instances with health tracking"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Node Discovery"}),": Distributed node topology with resource monitoring"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Service Discovery"}),": Automatic routing and load balancing for microservices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Health Monitoring"}),": Real-time status tracking with heartbeat mechanisms"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"core-entities-relationship",children:"Core Entities Relationship"}),"\n",(0,t.jsx)(n.mermaid,{value:'graph TD\n    Definition["`**Definition**\n    Container Image/Repository\n    + API Specs + Clients`"]\n    \n    Deploy["`**Deployment**\n    (Deploy Svc)\n    Configuration + Scaling`"]\n    \n    Instance["`**Instance**\n    Running Service\n    + Health Status`"]\n    \n    Node["`**Node**\n    Physical/Virtual Machine\n    + Resources + GPUs`"]\n    \n    Proxy["`**Proxy Svc**\n    Load Balancing\n    + Service Routing`"]\n    \n    Definition --\x3e Deploy\n    Deploy --\x3e Instance\n    Instance --\x3e Node\n    Instance --\x3e Proxy\n    \n    subgraph "Registry Svc Manages"\n        Definition\n        Instance  \n        Node\n    end'}),"\n",(0,t.jsx)(n.h2,{id:"cli-usage",children:"CLI Usage"}),"\n",(0,t.jsx)(n.h3,{id:"instance-management",children:"Instance Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# List all service instances\noo instances list\noo instances ls\noo i ls\n\n# Remove a service instance\noo instances remove inst_12345\noo instances rm inst_12345\noo i rm inst_12345\n"})}),"\n",(0,t.jsx)(n.h3,{id:"definition-management",children:"Definition Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# List all service definitions\noo definitions list\noo definitions ls\noo def ls\n\n# Save a definition from YAML file\noo definitions save my-service-def.yaml\noo def save my-service-def.yaml\n\n# Remove a definition\noo definitions remove test-service-a\noo def rm test-service-a\n"})}),"\n",(0,t.jsx)(n.h3,{id:"node-management",children:"Node Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# List all nodes in the cluster\noo nodes list\noo nodes ls\noo n ls\n\n# Remove a node from the cluster\noo nodes remove http://node2.example.com:11337\noo n rm http://node2.example.com:11337\n"})}),"\n",(0,t.jsx)(n.h3,{id:"http-api-usage",children:"HTTP API Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# List instances with filtering\noo get /registry-svc/instances\noo get /registry-svc/instances?slug=user-svc\noo get /registry-svc/instances?host=api-server-1\n\n# Register a new service instance\noo put /registry-svc/instance \\\n  --url="http://user-service:8080" \\\n  --slug="user-svc"\n\n# List service definitions\noo get /registry-svc/definitions\n\n# Save a service definition\noo put /registry-svc/definition \\\n  --definition=\'{"id": "my-svc", "image": {"name": "nginx:latest", "internalPorts": [80]}}\'\n\n# List nodes\noo post /registry-svc/nodes\n\n# Get current node information\noo get /registry-svc/node/self\n'})}),"\n",(0,t.jsx)(n.h2,{id:"service-definitions",children:"Service Definitions"}),"\n",(0,t.jsx)(n.h3,{id:"container-based-definitions",children:"Container-Based Definitions"}),"\n",(0,t.jsx)(n.p,{children:"Service definitions specify how services can be deployed and what they provide."}),"\n",(0,t.jsx)(n.h4,{id:"simple-container-definition",children:"Simple Container Definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# nginx-service.yaml\nid: "nginx-svc"\nimage:\n  name: "nginx:alpine"\n  internalPorts: [80]\nports:\n  - internal: 80\n    host: 8080\nenvars:\n  - key: "NGINX_HOST"\n    value: "localhost"\n  - key: "NGINX_PORT"\n    value: "80"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"advanced-container-definition",children:"Advanced Container Definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# api-service.yaml  \nid: "api-svc"\nimage:\n  name: "mycompany/api-server:v1.2.0"\n  internalPorts: [8080, 9090]\nports:\n  - internal: 8080\n    host: 8080\n  - internal: 9090  \n    host: 9090\nenvars:\n  - key: "DATABASE_URL"\n    value: "postgresql://localhost:5432/mydb"\n  - key: "REDIS_URL"\n    value: "redis://localhost:6379"\n  - key: "LOG_LEVEL"\n    value: "info"\napiSpecs:\n  - url: "http://api-server:8080/openapi.json"\n    protocolType: "OpenAPI"\n    version: "3.0.0"\n    metadata:\n      title: "My API Service"\n      description: "REST API for my application"\nclients:\n  - language: "javascript"\n    url: "https://npmjs.com/package/my-api-client"\n  - language: "go"\n    url: "https://github.com/mycompany/api-client-go"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"repository-based-definitions",children:"Repository-Based Definitions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# source-based-service.yaml\nid: "custom-app"\nrepository:\n  url: "https://github.com/mycompany/custom-service.git"\n  version: "v2.1.0"\n  buildContext: "backend"\n  containerFile: "docker/Dockerfile.prod"\n  internalPorts: [3000]\nenvars:\n  - key: "NODE_ENV"\n    value: "production"\n  - key: "PORT"\n    value: "3000"\napiSpecs:\n  - url: "/api/openapi.yaml"\n    protocolType: "OpenAPI"\n    version: "3.0.0"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"definition-management-commands",children:"Definition Management Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Save definitions\noo definitions save nginx-service.yaml\noo definitions save api-service.yaml\noo definitions save custom-app.yaml\n\n# List all definitions\noo definitions list\n\n# Remove a definition\noo definitions remove nginx-svc\n"})}),"\n",(0,t.jsx)(n.h2,{id:"service-instance-registration",children:"Service Instance Registration"}),"\n",(0,t.jsx)(n.h3,{id:"manual-instance-registration",children:"Manual Instance Registration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Register a self-hosted service\noo put /registry-svc/instance \\\n  --url="http://user-service:8080"\n\n# Register with custom ID and deployment reference\noo put /registry-svc/instance \\\n  --id="inst_custom_123" \\\n  --url="http://api-service:8080" \\\n  --deploymentId="depl_abc123"\n\n# Register using individual components\noo put /registry-svc/instance \\\n  --scheme="https" \\\n  --host="api.example.com" \\\n  --port=443 \\\n  --path="/v1"\n\n# Register by IP address\noo put /registry-svc/instance \\\n  --scheme="http" \\\n  --ip="192.168.1.100" \\\n  --port=8080\n'})}),"\n",(0,t.jsx)(n.h3,{id:"service-instance-discovery",children:"Service Instance Discovery"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Find instances by service slug\noo get /registry-svc/instances?slug=user-svc\n\n# Find instances by host\noo get /registry-svc/instances?host=api-server-1\n\n# Find instances by deployment\noo get /registry-svc/instances?deploymentId=depl_abc123\n\n# Find instances by node\noo get /registry-svc/instances?nodeUrl=http://node1.cluster.local:11337\n\n# List all healthy instances\ncurl -H "Authorization: Bearer $TOKEN" \\\n  "http://localhost:11337/registry-svc/instances" | \\\n  jq \'.instances[] | select(.status == "Healthy")\'\n'})}),"\n",(0,t.jsx)(n.h3,{id:"instance-status-management",children:"Instance Status Management"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Instance Status Values:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Unknown"}),": Initial state, health not yet determined"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Healthy"}),": Service is responding and operational"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Unhealthy"}),": Service is not responding or failing health checks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Starting"}),": Service is in the process of starting up"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Stopping"}),": Service is shutting down"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Monitor instance health\nmonitor_instances() {\n  while true; do\n    echo "=== Instance Health Status $(date) ==="\n    \n    oo get /registry-svc/instances | jq -r \'.instances[] | "\\(.slug // "N/A") \\(.url) \\(.status)"\' | \\\n    while read -r slug url status; do\n      case $status in\n        "Healthy")   echo "\u2705 $slug ($url)" ;;\n        "Unhealthy") echo "\u274c $slug ($url)" ;;\n        "Starting")  echo "\ud83d\udd04 $slug ($url)" ;;\n        "Stopping")  echo "\u23f9\ufe0f  $slug ($url)" ;;\n        *)           echo "\u2753 $slug ($url) - $status" ;;\n      esac\n    done\n    \n    echo "---"\n    sleep 10\n  done\n}\n\nmonitor_instances\n'})}),"\n",(0,t.jsx)(n.h2,{id:"node-management--cluster-topology",children:"Node Management & Cluster Topology"}),"\n",(0,t.jsx)(n.h3,{id:"node-registration--heartbeat",children:"Node Registration & Heartbeat"}),"\n",(0,t.jsx)(n.p,{children:"Nodes automatically register themselves and send periodic heartbeats with resource information."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# View current node information\noo get /registry-svc/node/self\n\n# List all nodes in cluster\noo nodes list\n\n# Sample node output:\nNODE ID              URL                                  LAST HEARTBEAT\nprod-node-1         http://api-server-1:11337            8s ago\nprod-node-2         http://api-server-2:11337            12s ago\ngpu-node-1          http://gpu-server-1:11337            5s ago\n"})}),"\n",(0,t.jsx)(n.h3,{id:"node-configuration",children:"Node Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Proper node configuration is critical for distributed deployments:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Well-configured node environment variables\nexport OB_SELF_URL="http://api-server-1.internal:11337"\nexport OB_NODE_ID="prod-node-1"\nexport OB_REGION="us-east-1"\nexport OB_AVAILABILITY_ZONE="us-east-1a"\n\n# Poorly configured (will cause issues)\nexport OB_SELF_URL="http://127.0.0.1:11337"  # Not accessible from other nodes\n# Missing OB_NODE_ID (auto-generated IDs are error-prone)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"node-resource-monitoring",children:"Node Resource Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Get detailed node information with resource usage\nget_node_resources() {\n  oo get /registry-svc/node/self | jq '{\n    id: .node.id,\n    url: .node.url,\n    region: .node.region,\n    availabilityZone: .node.availabilityZone,\n    cpu: .node.usage.cpu,\n    memory: .node.usage.memory,\n    disk: .node.usage.disk,\n    gpus: .node.gpus | length\n  }'\n}\n\nget_node_resources\n\n# Monitor cluster resources\nmonitor_cluster_resources() {\n  echo \"=== Cluster Resource Usage ===\"\n  \n  oo post /registry-svc/nodes | jq -r '.nodes[] | \n    \"\\(.id) CPU:\\(.usage.cpu.percent)% MEM:\\(.usage.memory.percent)% DISK:\\(.usage.disk.percent)% GPUs:\\(.gpus | length)\"'\n}\n\nmonitor_cluster_resources\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gpu-node-management",children:"GPU Node Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# List nodes with GPU capabilities\noo post /registry-svc/nodes | jq '.nodes[] | select(.gpus | length > 0) | {\n  id: .id,\n  url: .url,\n  gpuCount: (.gpus | length),\n  gpus: [.gpus[] | {name: .name, memory: .memoryTotal, utilization: .gpuUtilization}]\n}'\n\n# Find available GPU resources\nfind_available_gpus() {\n  oo post /registry-svc/nodes | jq -r '.nodes[] | \n    select(.gpus | length > 0) | \n    .gpus[] | \n    select(.gpuUtilization < 50) | \n    \"\\(.name) (\\(.memoryUsage)MB/\\(.memoryTotal)MB used)\"'\n}\n\nfind_available_gpus\n"})}),"\n",(0,t.jsx)(n.h3,{id:"node-removal--cleanup",children:"Node Removal & Cleanup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Remove a node from the cluster\noo nodes remove http://api-server-2:11337\n\n# Clean up instances from removed nodes\ncleanup_dead_instances() {\n  local dead_node_url=$1\n  \n  echo "Cleaning up instances from dead node: $dead_node_url"\n  \n  # Find instances on the dead node\n  dead_instances=$(oo get /registry-svc/instances | \\\n    jq -r ".instances[] | select(.nodeUrl == \\"$dead_node_url\\") | .id")\n  \n  # Remove each instance\n  for instance_id in $dead_instances; do\n    echo "Removing instance: $instance_id"\n    oo instances remove "$instance_id"\n  done\n}\n\ncleanup_dead_instances "http://api-server-2:11337"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"service-discovery-integration",children:"Service Discovery Integration"}),"\n",(0,t.jsx)(n.h3,{id:"proxy-svc-integration",children:"Proxy Svc Integration"}),"\n",(0,t.jsxs)(n.p,{children:["Registry Svc works seamlessly with ",(0,t.jsx)(n.a,{href:"/docs/built-in-services/proxy-svc",children:"Proxy Svc"})," for automatic service routing:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Register a service for proxy routing\noo put /registry-svc/instance \\\n  --url="http://user-service:8080"\n\n# Proxy Svc automatically discovers and routes to this instance\ncurl http://localhost:11337/user-svc/health\n# Routes to: http://user-service:8080/user-svc/health\n\n# Load balancing with multiple instances\noo put /registry-svc/instance --url="http://user-service-1:8080"\noo put /registry-svc/instance --url="http://user-service-2:8080"\noo put /registry-svc/instance --url="http://user-service-3:8080"\n\n# Requests automatically load balanced across all instances\ncurl http://localhost:11337/user-svc/api/users\n'})}),"\n",(0,t.jsx)(n.h3,{id:"deploy-svc-integration",children:"Deploy Svc Integration"}),"\n",(0,t.jsxs)(n.p,{children:["Registry Svc is tightly integrated with ",(0,t.jsx)(n.a,{href:"/docs/built-in-services/deploy-svc",children:"Deploy Svc"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Deploy Svc uses definitions to create instances\noo definitions save user-service-def.yaml\noo deployments save user-service-deployment.yaml\n\n# Deploy Svc automatically:\n# 1. Reads the definition\n# 2. Creates container instances\n# 3. Registers instances in Registry Svc\n# 4. Proxy Svc discovers instances for routing\n"})}),"\n",(0,t.jsx)(n.h2,{id:"real-world-usage-examples",children:"Real-World Usage Examples"}),"\n",(0,t.jsx)(n.h3,{id:"1-microservices-e-commerce-platform",children:"1. Microservices E-Commerce Platform"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# user-service-def.yaml\nid: "user-svc"\nimage:\n  name: "mycompany/user-service:v2.1.0"\n  internalPorts: [8080]\nenvars:\n  - key: "DATABASE_URL"\n    value: "postgresql://postgres:5432/users"\n  - key: "REDIS_URL"\n    value: "redis://redis:6379"\napiSpecs:\n  - url: "/openapi.json"\n    protocolType: "OpenAPI"\n    version: "3.0.0"\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# product-service-def.yaml\nid: "product-svc"\nimage:\n  name: "mycompany/product-service:v1.8.2"\n  internalPorts: [8080]\nenvars:\n  - key: "DATABASE_URL"\n    value: "postgresql://postgres:5432/products"\n  - key: "ELASTICSEARCH_URL"\n    value: "http://elasticsearch:9200"\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# order-service-def.yaml\nid: "order-svc"\nimage:\n  name: "mycompany/order-service:v3.0.1"\n  internalPorts: [8080]\nenvars:\n  - key: "DATABASE_URL"\n    value: "postgresql://postgres:5432/orders"\n  - key: "PAYMENT_SERVICE_URL"\n    value: "http://payment-svc:8080"\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Deploy the microservices\noo definitions save user-service-def.yaml\noo definitions save product-service-def.yaml\noo definitions save order-service-def.yaml\n\n# Create deployments (handled by Deploy Svc)\n# Instances automatically registered and discoverable via:\n# http://localhost:11337/user-svc/*\n# http://localhost:11337/product-svc/*\n# http://localhost:11337/order-svc/*\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-multi-environment-service-management",children:"2. Multi-Environment Service Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Development environment\nsetup_dev_services() {\n  # Register local development services\n  oo put /registry-svc/instance \\\n    --url="http://localhost:3001" \\\n    --tags=\'["dev", "user-service"]\'\n  \n  oo put /registry-svc/instance \\\n    --url="http://localhost:3002" \\\n    --tags=\'["dev", "product-service"]\'\n  \n  oo put /registry-svc/instance \\\n    --url="http://localhost:3003" \\\n    --tags=\'["dev", "order-service"]\'\n}\n\n# Staging environment  \nsetup_staging_services() {\n  oo put /registry-svc/instance \\\n    --url="http://staging-user-svc:8080" \\\n    --tags=\'["staging", "user-service"]\'\n  \n  oo put /registry-svc/instance \\\n    --url="http://staging-product-svc:8080" \\\n    --tags=\'["staging", "product-service"]\'\n  \n  oo put /registry-svc/instance \\\n    --url="http://staging-order-svc:8080" \\\n    --tags=\'["staging", "order-service"]\'\n}\n\n# Production environment (handled by Deploy Svc)\n# Instances automatically registered with production configuration\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-aiml-service-discovery",children:"3. AI/ML Service Discovery"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# model-inference-def.yaml\nid: "model-inference-svc"\nimage:\n  name: "mycompany/ml-inference:gpu-v1.0.0"\n  internalPorts: [8080]\nenvars:\n  - key: "MODEL_PATH"\n    value: "/models/sentiment-analysis-v2"\n  - key: "BATCH_SIZE"\n    value: "32"\n  - key: "CUDA_VISIBLE_DEVICES"\n    value: "0"\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Deploy to GPU nodes\noo definitions save model-inference-def.yaml\n\n# Query GPU-enabled instances\noo get /registry-svc/instances | jq '.instances[] | \n  select(.slug == \"model-inference-svc\") | \n  {id: .id, url: .url, nodeUrl: .nodeUrl}'\n\n# Find GPU availability for new deployments\noo post /registry-svc/nodes | jq '.nodes[] | \n  select(.gpus | length > 0) | \n  {id: .id, gpus: [.gpus[] | select(.gpuUtilization < 80)]}' \n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-service-health-monitoring",children:"4. Service Health Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Comprehensive health monitoring script\nmonitor_service_health() {\n  while true; do\n    echo "=== Service Health Report $(date) ==="\n    \n    # Get all instances\n    instances=$(oo get /registry-svc/instances)\n    \n    # Group by service slug\n    echo "$instances" | jq -r \'.instances[] | .slug // "unknown"\' | sort | uniq | \\\n    while read -r service; do\n      if [ "$service" != "unknown" ] && [ "$service" != "null" ]; then\n        echo "Service: $service"\n        \n        # Count instances by status\n        healthy=$(echo "$instances" | jq -r ".instances[] | select(.slug == \\"$service\\" and .status == \\"Healthy\\") | .id" | wc -l)\n        unhealthy=$(echo "$instances" | jq -r ".instances[] | select(.slug == \\"$service\\" and .status == \\"Unhealthy\\") | .id" | wc -l)\n        total=$(echo "$instances" | jq -r ".instances[] | select(.slug == \\"$service\\") | .id" | wc -l)\n        \n        echo "  Healthy: $healthy/$total"\n        \n        if [ "$unhealthy" -gt 0 ]; then\n          echo "  \u26a0\ufe0f  Unhealthy instances:"\n          echo "$instances" | jq -r ".instances[] | select(.slug == \\"$service\\" and .status == \\"Unhealthy\\") | \\"    - \\(.id) (\\(.url))\\""\n        fi\n        \n        # Test actual connectivity\n        test_url=$(echo "$instances" | jq -r ".instances[] | select(.slug == \\"$service\\" and .status == \\"Healthy\\") | .url" | head -1)\n        if [ "$test_url" != "null" ] && [ -n "$test_url" ]; then\n          if curl -fsSL --max-time 5 "$test_url/health" > /dev/null 2>&1; then\n            echo "  \u2705 Health check passed"\n          else\n            echo "  \u274c Health check failed"\n          fi\n        fi\n        \n        echo ""\n      fi\n    done\n    \n    sleep 30\n  done\n}\n\nmonitor_service_health\n'})}),"\n",(0,t.jsx)(n.h3,{id:"5-distributed-application-discovery",children:"5. Distributed Application Discovery"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Service mesh monitoring\nmonitor_service_mesh() {\n  echo "=== Service Mesh Topology ==="\n  \n  # Get all services and their instances\n  oo get /registry-svc/instances | jq -r \'\n    .instances[] | \n    select(.slug != null) | \n    "\\(.slug) \\(.url) \\(.status) \\(.nodeUrl // "unknown")"\' | \\\n  while read -r service url status node; do\n    node_short=$(echo "$node" | sed \'s|http://||\' | cut -d: -f1)\n    echo "$service -> $url [$status] on $node_short"\n  done\n  \n  echo ""\n  echo "=== Node Distribution ==="\n  \n  # Show service distribution across nodes\n  oo post /registry-svc/nodes | jq -r \'.nodes[] | .url\' | \\\n  while read -r node_url; do\n    node_short=$(echo "$node_url" | sed \'s|http://||\' | cut -d: -f1)\n    instance_count=$(oo get /registry-svc/instances | jq -r ".instances[] | select(.nodeUrl == \\"$node_url\\") | .slug" | wc -l)\n    echo "$node_short: $instance_count instances"\n  done\n}\n\nmonitor_service_mesh\n'})}),"\n",(0,t.jsx)(n.h3,{id:"6-service-auto-discovery-script",children:"6. Service Auto-Discovery Script"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Auto-discovery and registration for Docker Compose\nauto_register_docker_services() {\n  local compose_file=${1:-docker-compose.yml}\n  \n  echo "Auto-registering services from $compose_file"\n  \n  # Extract service names and ports from docker-compose.yml\n  docker-compose -f "$compose_file" config | yq eval \'.services | to_entries[] | \n    select(.value.ports != null) | \n    {name: .key, port: .value.ports[0] | split(":")[0]}\' -o json | \\\n  while read -r service_config; do\n    service_name=$(echo "$service_config" | jq -r \'.name\')\n    port=$(echo "$service_config" | jq -r \'.port\')\n    \n    echo "Registering service: $service_name on port $port"\n    \n    oo put /registry-svc/instance \\\n      --url="http://$service_name:$port" \\\n      --tags=\'["docker-compose", "auto-registered"]\' || \\\n      echo "Failed to register $service_name"\n  done\n}\n\n# Usage\nauto_register_docker_services "docker-compose.yml"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-service-discovery-patterns",children:"Advanced Service Discovery Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"circuit-breaker-integration",children:"Circuit Breaker Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Monitor instance health and implement circuit breaker logic\nimplement_circuit_breaker() {\n  local service_slug=$1\n  local failure_threshold=${2:-3}\n  local recovery_timeout=${3:-60}\n  \n  while true; do\n    instances=$(oo get /registry-svc/instances?slug="$service_slug")\n    \n    echo "$instances" | jq -r \'.instances[] | "\\(.id) \\(.url) \\(.status)"\' | \\\n    while read -r id url status; do\n      if [ "$status" = "Unhealthy" ]; then\n        # Test instance directly\n        if curl -fsSL --max-time 5 "$url/health" > /dev/null 2>&1; then\n          echo "Instance $id recovered, updating status"\n          # Instance recovered - would need API to update status\n        else\n          echo "Instance $id still failing"\n        fi\n      fi\n    done\n    \n    sleep 10\n  done\n}\n\nimplement_circuit_breaker "user-svc" 3 60\n'})}),"\n",(0,t.jsx)(n.h3,{id:"service-versioning",children:"Service Versioning"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# user-service-v1.yaml\nid: "user-svc-v1"\nimage:\n  name: "mycompany/user-service:v1.0.0"\n  internalPorts: [8080]\nenvars:\n  - key: "API_VERSION"\n    value: "v1"\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# user-service-v2.yaml\nid: "user-svc-v2"\nimage:\n  name: "mycompany/user-service:v2.0.0"\n  internalPorts: [8080]\nenvars:\n  - key: "API_VERSION"\n    value: "v2"\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Deploy multiple versions\noo definitions save user-service-v1.yaml\noo definitions save user-service-v2.yaml\n\n# Route traffic based on version\n# V1: http://localhost:11337/user-svc-v1/*\n# V2: http://localhost:11337/user-svc-v2/*\n"})}),"\n",(0,t.jsx)(n.h3,{id:"blue-green-deployment-discovery",children:"Blue-Green Deployment Discovery"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Blue-green deployment management\ndeploy_blue_green() {\n  local service_name=$1\n  local new_version=$2\n  \n  echo "Starting blue-green deployment for $service_name:$new_version"\n  \n  # Deploy green version\n  oo put /registry-svc/instance \\\n    --url="http://$service_name-green:8080" \\\n    --tags=\'["green", "staging"]\'\n  \n  # Test green version\n  if curl -f "http://$service_name-green:8080/health"; then\n    echo "Green version healthy, switching traffic"\n    \n    # Remove blue instances\n    blue_instances=$(oo get /registry-svc/instances | \\\n      jq -r ".instances[] | select(.tags[]? == \\"blue\\") | .id")\n    \n    for instance_id in $blue_instances; do\n      oo instances remove "$instance_id"\n    done\n    \n    # Promote green to blue\n    oo put /registry-svc/instance \\\n      --url="http://$service_name:8080" \\\n      --tags=\'["blue", "production"]\'\n    \n    echo "Blue-green deployment completed"\n  else\n    echo "Green version unhealthy, aborting deployment"\n    return 1\n  fi\n}\n\ndeploy_blue_green "user-service" "v2.1.0"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring--observability",children:"Monitoring & Observability"}),"\n",(0,t.jsx)(n.h3,{id:"registry-health-dashboard",children:"Registry Health Dashboard"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Registry service health dashboard\nregistry_dashboard() {\n  while true; do\n    clear\n    echo "\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557"\n    echo "\u2551                    Registry Svc Dashboard                    \u2551"\n    echo "\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d"\n    echo ""\n    \n    # Cluster overview\n    echo "\ud83d\udcca Cluster Overview:"\n    node_count=$(oo post /registry-svc/nodes | jq \'.nodes | length\')\n    instance_count=$(oo get /registry-svc/instances | jq \'.instances | length\')\n    definition_count=$(oo get /registry-svc/definitions | jq \'.definitions | length\')\n    \n    echo "  Nodes: $node_count"\n    echo "  Instances: $instance_count"  \n    echo "  Definitions: $definition_count"\n    echo ""\n    \n    # Instance health summary\n    echo "\ud83c\udfe5 Instance Health:"\n    instances=$(oo get /registry-svc/instances)\n    healthy=$(echo "$instances" | jq \'[.instances[] | select(.status == "Healthy")] | length\')\n    unhealthy=$(echo "$instances" | jq \'[.instances[] | select(.status == "Unhealthy")] | length\')\n    unknown=$(echo "$instances" | jq \'[.instances[] | select(.status == "Unknown")] | length\')\n    \n    echo "  \u2705 Healthy: $healthy"\n    echo "  \u274c Unhealthy: $unhealthy"\n    echo "  \u2753 Unknown: $unknown"\n    echo ""\n    \n    # Service distribution\n    echo "\ud83d\udd00 Service Distribution:"\n    echo "$instances" | jq -r \'.instances[] | .slug // "unknown"\' | sort | uniq -c | \\\n    while read -r count service; do\n      echo "  $service: $count instances"\n    done\n    echo ""\n    \n    # Node resource usage\n    echo "\ud83d\udcbe Node Resources:"\n    oo post /registry-svc/nodes | jq -r \'.nodes[] | \n      "\\(.id): CPU \\(.usage.cpu.percent // 0)% | Memory \\(.usage.memory.percent // 0)% | GPUs \\(.gpus | length)"\'\n    \n    echo ""\n    echo "Last updated: $(date)"\n    echo "Press Ctrl+C to exit"\n    \n    sleep 5\n  done\n}\n\nregistry_dashboard\n'})}),"\n",(0,t.jsx)(n.h3,{id:"automated-instance-cleanup",children:"Automated Instance Cleanup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Clean up dead instances\ncleanup_dead_instances() {\n  echo "\ud83e\uddf9 Cleaning up dead instances..."\n  \n  instances=$(oo get /registry-svc/instances)\n  \n  echo "$instances" | jq -r \'.instances[] | "\\(.id) \\(.url) \\(.status)"\' | \\\n  while read -r id url status; do\n    if [ "$status" = "Unhealthy" ]; then\n      # Test if instance is truly dead\n      if ! curl -fsSL --max-time 5 "$url/health" > /dev/null 2>&1; then\n        echo "Removing dead instance: $id ($url)"\n        oo instances remove "$id"\n      else\n        echo "Instance $id recovered: $url"\n      fi\n    fi\n  done\n}\n\n# Run cleanup every 5 minutes\nwhile true; do\n  cleanup_dead_instances\n  sleep 300\ndone\n'})}),"\n",(0,t.jsx)(n.h3,{id:"service-dependency-mapping",children:"Service Dependency Mapping"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Map service dependencies\nmap_service_dependencies() {\n  echo "\ud83d\uddfa\ufe0f  Service Dependency Map:"\n  \n  # Get all service instances\n  instances=$(oo get /registry-svc/instances)\n  \n  echo "$instances" | jq -r \'.instances[] | select(.slug != null) | .slug\' | sort | uniq | \\\n  while read -r service; do\n    echo ""\n    echo "Service: $service"\n    \n    # Find instances\n    service_instances=$(echo "$instances" | jq -r ".instances[] | select(.slug == \\"$service\\") | .url")\n    \n    echo "  Instances:"\n    echo "$service_instances" | while read -r url; do\n      echo "    - $url"\n    done\n    \n    # Test external dependencies (simplified - would need service-specific logic)\n    echo "  Dependencies:"\n    for dependency in "database" "redis" "elasticsearch"; do\n      if echo "$service_instances" | head -1 | xargs -I {} curl -fsSL --max-time 3 {}/dependencies 2>/dev/null | grep -q "$dependency"; then\n        echo "    - $dependency \u2705"\n      fi\n    done\n  done\n}\n\nmap_service_dependencies\n'})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsx)(n.h4,{id:"service-not-discoverable",children:(0,t.jsx)(n.strong,{children:"Service Not Discoverable"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check if service is registered\noo get /registry-svc/instances?slug=your-service\n\n# Verify instance status\noo get /registry-svc/instances | jq '.instances[] | select(.slug == \"your-service\")'\n\n# Test direct connectivity\ncurl -v http://your-service:8080/health\n\n# Check proxy routing\ncurl -v http://localhost:11337/your-service/health\n"})}),"\n",(0,t.jsx)(n.h4,{id:"instances-showing-as-unhealthy",children:(0,t.jsx)(n.strong,{children:"Instances Showing as Unhealthy"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Check instance endpoint directly\ntest_instance_health() {\n  local instance_url=$1\n  \n  echo "Testing: $instance_url"\n  \n  # Basic connectivity\n  if curl -fsSL --max-time 5 "$instance_url" > /dev/null; then\n    echo "\u2705 Instance responds"\n  else\n    echo "\u274c Instance not responding"\n  fi\n  \n  # Health endpoint\n  if curl -fsSL --max-time 5 "$instance_url/health" > /dev/null; then\n    echo "\u2705 Health endpoint OK"\n  else\n    echo "\u274c Health endpoint failed"\n  fi\n  \n  # Network connectivity\n  host=$(echo "$instance_url" | sed \'s|http://||\' | cut -d: -f1)\n  port=$(echo "$instance_url" | sed \'s|http://||\' | cut -d: -f2)\n  \n  if nc -zv "$host" "$port" 2>/dev/null; then\n    echo "\u2705 Network connectivity OK"\n  else\n    echo "\u274c Network connectivity failed"\n  fi\n}\n\ntest_instance_health "http://user-service:8080"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"node-communication-issues",children:(0,t.jsx)(n.strong,{children:"Node Communication Issues"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Test node connectivity\ntest_node_connectivity() {\n  local node_url=$1\n  \n  echo "Testing node: $node_url"\n  \n  # Basic HTTP connectivity\n  if curl -fsSL --max-time 5 "$node_url/health" > /dev/null; then\n    echo "\u2705 Node responds"\n  else\n    echo "\u274c Node not responding"\n  fi\n  \n  # Registry API access\n  if curl -fsSL --max-time 5 "$node_url/registry-svc/node/self" > /dev/null; then\n    echo "\u2705 Registry API accessible"\n  else\n    echo "\u274c Registry API failed"\n  fi\n}\n\n# Test all nodes\noo post /registry-svc/nodes | jq -r \'.nodes[].url\' | \\\nwhile read -r node_url; do\n  test_node_connectivity "$node_url"\ndone\n'})}),"\n",(0,t.jsx)(n.h4,{id:"definition-deployment-issues",children:(0,t.jsx)(n.strong,{children:"Definition Deployment Issues"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Validate definition format\nvalidate_definition() {\n  local definition_file=$1\n  \n  echo "Validating: $definition_file"\n  \n  # Check YAML syntax\n  if yq eval \'.\' "$definition_file" > /dev/null; then\n    echo "\u2705 YAML syntax valid"\n  else\n    echo "\u274c YAML syntax error"\n    return 1\n  fi\n  \n  # Check required fields\n  if yq eval \'.id\' "$definition_file" | grep -v null > /dev/null; then\n    echo "\u2705 ID field present"\n  else\n    echo "\u274c Missing required \'id\' field"\n  fi\n  \n  # Check image or repository\n  if yq eval \'.image.name\' "$definition_file" | grep -v null > /dev/null; then\n    echo "\u2705 Image specification found"\n  elif yq eval \'.repository.url\' "$definition_file" | grep -v null > /dev/null; then\n    echo "\u2705 Repository specification found"\n  else\n    echo "\u274c Missing image or repository specification"\n  fi\n}\n\nvalidate_definition "my-service-def.yaml"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"api-reference-summary",children:"API Reference Summary"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Endpoint"}),(0,t.jsx)(n.th,{children:"Method"}),(0,t.jsx)(n.th,{children:"Purpose"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/registry-svc/instances"})}),(0,t.jsx)(n.td,{children:"GET"}),(0,t.jsx)(n.td,{children:"List service instances with filtering"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/registry-svc/instance"})}),(0,t.jsx)(n.td,{children:"PUT"}),(0,t.jsx)(n.td,{children:"Register a new service instance"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/registry-svc/instance/{id}"})}),(0,t.jsx)(n.td,{children:"DELETE"}),(0,t.jsx)(n.td,{children:"Remove a service instance"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/registry-svc/definitions"})}),(0,t.jsx)(n.td,{children:"GET"}),(0,t.jsx)(n.td,{children:"List service definitions"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/registry-svc/definition"})}),(0,t.jsx)(n.td,{children:"PUT"}),(0,t.jsx)(n.td,{children:"Save a service definition"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/registry-svc/definition/{id}"})}),(0,t.jsx)(n.td,{children:"DELETE"}),(0,t.jsx)(n.td,{children:"Remove a service definition"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/registry-svc/nodes"})}),(0,t.jsx)(n.td,{children:"POST"}),(0,t.jsx)(n.td,{children:"List cluster nodes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/registry-svc/node/self"})}),(0,t.jsx)(n.td,{children:"GET"}),(0,t.jsx)(n.td,{children:"Get current node information"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/registry-svc/node/{url}"})}),(0,t.jsx)(n.td,{children:"DELETE"}),(0,t.jsx)(n.td,{children:"Remove a node from cluster"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"permissions--security",children:"Permissions & Security"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Required permissions\nregistry-svc:instance:view     # List and view service instances\nregistry-svc:instance:edit     # Register service instances\nregistry-svc:instance:delete   # Remove service instances\nregistry-svc:definition:view   # List and view service definitions\nregistry-svc:definition:edit   # Save service definitions\nregistry-svc:definition:delete # Remove service definitions\nregistry-svc:node:view         # List and view cluster nodes\nregistry-svc:node:delete       # Remove nodes from cluster\n\n# Service isolation\n# Services can only see their own instances unless they have admin privileges\n# or are specifically permitted services (deploy-svc, proxy-svc)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"related-services",children:"Related Services"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/docs/built-in-services/deploy-svc",children:"Deploy Svc"})}),": Uses definitions to create and manage instances"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/docs/built-in-services/proxy-svc",children:"Proxy Svc"})}),": Discovers instances for load balancing and routing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/docs/built-in-services/container-svc",children:"Container Svc"})}),": Manages container instances on individual nodes"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Node configuration (critical for distributed deployments)\nOB_SELF_URL="http://api-server-1.internal:11337"  # Node\'s accessible URL\nOB_NODE_ID="prod-node-1"                          # Unique node identifier\nOB_REGION="us-east-1"                            # Geographic region\nOB_AVAILABILITY_ZONE="us-east-1a"                # Availability zone\n\n# Poor configuration examples (avoid these)\nOB_SELF_URL="http://127.0.0.1:11337"     # Not accessible from other nodes\n# Missing OB_NODE_ID                      # Auto-generated IDs cause issues\n'})}),"\n",(0,t.jsx)(n.h2,{id:"production-best-practices",children:"Production Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"multi-node-setup",children:"Multi-Node Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Node 1 configuration\nexport OB_SELF_URL="http://node1.cluster.local:11337"\nexport OB_NODE_ID="node-1"\nexport OB_REGION="us-east-1"\nexport OB_AVAILABILITY_ZONE="us-east-1a"\n\n# Node 2 configuration  \nexport OB_SELF_URL="http://node2.cluster.local:11337"\nexport OB_NODE_ID="node-2"\nexport OB_REGION="us-east-1"\nexport OB_AVAILABILITY_ZONE="us-east-1b"\n\n# GPU node configuration\nexport OB_SELF_URL="http://gpu-node1.cluster.local:11337"\nexport OB_NODE_ID="gpu-node-1"\nexport OB_REGION="us-east-1"\nexport OB_AVAILABILITY_ZONE="us-east-1c"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"health-monitoring",children:"Health Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Comprehensive health monitoring\nsetup_health_monitoring() {\n  # Monitor instance health\n  ( monitor_instances ) &\n  \n  # Monitor node health  \n  ( monitor_cluster_resources ) &\n  \n  # Clean up dead instances\n  ( cleanup_dead_instances ) &\n  \n  # Registry dashboard\n  registry_dashboard\n}\n\nsetup_health_monitoring\n"})}),"\n",(0,t.jsx)(n.h3,{id:"service-mesh-observability",children:"Service Mesh Observability"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Service mesh monitoring setup\nsetup_observability() {\n  # Export metrics to monitoring system\n  monitor_service_metrics() {\n    while true; do\n      # Instance metrics\n      oo get /registry-svc/instances | jq '{\n        total_instances: (.instances | length),\n        healthy_instances: ([.instances[] | select(.status == \"Healthy\")] | length),\n        unhealthy_instances: ([.instances[] | select(.status == \"Unhealthy\")] | length),\n        services: ([.instances[].slug | select(. != null)] | unique | length)\n      }' > /var/metrics/registry-instances.json\n      \n      # Node metrics\n      oo post /registry-svc/nodes | jq '{\n        total_nodes: (.nodes | length),\n        total_gpus: ([.nodes[].gpus[]] | length),\n        avg_cpu_usage: ([.nodes[].usage.cpu.percent // 0] | add / length),\n        avg_memory_usage: ([.nodes[].usage.memory.percent // 0] | add / length)\n      }' > /var/metrics/registry-nodes.json\n      \n      sleep 60\n    done\n  }\n  \n  monitor_service_metrics &\n}\n\nsetup_observability\n"})}),"\n",(0,t.jsx)(n.p,{children:"Registry Svc provides the foundation for distributed service architecture in 1Backend, enabling automatic service discovery, load balancing, and health monitoring across multi-node clusters with comprehensive GPU and resource management capabilities."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);