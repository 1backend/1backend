"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[6437],{46284:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>T,frontMatter:()=>u,metadata:()=>r,toc:()=>f});const r=JSON.parse('{"id":"1backend/list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","source":"@site/docs/1backend/list-prompts.api.mdx","sourceDirName":"1backend","slug":"/1backend/list-prompts","permalink":"/docs/1backend/list-prompts","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"list-prompts","title":"List Prompts","description":"List prompts that satisfy a query.","sidebar_label":"List Prompts","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/1backend/1-backend","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Prompt an AI","permalink":"/docs/1backend/prompt"},"next":{"title":"Subscribe to Prompt Responses by Thread","permalink":"/docs/1backend/subscribe-to-prompt-responses"}}');var s=i(74848),o=i(28453),n=i(53746),p=i.n(n),a=i(56518),d=i.n(a),m=i(99972),c=i.n(m),l=i(25342),y=i.n(l),g=(i(44215),i(82223),i(24861));const u={id:"list-prompts",title:"List Prompts",description:"List prompts that satisfy a query.",sidebar_label:"List Prompts",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/1backend/1-backend",custom_edit_url:null},h=void 0,b={},f=[];function v(e){const t={p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(g.default,{as:"h1",className:"openapi__heading",children:"List Prompts"}),"\n",(0,s.jsx)(p(),{method:"post",path:"/prompt-svc/prompts",context:"endpoint"}),"\n",(0,s.jsx)(t.p,{children:"List prompts that satisfy a query."}),"\n",(0,s.jsx)(g.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,s.jsx)(d(),{parameters:void 0}),"\n",(0,s.jsx)(c(),{title:"Body",body:{content:{"application/json":{schema:{properties:{query:{properties:{count:{description:"Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",type:"boolean"},filters:{description:"Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.",items:{properties:{fields:{items:{type:"string"},type:"array"},jsonValues:{description:"JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -> OpenAPI 2.0 -> OpenAPI Go generator toolchain.",type:"string"},op:{enum:["or","equals","containsSubstring","startsWith","intersects","isInList"],type:"string","x-enum-varnames":["OpOr","OpEquals","OpContainsSubstring","OpStartsWith","OpIntersects","OpIsInList"]},subFilters:{description:"SubFilters is used for operations like OR where multiple filters are combined.",items:"circular()",type:"array"}},type:"object"},type:"array"},jsonAfter:{description:"JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the `go -> openapi -> go` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., `[42]`.",type:"string"},limit:{description:"Limit the number of records in the result set.",type:"integer"},orderBys:{description:"OrderBys order the result set.",items:{properties:{desc:{description:"Desc indicates whether the sorting should be in descending order.",type:"boolean"},field:{description:"The field by which to order the results",type:"string"},randomize:{description:"Randomize indicates that the results should be randomized instead of ordered by the `field` and `desc` criteria",type:"boolean"},sortingType:{allOf:[{enum:["","numeric","text","date"],type:"string","x-enum-varnames":["SortingTypeDefault","SortingTypeNumeric","SortingTypeText","SortingTypeDate"]}],description:"Defines the type of sorting to apply (numeric, text, date, etc.)"}},type:"object"},type:"array"}},type:"object"}},type:"object"}}},description:"List Prompts Request"}}),"\n",(0,s.jsx)(y(),{id:void 0,label:void 0,responses:{200:{description:"OK",content:{"application/json":{schema:{properties:{after:{},count:{type:"integer"},prompts:{items:{properties:{createdAt:{description:"CreatedAt is the time of the prompt creation.",type:"string"},engineParameters:{allOf:[{properties:{llamaCppParameters:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"},stableDiffusion:{properties:{txt2Img:{allOf:[{properties:{alwayson_scripts:{additionalProperties:{type:"string"},type:"object"},batch_size:{type:"integer"},cfg_scale:{type:"number"},comments:{additionalProperties:{type:"string"},type:"object"},denoising_strength:{type:"number"},disable_extra_networks:{type:"boolean"},do_not_save_grid:{type:"boolean"},do_not_save_samples:{type:"boolean"},enable_hr:{type:"boolean"},eta:{type:"number"},firstpass_image:{type:"string"},firstphase_height:{type:"integer"},firstphase_width:{type:"integer"},force_task_id:{type:"string"},height:{type:"integer"},hr_checkpoint_name:{type:"string"},hr_negative_prompt:{type:"string"},hr_prompt:{type:"string"},hr_resize_x:{type:"integer"},hr_resize_y:{type:"integer"},hr_sampler_name:{type:"string"},hr_scale:{type:"number"},hr_scheduler:{type:"string"},hr_second_pass_steps:{type:"integer"},hr_upscaler:{type:"string"},infotext:{type:"string"},n_iter:{type:"integer"},negative_prompt:{type:"string"},override_settings:{additionalProperties:{type:"string"},type:"object"},override_settings_restore_afterwards:{type:"boolean"},prompt:{type:"string"},refiner_checkpoint:{type:"string"},refiner_switch_at:{type:"number"},restore_faces:{type:"boolean"},s_churn:{type:"number"},s_min_uncond:{type:"number"},s_noise:{type:"number"},s_tmax:{type:"number"},s_tmin:{type:"number"},sampler_index:{type:"string"},sampler_name:{type:"string"},save_images:{type:"boolean"},scheduler:{type:"string"},script_args:{items:{type:"string"},type:"array"},script_name:{type:"string"},seed:{type:"integer"},seed_resize_from_h:{type:"integer"},seed_resize_from_w:{type:"integer"},send_images:{type:"boolean"},steps:{type:"integer"},styles:{items:{type:"string"},type:"array"},subseed:{type:"integer"},subseed_strength:{type:"number"},tiling:{type:"boolean"},width:{type:"integer"}},type:"object"}],description:"Text to image parameters"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters"},error:{description:"Error that arose during prompt execution, if any.",type:"string"},id:{description:"Id is the unique ID of the prompt.",type:"string"},lastRun:{description:"LastRun is the time of the last prompt run.",type:"string"},maxRetries:{description:"MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",example:10,type:"integer"},modelId:{description:"ModelId is just the 1Backend internal ID of the model.",example:"huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf",type:"string"},parameters:{allOf:[{properties:{textToImage:{properties:{aspectRatio:{description:'Alternative way to specify dimensions (e.g., "16:9", "1:1").',type:"string"},batchSize:{description:"Number of images to generate per batch.",type:"integer"},denoisingStrength:{description:"Controls how much variation is introduced in image modifications.",type:"number"},enableUpscaling:{description:"Whether to apply AI-based upscaling.",type:"boolean"},format:{description:"Output format for the generated image (png, jpg, webp, etc.).",type:"string"},guidanceScale:{description:"How closely the output should follow the prompt.",type:"number"},height:{type:"integer"},negativePrompt:{description:"A negative prompt to specify what should be avoided in the image.",type:"string"},numIterations:{description:"Number of batches to generate.",type:"integer"},prompt:{description:"The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",type:"string"},qualityPreset:{description:"Preset quality settings (e.g., Low, Medium, High, Ultra).",type:"string"},restoreFaces:{description:"Whether to enhance facial details for portraits.",type:"boolean"},scheduler:{description:"Specifies the sampling method used during generation.",type:"string"},seed:{description:"Optional seed for reproducibility. If not set, a random seed is used.",type:"integer"},steps:{description:"Number of inference steps for image generation.",type:"integer"},styles:{description:"List of artistic styles or themes to apply.",items:{type:"string"},type:"array"},width:{description:"Image dimensions (width and height in pixels).",type:"integer"}},type:"object"},textToText:{properties:{template:{description:"Template of the prompt. Optional. If not present it's derived from ModelId.",example:"[INST]{prompt}[/INST]",type:"string"}},type:"object"}},type:"object"}],description:"AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides."},prompt:{description:"Prompt is the message itself eg. \"What's a banana?",example:"What's a banana?",type:"string"},requestMessageId:{type:"string"},responseMessageId:{type:"string"},runCount:{description:"RunCount is the number of times the prompt was retried due to errors",type:"integer"},status:{allOf:[{enum:["scheduled","running","completed","errored","abandoned","canceled"],type:"string","x-enum-varnames":["PromptStatusScheduled","PromptStatusRunning","PromptStatusCompleted","PromptStatusErrored","PromptStatusAbandoned","PromptStatusCanceled"]}],description:"Status of the prompt."},sync:{description:"Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",type:"boolean"},threadId:{description:"ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set `prompt.sync` to true for a blocking answer.",type:"string"},type:{allOf:[{enum:["Image-Text-to-Text","Visual Question Answering","Document Question Answering","Text-to-Image","Image-to-Image","Image-to-Video","Unconditional Image Generation","Text-to-Video","Zero-Shot Image Classification","Zero-Shot Object Detection","Text-to-3D","Image-to-3D","Image Feature Extraction","Keypoint Detection","Text-to-Text","Question Answering","Translation","Summarization","Text Generation","Fill-Mask","Text-to-Speech","Text-to-Audio","Automatic Speech Recognition","Audio-to-Audio","Audio Classification","Reinforcement Learning","Robotics","Graph Machine Learning"],type:"string","x-enum-varnames":["PromptTypeImageTextToText","PromptTypeVisualQuestionAnswering","PromptTypeDocumentQuestionAnswering","PromptTypeTextToImage","PromptTypeImageToImage","PromptTypeImageToVideo","PromptTypeUnconditionalImageGeneration","PromptTypeTextToVideo","PromptTypeZeroShotImageClassification","PromptTypeZeroShotObjectDetection","PromptTypeTextTo3D","PromptTypeImageTo3D","PromptTypeImageFeatureExtraction","PromptTypeKeypointDetection","PromptTypeTextToText","PromptTypeQuestionAnswering","PromptTypeTranslation","PromptTypeSummarization","PromptTypeTextGeneration","PromptTypeFillMask","PromptTypeTextToSpeech","PromptTypeTextToAudio","PromptTypeAutomaticSpeechRecognition","PromptTypeAudioToAudio","PromptTypeAudioClassification","PromptTypeReinforcementLearning","PromptTypeRobotics","PromptTypeGraphMachineLearning"]}],description:'Type is inferred from the `Parameters` or `EngineParameters` field.\nEg. A LLamaCpp prompt will be "Text-to-Text",\na Stabel Diffusion one will be "Text-to-Image" etc.'},updatedAt:{description:"UpdatedAt is the last time the prompt was updated.",type:"string"},userId:{description:"UserId contains the ID of the user who submitted the prompt.",type:"string"}},required:["prompt"],type:"object"},type:"array"}},type:"object"}}}},400:{description:"Invalid JSON",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},401:{description:"Unauthorized",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}},500:{description:"Internal Server Error",content:{"application/json":{schema:{properties:{error:{type:"string"}},type:"object"}}}}}})]})}function T(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(v,{...e})}):v(e)}}}]);