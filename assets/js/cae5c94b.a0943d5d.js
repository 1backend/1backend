"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[5591],{36913:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"built-in-services/policy-svc","title":"Policy Svc","description":"The Policy Svc is a comprehensive access control and rate limiting service that provides protection against abuse, ensures fair resource usage, and maintains service reliability through configurable policies.","source":"@site/docs/built-in-services/policy-svc.md","sourceDirName":"built-in-services","slug":"/built-in-services/policy-svc","permalink":"/docs/built-in-services/policy-svc","draft":false,"unlisted":false,"editUrl":"https://github.com/1backend/1backend/tree/main/docs-source/docs/built-in-services/policy-svc.md","tags":[{"inline":true,"label":"policy-svc","permalink":"/docs/tags/policy-svc"},{"inline":true,"label":"rate-limiting","permalink":"/docs/tags/rate-limiting"},{"inline":true,"label":"blocklist","permalink":"/docs/tags/blocklist"},{"inline":true,"label":"security","permalink":"/docs/tags/security"},{"inline":true,"label":"reliability","permalink":"/docs/tags/reliability"},{"inline":true,"label":"policies","permalink":"/docs/tags/policies"},{"inline":true,"label":"access-control","permalink":"/docs/tags/access-control"},{"inline":true,"label":"ddos-protection","permalink":"/docs/tags/ddos-protection"}],"version":"current","sidebarPosition":70,"frontMatter":{"sidebar_position":70,"tags":["policy-svc","rate-limiting","blocklist","security","reliability","policies","access-control","ddos-protection"]},"sidebar":"tutorialSidebar","previous":{"title":"File Svc","permalink":"/docs/built-in-services/file-svc"},"next":{"title":"Config Svc","permalink":"/docs/built-in-services/config-svc"}}');var s=i(74848),a=i(28453);const r={sidebar_position:70,tags:["policy-svc","rate-limiting","blocklist","security","reliability","policies","access-control","ddos-protection"]},c="Policy Svc",o={},l=[{value:"Architecture &amp; Purpose",id:"architecture--purpose",level:2},{value:"Key Features",id:"key-features",level:3},{value:"CLI Usage",id:"cli-usage",level:2},{value:"Creating Policy Instances",id:"creating-policy-instances",level:3},{value:"Checking Access Control",id:"checking-access-control",level:3},{value:"Policy Management",id:"policy-management",level:3},{value:"Policy Templates",id:"policy-templates",level:2},{value:"Rate Limit Template",id:"rate-limit-template",level:3},{value:"Blocklist Template",id:"blocklist-template",level:3},{value:"Service Integration Patterns",id:"service-integration-patterns",level:2},{value:"Explicit Policy Checking",id:"explicit-policy-checking",level:3},{value:"CLI-Based Integration",id:"cli-based-integration",level:3},{value:"Real-World Usage Examples",id:"real-world-usage-examples",level:2},{value:"1. User Registration Protection",id:"1-user-registration-protection",level:3},{value:"2. API Rate Limiting",id:"2-api-rate-limiting",level:3},{value:"3. DDoS Protection",id:"3-ddos-protection",level:3},{value:"4. Fair Resource Usage",id:"4-fair-resource-usage",level:3},{value:"5. Abuse Prevention",id:"5-abuse-prevention",level:3},{value:"6. Service-Specific Policies",id:"6-service-specific-policies",level:3},{value:"Policy Patterns &amp; Best Practices",id:"policy-patterns--best-practices",level:2},{value:"Layered Protection Strategy",id:"layered-protection-strategy",level:3},{value:"Time Window Strategies",id:"time-window-strategies",level:3},{value:"Monitoring &amp; Observability",id:"monitoring--observability",level:2},{value:"Policy Effectiveness Testing",id:"policy-effectiveness-testing",level:3},{value:"Policy Audit Commands",id:"policy-audit-commands",level:3},{value:"Load Testing Integration",id:"load-testing-integration",level:3},{value:"Policy Response Handling",id:"policy-response-handling",level:2},{value:"Service Implementation Patterns",id:"service-implementation-patterns",level:3},{value:"HTTP Status Code Standards",id:"http-status-code-standards",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Dynamic Policy Updates",id:"dynamic-policy-updates",level:3},{value:"Conditional Policies",id:"conditional-policies",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"<strong>Policy Not Applying</strong>",id:"policy-not-applying",level:4},{value:"<strong>Rate Limits Too Restrictive</strong>",id:"rate-limits-too-restrictive",level:4},{value:"<strong>Blocked IPs</strong>",id:"blocked-ips",level:4},{value:"<strong>Policy Conflicts</strong>",id:"policy-conflicts",level:4},{value:"Debug Commands",id:"debug-commands",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Policy Security Best Practices",id:"policy-security-best-practices",level:3},{value:"Incident Response",id:"incident-response",level:3},{value:"API Reference Summary",id:"api-reference-summary",level:2},{value:"Permissions &amp; Security",id:"permissions--security",level:2},{value:"Related Services",id:"related-services",level:2},{value:"Future Enhancements",id:"future-enhancements",level:2},{value:"Planned Features",id:"planned-features",level:3},{value:"Integration Roadmap",id:"integration-roadmap",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"policy-svc",children:"Policy Svc"})}),"\n",(0,s.jsx)(n.p,{children:"The Policy Svc is a comprehensive access control and rate limiting service that provides protection against abuse, ensures fair resource usage, and maintains service reliability through configurable policies."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["This page provides a comprehensive overview of ",(0,s.jsx)(n.code,{children:"Policy Svc"}),". For detailed API information, refer to the ",(0,s.jsx)(n.a,{href:"/docs/1backend-api/upsert-instance",children:"Policy Svc API documentation"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"architecture--purpose",children:"Architecture & Purpose"}),"\n",(0,s.jsxs)(n.p,{children:["Policy Svc serves as the ",(0,s.jsx)(n.strong,{children:"service protection layer"})," for 1Backend, providing:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rate Limiting"}),": Prevent resource exhaustion by limiting requests per user/IP/endpoint"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Access Control"}),": Block malicious IPs or users from accessing services"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Abuse Prevention"}),": Protect against DDoS attacks and automated abuse"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fair Usage"}),": Ensure equitable resource distribution across users"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service Reliability"}),": Maintain system stability under high load"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexible Templates"}),": Pre-built policies for common protection scenarios"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multiple Entities"}),": Rate limit by user ID, IP address, or custom identifiers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Granular Scoping"}),": Apply policies per-endpoint or globally across services"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Time Windows"}),": Configurable periods (seconds, minutes, hours, days)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Explicit Integration"}),": Services opt-in to policy checking for maximum control"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"cli-usage",children:"CLI Usage"}),"\n",(0,s.jsx)(n.p,{children:"Policy Svc uses HTTP commands for all operations:"}),"\n",(0,s.jsx)(n.h3,{id:"creating-policy-instances",children:"Creating Policy Instances"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Rate limit user registrations: 5 per IP per day\noo put /policy-svc/instance/registration-rate-limit \\\n  --instance.endpoint="/user-svc/register" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=5 \\\n  --instance.parameters.rateLimit.timeWindow="1d" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Block malicious IPs from login endpoint\noo put /policy-svc/instance/login-ip-blocklist \\\n  --instance.endpoint="/user-svc/login" \\\n  --instance.templateId="blocklist" \\\n  --instance.parameters.blocklist.blockedIPs=\'["192.168.1.100", "10.0.0.50"]\'\n\n# Rate limit API calls: 100 per user per hour across all endpoints\noo put /policy-svc/instance/api-user-rate-limit \\\n  --instance.endpoint="" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=100 \\\n  --instance.parameters.rateLimit.timeWindow="1h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="global"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"checking-access-control",children:"Checking Access Control"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Check if request is allowed (call from your service)\noo post /policy-svc/check \\\n  --endpoint="/user-svc/register" \\\n  --method="POST" \\\n  --ip="192.168.1.10" \\\n  --userId="usr_12345"\n\n# Response: {"allowed": true} or {"allowed": false}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"policy-management",children:"Policy Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Update existing policy (same endpoint, overwrites)\noo put /policy-svc/instance/registration-rate-limit \\\n  --instance.endpoint="/user-svc/register" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=10 \\\n  --instance.parameters.rateLimit.timeWindow="1d" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Multiple policies can apply to the same endpoint\noo put /policy-svc/instance/registration-user-rate-limit \\\n  --instance.endpoint="/user-svc/register" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=3 \\\n  --instance.parameters.rateLimit.timeWindow="1h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"policy-templates",children:"Policy Templates"}),"\n",(0,s.jsx)(n.h3,{id:"rate-limit-template",children:"Rate Limit Template"}),"\n",(0,s.jsx)(n.p,{children:"The Rate Limit template provides flexible request throttling:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "templateId": "rate-limit",\n  "parameters": {\n    "rateLimit": {\n      "maxRequests": 10,\n      "timeWindow": "1m",\n      "entity": "ip",\n      "scope": "endpoint"\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"maxRequests"}),": Maximum number of requests allowed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"timeWindow"}),': Time period for the limit (e.g., "30s", "5m", "1h", "24h", "7d")']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"entity"}),": Who to track (",(0,s.jsx)(n.code,{children:'"ip"'}),", ",(0,s.jsx)(n.code,{children:'"userId"'}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"scope"}),": Where to apply (",(0,s.jsx)(n.code,{children:'"endpoint"'}),", ",(0,s.jsx)(n.code,{children:'"global"'}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Time Window Formats:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'"30s"    # 30 seconds\n"5m"     # 5 minutes  \n"1h"     # 1 hour\n"24h"    # 24 hours\n"7d"     # 7 days\n"168h"   # 1 week (alternative)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Entity Types:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"ip"'}),": Rate limit by client IP address"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"userId"'}),": Rate limit by authenticated user ID"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Scope Types:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"endpoint"'}),": Limit applies only to the specified endpoint"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"global"'}),": Limit applies across all endpoints for the entity"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"blocklist-template",children:"Blocklist Template"}),"\n",(0,s.jsx)(n.p,{children:"The Blocklist template provides IP-based access control:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "templateId": "blocklist", \n  "parameters": {\n    "blocklist": {\n      "blockedIPs": ["192.168.1.100", "10.0.0.50", "203.0.113.0"]\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"blockedIPs"}),": Array of IP addresses to block"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"service-integration-patterns",children:"Service Integration Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"explicit-policy-checking",children:"Explicit Policy Checking"}),"\n",(0,s.jsxs)(n.p,{children:["Unlike middleware-based solutions, Policy Svc requires ",(0,s.jsx)(n.strong,{children:"explicit integration"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// In your service endpoint\nfunc (s *MyService) CreatePost(w http.ResponseWriter, r *http.Request) {\n    // Extract request context\n    userID := getUserID(r)\n    clientIP := getClientIP(r)\n    \n    // Check policy\n    checkRsp, _, err := s.client.PolicySvcAPI.Check(r.Context()).\n        Body(openapi.PolicySvcCheckRequest{\n            Endpoint: "/posts-svc/post",\n            Method:   "POST", \n            Ip:       clientIP,\n            UserId:   userID,\n        }).Execute()\n    \n    if err != nil {\n        http.Error(w, "Policy check failed", 500)\n        return\n    }\n    \n    if !checkRsp.Allowed {\n        http.Error(w, "Rate limit exceeded", 429)\n        return\n    }\n    \n    // Proceed with business logic\n    s.createPost(r)\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"cli-based-integration",children:"CLI-Based Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# In a shell script or CLI-based service\nUSER_ID="usr_12345"\nCLIENT_IP="192.168.1.10"\n\nALLOWED=$(oo post /policy-svc/check \\\n  --endpoint="/api/data/upload" \\\n  --method="POST" \\\n  --ip="$CLIENT_IP" \\\n  --userId="$USER_ID" | jq -r \'.allowed\')\n\nif [ "$ALLOWED" = "true" ]; then\n  echo "Processing request..."\n  # Handle the request\nelse\n  echo "Request blocked by policy"\n  exit 1\nfi\n'})}),"\n",(0,s.jsx)(n.h2,{id:"real-world-usage-examples",children:"Real-World Usage Examples"}),"\n",(0,s.jsx)(n.h3,{id:"1-user-registration-protection",children:"1. User Registration Protection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Prevent registration abuse: 3 registrations per IP per day\noo put /policy-svc/instance/registration-ip-limit \\\n  --instance.endpoint="/user-svc/register" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=3 \\\n  --instance.parameters.rateLimit.timeWindow="24h" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Also limit per user: 1 registration per user per hour (prevent multiple accounts)\noo put /policy-svc/instance/registration-user-limit \\\n  --instance.endpoint="/user-svc/register" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=1 \\\n  --instance.parameters.rateLimit.timeWindow="1h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Test the policy\noo post /policy-svc/check \\\n  --endpoint="/user-svc/register" \\\n  --method="POST" \\\n  --ip="192.168.1.10" \\\n  --userId="usr_test"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-api-rate-limiting",children:"2. API Rate Limiting"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# General API rate limiting: 1000 requests per user per hour\noo put /policy-svc/instance/api-rate-limit \\\n  --instance.endpoint="" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=1000 \\\n  --instance.parameters.rateLimit.timeWindow="1h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="global"\n\n# Expensive operations: 10 AI prompts per user per hour\noo put /policy-svc/instance/prompt-rate-limit \\\n  --instance.endpoint="/prompt-svc/prompt" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=10 \\\n  --instance.parameters.rateLimit.timeWindow="1h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# File uploads: 5 uploads per user per 10 minutes\noo put /policy-svc/instance/upload-rate-limit \\\n  --instance.endpoint="/file-svc/upload" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=5 \\\n  --instance.parameters.rateLimit.timeWindow="10m" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-ddos-protection",children:"3. DDoS Protection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Aggressive rate limiting for login attempts\noo put /policy-svc/instance/login-ip-protection \\\n  --instance.endpoint="/user-svc/login" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=5 \\\n  --instance.parameters.rateLimit.timeWindow="5m" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Block known malicious IPs\noo put /policy-svc/instance/malicious-ip-blocklist \\\n  --instance.endpoint="" \\\n  --instance.templateId="blocklist" \\\n  --instance.parameters.blocklist.blockedIPs=\'["185.220.101.0", "185.220.102.0", "tor-exit-node-1.com"]\'\n\n# Emergency rate limiting during attack\noo put /policy-svc/instance/emergency-rate-limit \\\n  --instance.endpoint="" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=10 \\\n  --instance.parameters.rateLimit.timeWindow="1m" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="global"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-fair-resource-usage",children:"4. Fair Resource Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Chat service: 50 messages per user per hour\noo put /policy-svc/instance/chat-rate-limit \\\n  --instance.endpoint="/chat-svc/thread/*/message" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=50 \\\n  --instance.parameters.rateLimit.timeWindow="1h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Data service: 100 object creations per user per day\noo put /policy-svc/instance/data-creation-limit \\\n  --instance.endpoint="/data-svc/object" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=100 \\\n  --instance.parameters.rateLimit.timeWindow="24h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Model usage: 20 model starts per user per day (expensive operation)\noo put /policy-svc/instance/model-start-limit \\\n  --instance.endpoint="/model-svc/model/*/start" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=20 \\\n  --instance.parameters.rateLimit.timeWindow="24h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"5-abuse-prevention",children:"5. Abuse Prevention"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Prevent password reset abuse: 3 attempts per IP per hour\noo put /policy-svc/instance/password-reset-limit \\\n  --instance.endpoint="/user-svc/password-reset" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=3 \\\n  --instance.parameters.rateLimit.timeWindow="1h" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Email verification: 5 requests per user per day\noo put /policy-svc/instance/email-verification-limit \\\n  --instance.endpoint="/user-svc/verify-email" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=5 \\\n  --instance.parameters.rateLimit.timeWindow="24h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Account creation from specific regions (compliance)\noo put /policy-svc/instance/region-blocklist \\\n  --instance.endpoint="/user-svc/register" \\\n  --instance.templateId="blocklist" \\\n  --instance.parameters.blocklist.blockedIPs=\'["192.0.2.0", "203.0.113.0"]\'\n'})}),"\n",(0,s.jsx)(n.h3,{id:"6-service-specific-policies",children:"6. Service-Specific Policies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Container service: Limit container launches\noo put /policy-svc/instance/container-launch-limit \\\n  --instance.endpoint="/container-svc/container" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=10 \\\n  --instance.parameters.rateLimit.timeWindow="1h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Image generation: Expensive AI operations\noo put /policy-svc/instance/image-generation-limit \\\n  --instance.endpoint="/prompt-svc/prompt" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=5 \\\n  --instance.parameters.rateLimit.timeWindow="1h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Secret management: Sensitive operations\noo put /policy-svc/instance/secret-access-limit \\\n  --instance.endpoint="/secret-svc/secret" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=50 \\\n  --instance.parameters.rateLimit.timeWindow="1h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"policy-patterns--best-practices",children:"Policy Patterns & Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"layered-protection-strategy",children:"Layered Protection Strategy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Layer 1: Global IP-based protection (very permissive)\noo put /policy-svc/instance/global-ip-protection \\\n  --instance.endpoint="" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=1000 \\\n  --instance.parameters.rateLimit.timeWindow="1m" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="global"\n\n# Layer 2: Endpoint-specific limits (moderate)\noo put /policy-svc/instance/api-endpoint-limit \\\n  --instance.endpoint="/api/v1/data" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=100 \\\n  --instance.parameters.rateLimit.timeWindow="1m" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Layer 3: User-based fair usage (strict)\noo put /policy-svc/instance/user-fair-usage \\\n  --instance.endpoint="/api/v1/data" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=50 \\\n  --instance.parameters.rateLimit.timeWindow="1m" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"time-window-strategies",children:"Time Window Strategies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Burst protection: Short-term limits\noo put /policy-svc/instance/burst-protection \\\n  --instance.endpoint="/api/search" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=10 \\\n  --instance.parameters.rateLimit.timeWindow="30s" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Sustained usage: Medium-term limits  \noo put /policy-svc/instance/sustained-usage \\\n  --instance.endpoint="/api/search" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=100 \\\n  --instance.parameters.rateLimit.timeWindow="10m" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Daily quotas: Long-term limits\noo put /policy-svc/instance/daily-quota \\\n  --instance.endpoint="/api/search" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=1000 \\\n  --instance.parameters.rateLimit.timeWindow="24h" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"monitoring--observability",children:"Monitoring & Observability"}),"\n",(0,s.jsx)(n.h3,{id:"policy-effectiveness-testing",children:"Policy Effectiveness Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Test rate limit behavior\ntest_rate_limit() {\n  local endpoint=$1\n  local max_requests=$2\n  \n  echo "Testing rate limit for $endpoint (max: $max_requests)"\n  \n  for i in $(seq 1 $((max_requests + 2))); do\n    result=$(oo post /policy-svc/check \\\n      --endpoint="$endpoint" \\\n      --method="POST" \\\n      --ip="192.168.1.10" \\\n      --userId="test_user" | jq -r \'.allowed\')\n    \n    echo "Request $i: $result"\n  done\n}\n\n# Test registration endpoint\ntest_rate_limit "/user-svc/register" 5\n'})}),"\n",(0,s.jsx)(n.h3,{id:"policy-audit-commands",children:"Policy Audit Commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Check policy coverage for critical endpoints\ncritical_endpoints=(\n  "/user-svc/register"\n  "/user-svc/login" \n  "/prompt-svc/prompt"\n  "/file-svc/upload"\n  "/container-svc/container"\n)\n\nfor endpoint in "${critical_endpoints[@]}"; do\n  echo "Testing policy for $endpoint"\n  oo post /policy-svc/check \\\n    --endpoint="$endpoint" \\\n    --method="POST" \\\n    --ip="192.168.1.10" \\\n    --userId="audit_user"\ndone\n'})}),"\n",(0,s.jsx)(n.h3,{id:"load-testing-integration",children:"Load Testing Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Use with load testing tools\nload_test_with_policy() {\n  local endpoint=$1\n  local concurrent_users=$2\n  \n  # Pre-check policy status\n  oo post /policy-svc/check \\\n    --endpoint="$endpoint" \\\n    --method="POST" \\\n    --ip="192.168.1.10" \\\n    --userId="load_test_user"\n  \n  # Run load test (example with curl)\n  for i in $(seq 1 $concurrent_users); do\n    curl -X POST "$endpoint" \\\n      -H "Authorization: Bearer $TOKEN" \\\n      -H "X-Forwarded-For: 192.168.1.$i" &\n  done\n  wait\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"policy-response-handling",children:"Policy Response Handling"}),"\n",(0,s.jsx)(n.h3,{id:"service-implementation-patterns",children:"Service Implementation Patterns"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Standard response handling in services\nhandle_policy_check() {\n  local endpoint=$1\n  local user_id=$2\n  local client_ip=$3\n  \n  response=$(oo post /policy-svc/check \\\n    --endpoint="$endpoint" \\\n    --method="POST" \\\n    --ip="$client_ip" \\\n    --userId="$user_id")\n  \n  allowed=$(echo "$response" | jq -r \'.allowed\')\n  \n  if [ "$allowed" = "true" ]; then\n    return 0  # Allow request\n  else\n    echo "HTTP/1.1 429 Too Many Requests"\n    echo "Content-Type: application/json"\n    echo ""\n    echo \'{"error":"Rate limit exceeded","retryAfter":"60"}\'\n    return 1  # Block request\n  fi\n}\n\n# Usage in endpoint handler\nif handle_policy_check "/api/data/create" "$USER_ID" "$CLIENT_IP"; then\n  # Process the request\n  echo "Processing request..."\nelse\n  # Request was blocked\n  exit 1\nfi\n'})}),"\n",(0,s.jsx)(n.h3,{id:"http-status-code-standards",children:"HTTP Status Code Standards"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Proper HTTP responses for policy violations\n\n# Rate limiting\necho "HTTP/1.1 429 Too Many Requests"\necho "Retry-After: 60"\necho "X-RateLimit-Limit: 100"\necho "X-RateLimit-Remaining: 0"\necho "X-RateLimit-Reset: 1640995200"\n\n# IP blocking  \necho "HTTP/1.1 403 Forbidden"\necho "Content-Type: application/json"\necho \'{"error":"Access denied from this IP address"}\'\n\n# General policy violation\necho "HTTP/1.1 403 Forbidden" \necho "Content-Type: application/json"\necho \'{"error":"Request blocked by security policy"}\'\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"dynamic-policy-updates",children:"Dynamic Policy Updates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Update policy during high load (emergency response)\noo put /policy-svc/instance/emergency-login-limit \\\n  --instance.endpoint="/user-svc/login" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=1 \\\n  --instance.parameters.rateLimit.timeWindow="5m" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Relax policies during maintenance\noo put /policy-svc/instance/maintenance-mode \\\n  --instance.endpoint="/user-svc/login" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=50 \\\n  --instance.parameters.rateLimit.timeWindow="1m" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Remove emergency restrictions\noo put /policy-svc/instance/normal-login-limit \\\n  --instance.endpoint="/user-svc/login" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=10 \\\n  --instance.parameters.rateLimit.timeWindow="1m" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"conditional-policies",children:"Conditional Policies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Different limits for different user types (implemented in service logic)\ncheck_policy_with_user_tier() {\n  local user_id=$1\n  local endpoint=$2\n  local client_ip=$3\n  \n  # Get user tier from user service\n  user_tier=$(oo get /user-svc/user/$user_id | jq -r \'.user.tier\')\n  \n  case $user_tier in\n    "premium")\n      instance_id="premium-user-limit"\n      ;;\n    "basic")\n      instance_id="basic-user-limit"\n      ;;\n    *)\n      instance_id="default-user-limit"\n      ;;\n  esac\n  \n  # Check appropriate policy\n  oo post /policy-svc/check \\\n    --endpoint="$endpoint" \\\n    --method="POST" \\\n    --ip="$client_ip" \\\n    --userId="$user_id"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsx)(n.h4,{id:"policy-not-applying",children:(0,s.jsx)(n.strong,{children:"Policy Not Applying"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Check if policy instance exists\noo put /policy-svc/instance/test-policy \\\n  --instance.endpoint="/test-endpoint" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=1 \\\n  --instance.parameters.rateLimit.timeWindow="1m" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# Test the policy immediately\noo post /policy-svc/check \\\n  --endpoint="/test-endpoint" \\\n  --method="POST" \\\n  --ip="192.168.1.10" \\\n  --userId="test_user"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"rate-limits-too-restrictive",children:(0,s.jsx)(n.strong,{children:"Rate Limits Too Restrictive"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Check current rate limit status\noo post /policy-svc/check \\\n  --endpoint="/api/problematic-endpoint" \\\n  --method="POST" \\\n  --ip="192.168.1.10" \\\n  --userId="affected_user"\n\n# Temporarily increase limits\noo put /policy-svc/instance/temporary-increase \\\n  --instance.endpoint="/api/problematic-endpoint" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=100 \\\n  --instance.parameters.rateLimit.timeWindow="1m" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"blocked-ips",children:(0,s.jsx)(n.strong,{children:"Blocked IPs"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Check if IP is in blocklist\noo post /policy-svc/check \\\n  --endpoint="/any-endpoint" \\\n  --method="GET" \\\n  --ip="SUSPECTED_IP" \\\n  --userId="any_user"\n\n# Update blocklist to remove IP\noo put /policy-svc/instance/ip-blocklist \\\n  --instance.endpoint="" \\\n  --instance.templateId="blocklist" \\\n  --instance.parameters.blocklist.blockedIPs=\'["192.168.1.100"]\'  # Removed the IP\n'})}),"\n",(0,s.jsx)(n.h4,{id:"policy-conflicts",children:(0,s.jsx)(n.strong,{children:"Policy Conflicts"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Multiple policies can apply to the same endpoint\n# They are evaluated in sequence - if ANY policy blocks, request is denied\n\n# Example: Both IP and user rate limits apply\noo put /policy-svc/instance/endpoint-ip-limit \\\n  --instance.endpoint="/api/data" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=100 \\\n  --instance.parameters.rateLimit.timeWindow="1m" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\noo put /policy-svc/instance/endpoint-user-limit \\\n  --instance.endpoint="/api/data" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=50 \\\n  --instance.parameters.rateLimit.timeWindow="1m" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"debug-commands",children:"Debug Commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Test policy behavior with different parameters\ndebug_policy() {\n  local endpoint=$1\n  local user_id=$2\n  local ip=$3\n  \n  echo "=== Policy Debug for $endpoint ==="\n  echo "User: $user_id, IP: $ip"\n  \n  response=$(oo post /policy-svc/check \\\n    --endpoint="$endpoint" \\\n    --method="POST" \\\n    --ip="$ip" \\\n    --userId="$user_id")\n  \n  echo "Response: $response"\n  \n  allowed=$(echo "$response" | jq -r \'.allowed\')\n  if [ "$allowed" = "true" ]; then\n    echo "\u2705 Request ALLOWED"\n  else\n    echo "\u274c Request BLOCKED"\n  fi\n}\n\n# Usage\ndebug_policy "/user-svc/login" "usr_test" "192.168.1.10"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"policy-security-best-practices",children:"Policy Security Best Practices"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# 1. Protect admin endpoints aggressively\noo put /policy-svc/instance/admin-protection \\\n  --instance.endpoint="/admin/*" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=5 \\\n  --instance.parameters.rateLimit.timeWindow="1h" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# 2. Layer multiple protection mechanisms\noo put /policy-svc/instance/login-ip-limit \\\n  --instance.endpoint="/user-svc/login" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=5 \\\n  --instance.parameters.rateLimit.timeWindow="5m" \\\n  --instance.parameters.rateLimit.entity="ip" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\noo put /policy-svc/instance/login-user-limit \\\n  --instance.endpoint="/user-svc/login" \\\n  --instance.templateId="rate-limit" \\\n  --instance.parameters.rateLimit.maxRequests=3 \\\n  --instance.parameters.rateLimit.timeWindow="5m" \\\n  --instance.parameters.rateLimit.entity="userId" \\\n  --instance.parameters.rateLimit.scope="endpoint"\n\n# 3. Block known malicious IP ranges\noo put /policy-svc/instance/tor-blocklist \\\n  --instance.endpoint="" \\\n  --instance.templateId="blocklist" \\\n  --instance.parameters.blocklist.blockedIPs=\'["185.220.101.0", "185.220.102.0"]\'\n'})}),"\n",(0,s.jsx)(n.h3,{id:"incident-response",children:"Incident Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Emergency lockdown procedure\nemergency_lockdown() {\n  echo "\ud83d\udea8 Implementing emergency lockdown..."\n  \n  # Severely restrict all endpoints\n  oo put /policy-svc/instance/emergency-global-limit \\\n    --instance.endpoint="" \\\n    --instance.templateId="rate-limit" \\\n    --instance.parameters.rateLimit.maxRequests=1 \\\n    --instance.parameters.rateLimit.timeWindow="1m" \\\n    --instance.parameters.rateLimit.entity="ip" \\\n    --instance.parameters.rateLimit.scope="global"\n  \n  echo "\u2705 Emergency lockdown active"\n}\n\n# Gradual recovery procedure\ngradual_recovery() {\n  echo "\ud83d\udd04 Starting gradual recovery..."\n  \n  # Increase limits gradually\n  oo put /policy-svc/instance/recovery-phase-1 \\\n    --instance.endpoint="" \\\n    --instance.templateId="rate-limit" \\\n    --instance.parameters.rateLimit.maxRequests=10 \\\n    --instance.parameters.rateLimit.timeWindow="1m" \\\n    --instance.parameters.rateLimit.entity="ip" \\\n    --instance.parameters.rateLimit.scope="global"\n  \n  sleep 300  # Wait 5 minutes\n  \n  oo put /policy-svc/instance/recovery-phase-2 \\\n    --instance.endpoint="" \\\n    --instance.templateId="rate-limit" \\\n    --instance.parameters.rateLimit.maxRequests=50 \\\n    --instance.parameters.rateLimit.timeWindow="1m" \\\n    --instance.parameters.rateLimit.entity="ip" \\\n    --instance.parameters.rateLimit.scope="global"\n  \n  echo "\u2705 Recovery phase 2 complete"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"api-reference-summary",children:"API Reference Summary"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Endpoint"}),(0,s.jsx)(n.th,{children:"Method"}),(0,s.jsx)(n.th,{children:"Purpose"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/policy-svc/instance/{instanceId}"})}),(0,s.jsx)(n.td,{children:"PUT"}),(0,s.jsx)(n.td,{children:"Create or update policy instance"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/policy-svc/check"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"Check if request is allowed by policies"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"permissions--security",children:"Permissions & Security"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Admin permissions (required for policy management)\npolicy-svc:instance:create    # Create policy instances\npolicy-svc:instance:edit      # Modify policy instances\npolicy-svc:instance:delete    # Remove policy instances\npolicy-svc:template:view      # View policy templates\n\n# User permissions (for policy checking)\npolicy-svc:check:view         # Check policies (typically granted to services)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-services",children:"Related Services"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/built-in-services/user-svc",children:"User Svc"})}),": User authentication and registration protection"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/built-in-services/file-svc",children:"File Svc"})}),": Upload rate limiting and abuse prevention"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/built-in-services/prompt-svc",children:"Prompt Svc"})}),": AI usage rate limiting and fair access"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/built-in-services/container-svc",children:"Container Svc"})}),": Resource-intensive operation limiting"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,s.jsx)(n.h3,{id:"planned-features",children:"Planned Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Geographic Blocking"}),": Block requests from specific countries/regions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User Behavior Analysis"}),": Dynamic rate limiting based on user patterns"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Templates"}),": User-defined policy templates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Policy Analytics"}),": Detailed reporting on policy effectiveness"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Whitelist Support"}),": Allow-lists for trusted IPs/users"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"integration-roadmap",children:"Integration Roadmap"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automatic Detection"}),": AI-powered abuse detection and policy adjustment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"External Feeds"}),": Integration with threat intelligence feeds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Circuit Breakers"}),": Automatic service protection during overload"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Policy Scheduling"}),": Time-based policy activation/deactivation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multi-Factor Policies"}),": Complex policies combining multiple conditions"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Policy Svc provides the essential protection layer for 1Backend services, ensuring system reliability, fair resource usage, and protection against abuse through flexible, configurable policies."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var t=i(96540);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);