"use strict";(self.webpackChunksingulatron_api_docs=self.webpackChunksingulatron_api_docs||[]).push([[3515],{7994:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"built-in-services/config-svc","title":"Config Svc","description":"The Config Svc stores public, non-sensitive and end-user-facing data.","source":"@site/docs/built-in-services/config-svc.md","sourceDirName":"built-in-services","slug":"/built-in-services/config-svc","permalink":"/docs/built-in-services/config-svc","draft":false,"unlisted":false,"editUrl":"https://github.com/1backend/1backend/tree/main/docs-source/docs/built-in-services/config-svc.md","tags":[{"inline":true,"label":"config-svc","permalink":"/docs/tags/config-svc"},{"inline":true,"label":"configuration","permalink":"/docs/tags/configuration"},{"inline":true,"label":"services","permalink":"/docs/tags/services"},{"inline":true,"label":"multitenant","permalink":"/docs/tags/multitenant"}],"version":"current","sidebarPosition":80,"frontMatter":{"sidebar_position":80,"tags":["config-svc","configuration","services","multitenant"]},"sidebar":"tutorialSidebar","previous":{"title":"Policy Svc","permalink":"/docs/built-in-services/policy-svc"},"next":{"title":"Model Svc","permalink":"/docs/built-in-services/model-svc"}}');var l=i(74848),r=i(28453);const c={sidebar_position:80,tags:["config-svc","configuration","services","multitenant"]},a="Config Svc",t={},o=[{value:"CLI Usage",id:"cli-usage",level:2},{value:"Saving Configs",id:"saving-configs",level:3},{value:"Config File Structure",id:"config-file-structure",level:4},{value:"Multiple Configs in One File",id:"multiple-configs-in-one-file",level:4},{value:"Querying Configs",id:"querying-configs",level:3},{value:"Data Structure &amp; Behavior",id:"data-structure--behavior",level:2},{value:"Deep Merge",id:"deep-merge",level:3},{value:"Deep Merge Example",id:"deep-merge-example",level:4},{value:"Config Identification",id:"config-identification",level:3},{value:"Access Rules",id:"access-rules",level:2},{value:"Read Access",id:"read-access",level:3},{value:"Write Access",id:"write-access",level:3},{value:"Regular Users",id:"regular-users",level:4},{value:"Administrators",id:"administrators",level:4},{value:"Permission-Based Access Example",id:"permission-based-access-example",level:4},{value:"Limitations",id:"limitations",level:2},{value:"Related",id:"related",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"config-svc",children:"Config Svc"})}),"\n",(0,l.jsx)(n.p,{children:"The Config Svc stores public, non-sensitive and end-user-facing data."}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["This page provides a high-level overview of ",(0,l.jsx)(n.code,{children:"Config Svc"}),". For detailed information, refer to the ",(0,l.jsx)(n.a,{href:"/docs/1backend-api/list-configs",children:"Config Svc API documentation"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The Config Svc is less critical than it might seem\u2014most configuration happens internally through the ",(0,l.jsx)(n.a,{href:"/docs/built-in-services/secret-svc",children:"Secret Svc"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"At the moment, it functions more like a minimal feature-flag service."}),"\n",(0,l.jsx)(n.h2,{id:"cli-usage",children:"CLI Usage"}),"\n",(0,l.jsx)(n.h3,{id:"saving-configs",children:"Saving Configs"}),"\n",(0,l.jsxs)(n.p,{children:["Use the ",(0,l.jsx)(n.code,{children:"config save"})," command to save configuration data from YAML files:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Save a single config file\noo config save ./my-config.yaml\n\n# Save multiple config files from a directory\noo config save ./configs/\n\n# Using aliases\noo co s ./my-config.yaml\noo configs save ./my-config.yaml\n"})}),"\n",(0,l.jsx)(n.h4,{id:"config-file-structure",children:"Config File Structure"}),"\n",(0,l.jsx)(n.p,{children:"Config files should be in YAML format with the following structure:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'app: "my-app"           # Optional: specify target app (admin only)\nkey: "user-slug"        # Optional: specify config owner (admin only)\ndata:\n  # Your configuration data here\n  featureFlags:\n    enableNewUI: true\n    maxUsers: 100\n  settings:\n    theme: "dark"\n    language: "en"\n    notifications:\n      email: true\n      push: false\n'})}),"\n",(0,l.jsx)(n.h4,{id:"multiple-configs-in-one-file",children:"Multiple Configs in One File"}),"\n",(0,l.jsx)(n.p,{children:"You can also define multiple configs in a single YAML file as an array:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'- app: "my-app"\n  key: "user1"\n  data:\n    preferences:\n      theme: "light"\n- app: "my-app"\n  key: "user2"\n  data:\n    preferences:\n      theme: "dark"\n'})}),"\n",(0,l.jsx)(n.h3,{id:"querying-configs",children:"Querying Configs"}),"\n",(0,l.jsxs)(n.p,{children:["Use the ",(0,l.jsx)(n.code,{children:"config list"})," command to retrieve and view configurations:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# List all configs for the current app\noo config list\n\n# Using aliases\noo co ls\noo configs list\n"})}),"\n",(0,l.jsx)(n.p,{children:"The output shows configs in a tabular format:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'CONFIG KEY    APP      JSON\nuser1         my-app   {"preferences":{"theme":"light"}}\nuser2         my-app   {"preferences":{"theme":"dark"}}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"data-structure--behavior",children:"Data Structure & Behavior"}),"\n",(0,l.jsx)(n.h3,{id:"deep-merge",children:"Deep Merge"}),"\n",(0,l.jsxs)(n.p,{children:["The Config Svc performs ",(0,l.jsx)(n.strong,{children:"deep merging"})," when saving configurations:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Nested objects"})," are recursively merged rather than replaced"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Conflicting primitive values"})," (strings, numbers, booleans) are replaced by incoming values"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"New fields"})," are added to existing configs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Existing fields"})," not present in the incoming config are preserved"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"deep-merge-example",children:"Deep Merge Example"}),"\n",(0,l.jsx)(n.p,{children:"Existing config:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "ui": {\n    "theme": "light",\n    "sidebar": {\n      "collapsed": false,\n      "width": 250\n    }\n  },\n  "features": {\n    "notifications": true\n  }\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"Incoming config:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'data:\n  ui:\n    theme: "dark"     # This will replace "light"\n    sidebar:\n      width: 300      # This will replace 250, collapsed: false is preserved\n  newFeature: true    # This will be added\n'})}),"\n",(0,l.jsx)(n.p,{children:"Result after merge:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "ui": {\n    "theme": "dark",        # Updated\n    "sidebar": {\n      "collapsed": false,   # Preserved\n      "width": 300          # Updated\n    }\n  },\n  "features": {\n    "notifications": true   # Preserved\n  },\n  "newFeature": true        # Added\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"config-identification",children:"Config Identification"}),"\n",(0,l.jsx)(n.p,{children:"Configs are uniquely identified by:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"App"}),": The application name (automatically determined from user's token)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Key"}),": The camelCased user slug (e.g., ",(0,l.jsx)(n.code,{children:"jane-doe"})," becomes ",(0,l.jsx)(n.code,{children:"janeDo\u0435"}),")"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The internal ID format is: ",(0,l.jsx)(n.code,{children:"{app}_{camelCasedSlug}"})]}),"\n",(0,l.jsx)(n.h2,{id:"access-rules",children:"Access Rules"}),"\n",(0,l.jsx)(n.h3,{id:"read-access",children:"Read Access"}),"\n",(0,l.jsxs)(n.p,{children:["All configs are ",(0,l.jsx)(n.strong,{children:"publicly readable"})," even without a user account."]}),"\n",(0,l.jsx)(n.h3,{id:"write-access",children:"Write Access"}),"\n",(0,l.jsx)(n.h4,{id:"regular-users",children:"Regular Users"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Can only write to configs under their own slug"}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.code,{children:"key"})," field is automatically set to their camelCased slug"]}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.code,{children:"app"})," field is automatically set from their token"]}),"\n",(0,l.jsxs)(n.li,{children:["Cannot specify custom ",(0,l.jsx)(n.code,{children:"app"})," or ",(0,l.jsx)(n.code,{children:"key"})," values"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"administrators",children:"Administrators"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Have the ",(0,l.jsx)(n.code,{children:"config-svc:config:edit-on-behalf"})," permission"]}),"\n",(0,l.jsxs)(n.li,{children:["Can specify any ",(0,l.jsx)(n.code,{children:"key"})," value to edit configs for other users"]}),"\n",(0,l.jsxs)(n.li,{children:["Can specify any ",(0,l.jsx)(n.code,{children:"app"})," value to target different applications"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Must"})," provide a ",(0,l.jsx)(n.code,{children:"key"})," when editing on behalf of others"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"permission-based-access-example",children:"Permission-Based Access Example"}),"\n",(0,l.jsxs)(n.p,{children:["Regular user with slug ",(0,l.jsx)(n.code,{children:"jane-doe"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'# This file will automatically save under key "janeDoe"\ndata:\n  preferences:\n    theme: "dark"\n'})}),"\n",(0,l.jsx)(n.p,{children:"Admin user:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'app: "production-app"    # Can specify target app\nkey: "john-smith"        # Can specify target user\ndata:\n  adminSettings:\n    maxFileSize: "10MB"\n'})}),"\n",(0,l.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Only ",(0,l.jsx)(n.strong,{children:"one top-level key"})," can be saved per config operation, even by administrators"]}),"\n",(0,l.jsxs)(n.li,{children:["Configuration data should be non-sensitive (use ",(0,l.jsx)(n.a,{href:"/docs/built-in-services/secret-svc",children:"Secret Svc"})," for sensitive data)"]}),"\n",(0,l.jsx)(n.li,{children:"All configs are publicly readable"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/docs/built-in-services/secret-svc",children:"Secret Svc"})," to store sensitive data like internal configuration and secrets"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/docs/1backend-api/list-configs",children:"Config Svc API documentation"})," for programmatic access"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>a});var s=i(96540);const l={},r=s.createContext(l);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);