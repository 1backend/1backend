/*
1Backend

AI-native microservices platform.

API version: 0.8.0-rc1
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProxySvcRoute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProxySvcRoute{}

// ProxySvcRoute struct for ProxySvcRoute
type ProxySvcRoute struct {
	CreatedAt *string `json:"createdAt,omitempty"`
	// Id is the host itself, e.g. \"test.localhost\"
	Id *string `json:"id,omitempty"`
	Target *string `json:"target,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// NewProxySvcRoute instantiates a new ProxySvcRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProxySvcRoute() *ProxySvcRoute {
	this := ProxySvcRoute{}
	return &this
}

// NewProxySvcRouteWithDefaults instantiates a new ProxySvcRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProxySvcRouteWithDefaults() *ProxySvcRoute {
	this := ProxySvcRoute{}
	return &this
}



// HasCreatedAt returns a boolean if a field has been set.
func (o *ProxySvcRoute) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}




// HasId returns a boolean if a field has been set.
func (o *ProxySvcRoute) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}




// HasTarget returns a boolean if a field has been set.
func (o *ProxySvcRoute) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}




// HasUpdatedAt returns a boolean if a field has been set.
func (o *ProxySvcRoute) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}


func (o ProxySvcRoute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProxySvcRoute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableProxySvcRoute struct {
	value *ProxySvcRoute
	isSet bool
}

func (v NullableProxySvcRoute) Get() *ProxySvcRoute {
	return v.value
}

func (v *NullableProxySvcRoute) Set(val *ProxySvcRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableProxySvcRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableProxySvcRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProxySvcRoute(val *ProxySvcRoute) *NullableProxySvcRoute {
	return &NullableProxySvcRoute{value: val, isSet: true}
}

func (v NullableProxySvcRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProxySvcRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


