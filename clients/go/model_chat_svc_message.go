/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChatSvcMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatSvcMessage{}

// ChatSvcMessage struct for ChatSvcMessage
type ChatSvcMessage struct {
	CreatedAt string `json:"createdAt"`
	// FileIds defines the file attachments the message has.
	FileIds []string `json:"fileIds,omitempty"`
	Id string `json:"id"`
	Meta map[string]interface{} `json:"meta,omitempty"`
	// Text content of the message eg. \"Hi, what's up?\"
	Text *string `json:"text,omitempty"`
	// ThreadId of the message.
	ThreadId string `json:"threadId"`
	UpdatedAt string `json:"updatedAt"`
	// UserId is the id of the user who wrote the message. For AI messages this field is empty.
	UserId *string `json:"userId,omitempty"`
}

type _ChatSvcMessage ChatSvcMessage

// NewChatSvcMessage instantiates a new ChatSvcMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatSvcMessage(createdAt string, id string, threadId string, updatedAt string) *ChatSvcMessage {
	this := ChatSvcMessage{}
	this.CreatedAt = createdAt
	this.Id = id
	this.ThreadId = threadId
	this.UpdatedAt = updatedAt
	return &this
}

// NewChatSvcMessageWithDefaults instantiates a new ChatSvcMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatSvcMessageWithDefaults() *ChatSvcMessage {
	this := ChatSvcMessage{}
	return &this
}






// HasFileIds returns a boolean if a field has been set.
func (o *ChatSvcMessage) HasFileIds() bool {
	if o != nil && !IsNil(o.FileIds) {
		return true
	}

	return false
}







// HasMeta returns a boolean if a field has been set.
func (o *ChatSvcMessage) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}




// HasText returns a boolean if a field has been set.
func (o *ChatSvcMessage) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}










// HasUserId returns a boolean if a field has been set.
func (o *ChatSvcMessage) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}


func (o ChatSvcMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatSvcMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.FileIds) {
		toSerialize["fileIds"] = o.FileIds
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	toSerialize["threadId"] = o.ThreadId
	toSerialize["updatedAt"] = o.UpdatedAt
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

func (o *ChatSvcMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"id",
		"threadId",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatSvcMessage := _ChatSvcMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChatSvcMessage)

	if err != nil {
		return err
	}

	*o = ChatSvcMessage(varChatSvcMessage)

	return err
}

type NullableChatSvcMessage struct {
	value *ChatSvcMessage
	isSet bool
}

func (v NullableChatSvcMessage) Get() *ChatSvcMessage {
	return v.value
}

func (v *NullableChatSvcMessage) Set(val *ChatSvcMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableChatSvcMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableChatSvcMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatSvcMessage(val *ChatSvcMessage) *NullableChatSvcMessage {
	return &NullableChatSvcMessage{value: val, isSet: true}
}

func (v NullableChatSvcMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatSvcMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


