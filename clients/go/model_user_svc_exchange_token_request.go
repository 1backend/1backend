/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserSvcExchangeTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcExchangeTokenRequest{}

// UserSvcExchangeTokenRequest struct for UserSvcExchangeTokenRequest
type UserSvcExchangeTokenRequest struct {
	// NewApp is the app of the new token that will be returned by this endpoint.
	NewApp string `json:"newApp"`
	// NewDevice. If not provided, the device of the original token will be used.
	NewDevice *string `json:"newDevice,omitempty"`
}

type _UserSvcExchangeTokenRequest UserSvcExchangeTokenRequest

// NewUserSvcExchangeTokenRequest instantiates a new UserSvcExchangeTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcExchangeTokenRequest(newApp string) *UserSvcExchangeTokenRequest {
	this := UserSvcExchangeTokenRequest{}
	this.NewApp = newApp
	return &this
}

// NewUserSvcExchangeTokenRequestWithDefaults instantiates a new UserSvcExchangeTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcExchangeTokenRequestWithDefaults() *UserSvcExchangeTokenRequest {
	this := UserSvcExchangeTokenRequest{}
	return &this
}






// HasNewDevice returns a boolean if a field has been set.
func (o *UserSvcExchangeTokenRequest) HasNewDevice() bool {
	if o != nil && !IsNil(o.NewDevice) {
		return true
	}

	return false
}


func (o UserSvcExchangeTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcExchangeTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["newApp"] = o.NewApp
	if !IsNil(o.NewDevice) {
		toSerialize["newDevice"] = o.NewDevice
	}
	return toSerialize, nil
}

func (o *UserSvcExchangeTokenRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"newApp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSvcExchangeTokenRequest := _UserSvcExchangeTokenRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSvcExchangeTokenRequest)

	if err != nil {
		return err
	}

	*o = UserSvcExchangeTokenRequest(varUserSvcExchangeTokenRequest)

	return err
}

type NullableUserSvcExchangeTokenRequest struct {
	value *UserSvcExchangeTokenRequest
	isSet bool
}

func (v NullableUserSvcExchangeTokenRequest) Get() *UserSvcExchangeTokenRequest {
	return v.value
}

func (v *NullableUserSvcExchangeTokenRequest) Set(val *UserSvcExchangeTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcExchangeTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcExchangeTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcExchangeTokenRequest(val *UserSvcExchangeTokenRequest) *NullableUserSvcExchangeTokenRequest {
	return &NullableUserSvcExchangeTokenRequest{value: val, isSet: true}
}

func (v NullableUserSvcExchangeTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcExchangeTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


