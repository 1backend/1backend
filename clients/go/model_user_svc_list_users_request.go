/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserSvcListUsersRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcListUsersRequest{}

// UserSvcListUsersRequest struct for UserSvcListUsersRequest
type UserSvcListUsersRequest struct {
	// AfterTime is a time in RFC3339 format. It is used to paginate the results when the `orderByField` is set to `createdAt` or `updatedAt`. The results will be returned after this time.
	AfterTime *string `json:"afterTime,omitempty"`
	// ContactId is the id of the contact the user is associated with. Will return a user list with one element if set.
	ContactId *string `json:"contactId,omitempty"`
	// Count is a flag that indicates if the count of the users should be returned.
	Count *bool `json:"count,omitempty"`
	// Ids of the users to list.
	Ids []string `json:"ids,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	Order *UserSvcOrderDirection `json:"order,omitempty"`
	OrderBy *UserSvcListUsersOrderBy `json:"orderBy,omitempty"`
	// Search term used to find users. Returns users whose slug, username, or contact ID exactly matches the term.
	Search *string `json:"search,omitempty"`
}

// NewUserSvcListUsersRequest instantiates a new UserSvcListUsersRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcListUsersRequest() *UserSvcListUsersRequest {
	this := UserSvcListUsersRequest{}
	return &this
}

// NewUserSvcListUsersRequestWithDefaults instantiates a new UserSvcListUsersRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcListUsersRequestWithDefaults() *UserSvcListUsersRequest {
	this := UserSvcListUsersRequest{}
	return &this
}



// HasAfterTime returns a boolean if a field has been set.
func (o *UserSvcListUsersRequest) HasAfterTime() bool {
	if o != nil && !IsNil(o.AfterTime) {
		return true
	}

	return false
}




// HasContactId returns a boolean if a field has been set.
func (o *UserSvcListUsersRequest) HasContactId() bool {
	if o != nil && !IsNil(o.ContactId) {
		return true
	}

	return false
}




// HasCount returns a boolean if a field has been set.
func (o *UserSvcListUsersRequest) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}




// HasIds returns a boolean if a field has been set.
func (o *UserSvcListUsersRequest) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}




// HasLimit returns a boolean if a field has been set.
func (o *UserSvcListUsersRequest) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}




// HasOrder returns a boolean if a field has been set.
func (o *UserSvcListUsersRequest) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}




// HasOrderBy returns a boolean if a field has been set.
func (o *UserSvcListUsersRequest) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}




// HasSearch returns a boolean if a field has been set.
func (o *UserSvcListUsersRequest) HasSearch() bool {
	if o != nil && !IsNil(o.Search) {
		return true
	}

	return false
}


func (o UserSvcListUsersRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcListUsersRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AfterTime) {
		toSerialize["afterTime"] = o.AfterTime
	}
	if !IsNil(o.ContactId) {
		toSerialize["contactId"] = o.ContactId
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.Search) {
		toSerialize["search"] = o.Search
	}
	return toSerialize, nil
}

type NullableUserSvcListUsersRequest struct {
	value *UserSvcListUsersRequest
	isSet bool
}

func (v NullableUserSvcListUsersRequest) Get() *UserSvcListUsersRequest {
	return v.value
}

func (v *NullableUserSvcListUsersRequest) Set(val *UserSvcListUsersRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcListUsersRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcListUsersRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcListUsersRequest(val *UserSvcListUsersRequest) *NullableUserSvcListUsersRequest {
	return &NullableUserSvcListUsersRequest{value: val, isSet: true}
}

func (v NullableUserSvcListUsersRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcListUsersRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


