/*
1Backend

AI-native microservices platform.

API version: 0.9.4
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ConfigSvcListConfigsScope the model 'ConfigSvcListConfigsScope'
type ConfigSvcListConfigsScope string

// List of config_svc.ListConfigsScope
const (
	ListConfigsScopeAll ConfigSvcListConfigsScope = "all"
	ListConfigsScopeBranch ConfigSvcListConfigsScope = "branch"
)

// All allowed values of ConfigSvcListConfigsScope enum
var AllowedConfigSvcListConfigsScopeEnumValues = []ConfigSvcListConfigsScope{
	"all",
	"branch",
}

func (v *ConfigSvcListConfigsScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConfigSvcListConfigsScope(value)
	for _, existing := range AllowedConfigSvcListConfigsScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConfigSvcListConfigsScope", value)
}

// NewConfigSvcListConfigsScopeFromValue returns a pointer to a valid ConfigSvcListConfigsScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConfigSvcListConfigsScopeFromValue(v string) (*ConfigSvcListConfigsScope, error) {
	ev := ConfigSvcListConfigsScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConfigSvcListConfigsScope: valid values are %v", v, AllowedConfigSvcListConfigsScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConfigSvcListConfigsScope) IsValid() bool {
	for _, existing := range AllowedConfigSvcListConfigsScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to config_svc.ListConfigsScope value
func (v ConfigSvcListConfigsScope) Ptr() *ConfigSvcListConfigsScope {
	return &v
}

type NullableConfigSvcListConfigsScope struct {
	value *ConfigSvcListConfigsScope
	isSet bool
}

func (v NullableConfigSvcListConfigsScope) Get() *ConfigSvcListConfigsScope {
	return v.value
}

func (v *NullableConfigSvcListConfigsScope) Set(val *ConfigSvcListConfigsScope) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigSvcListConfigsScope) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigSvcListConfigsScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigSvcListConfigsScope(val *ConfigSvcListConfigsScope) *NullableConfigSvcListConfigsScope {
	return &NullableConfigSvcListConfigsScope{value: val, isSet: true}
}

func (v NullableConfigSvcListConfigsScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigSvcListConfigsScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

