/*
OpenOrch

Testing FileSvcAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/openorch/openorch/clients/go"
)

func Test_openapi_FileSvcAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FileSvcAPIService DownloadFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FileSvcAPI.DownloadFile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileSvcAPIService GetDownload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var downloadId string

		resp, httpRes, err := apiClient.FileSvcAPI.GetDownload(context.Background(), downloadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileSvcAPIService ListDownloads", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FileSvcAPI.ListDownloads(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileSvcAPIService PauseDownload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var downloadId string

		resp, httpRes, err := apiClient.FileSvcAPI.PauseDownload(context.Background(), downloadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
