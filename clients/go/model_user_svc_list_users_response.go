/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserSvcListUsersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcListUsersResponse{}

// UserSvcListUsersResponse struct for UserSvcListUsersResponse
type UserSvcListUsersResponse struct {
	After *string `json:"after,omitempty"`
	Count *int32 `json:"count,omitempty"`
	Users []UserSvcUserRecord `json:"users,omitempty"`
}

// NewUserSvcListUsersResponse instantiates a new UserSvcListUsersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcListUsersResponse() *UserSvcListUsersResponse {
	this := UserSvcListUsersResponse{}
	return &this
}

// NewUserSvcListUsersResponseWithDefaults instantiates a new UserSvcListUsersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcListUsersResponseWithDefaults() *UserSvcListUsersResponse {
	this := UserSvcListUsersResponse{}
	return &this
}



// HasAfter returns a boolean if a field has been set.
func (o *UserSvcListUsersResponse) HasAfter() bool {
	if o != nil && !IsNil(o.After) {
		return true
	}

	return false
}




// HasCount returns a boolean if a field has been set.
func (o *UserSvcListUsersResponse) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}




// HasUsers returns a boolean if a field has been set.
func (o *UserSvcListUsersResponse) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}


func (o UserSvcListUsersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcListUsersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.After) {
		toSerialize["after"] = o.After
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableUserSvcListUsersResponse struct {
	value *UserSvcListUsersResponse
	isSet bool
}

func (v NullableUserSvcListUsersResponse) Get() *UserSvcListUsersResponse {
	return v.value
}

func (v *NullableUserSvcListUsersResponse) Set(val *UserSvcListUsersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcListUsersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcListUsersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcListUsersResponse(val *UserSvcListUsersResponse) *NullableUserSvcListUsersResponse {
	return &NullableUserSvcListUsersResponse{value: val, isSet: true}
}

func (v NullableUserSvcListUsersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcListUsersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


