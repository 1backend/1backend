/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigSvcSaveConfigRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigSvcSaveConfigRequest{}

// ConfigSvcSaveConfigRequest struct for ConfigSvcSaveConfigRequest
type ConfigSvcSaveConfigRequest struct {
	// App can only be specified by users who have the `config-svc:config:edit-on-behalf` permission, who are typically admins.  If not specified, the config will be saved for the current app of the user's token.
	App *string `json:"app,omitempty"`
	Data map[string]interface{} `json:"data,omitempty"`
	DataJson *string `json:"dataJson,omitempty"`
	// Key is the slug of the owner to save the config for. Only user with the `config-svc:config:edit-on-behalf` can specify this. For everyone else, it is automatically set to the slug of the caller user.
	Key *string `json:"key,omitempty"`
}

// NewConfigSvcSaveConfigRequest instantiates a new ConfigSvcSaveConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigSvcSaveConfigRequest() *ConfigSvcSaveConfigRequest {
	this := ConfigSvcSaveConfigRequest{}
	return &this
}

// NewConfigSvcSaveConfigRequestWithDefaults instantiates a new ConfigSvcSaveConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigSvcSaveConfigRequestWithDefaults() *ConfigSvcSaveConfigRequest {
	this := ConfigSvcSaveConfigRequest{}
	return &this
}



// HasApp returns a boolean if a field has been set.
func (o *ConfigSvcSaveConfigRequest) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}




// HasData returns a boolean if a field has been set.
func (o *ConfigSvcSaveConfigRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}




// HasDataJson returns a boolean if a field has been set.
func (o *ConfigSvcSaveConfigRequest) HasDataJson() bool {
	if o != nil && !IsNil(o.DataJson) {
		return true
	}

	return false
}




// HasKey returns a boolean if a field has been set.
func (o *ConfigSvcSaveConfigRequest) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}


func (o ConfigSvcSaveConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigSvcSaveConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.DataJson) {
		toSerialize["dataJson"] = o.DataJson
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	return toSerialize, nil
}

type NullableConfigSvcSaveConfigRequest struct {
	value *ConfigSvcSaveConfigRequest
	isSet bool
}

func (v NullableConfigSvcSaveConfigRequest) Get() *ConfigSvcSaveConfigRequest {
	return v.value
}

func (v *NullableConfigSvcSaveConfigRequest) Set(val *ConfigSvcSaveConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigSvcSaveConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigSvcSaveConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigSvcSaveConfigRequest(val *ConfigSvcSaveConfigRequest) *NullableConfigSvcSaveConfigRequest {
	return &NullableConfigSvcSaveConfigRequest{value: val, isSet: true}
}

func (v NullableConfigSvcSaveConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigSvcSaveConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


