/*
1Backend

AI-native microservices platform.

API version: 0.4.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserSvcHasPermissionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcHasPermissionResponse{}

// UserSvcHasPermissionResponse struct for UserSvcHasPermissionResponse
type UserSvcHasPermissionResponse struct {
	Authorized *bool `json:"authorized,omitempty"`
	User *UserSvcUser `json:"user,omitempty"`
}

// NewUserSvcHasPermissionResponse instantiates a new UserSvcHasPermissionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcHasPermissionResponse() *UserSvcHasPermissionResponse {
	this := UserSvcHasPermissionResponse{}
	return &this
}

// NewUserSvcHasPermissionResponseWithDefaults instantiates a new UserSvcHasPermissionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcHasPermissionResponseWithDefaults() *UserSvcHasPermissionResponse {
	this := UserSvcHasPermissionResponse{}
	return &this
}

// GetAuthorized returns the Authorized field value if set, zero value otherwise.
func (o *UserSvcHasPermissionResponse) GetAuthorized() bool {
	if o == nil || IsNil(o.Authorized) {
		var ret bool
		return ret
	}
	return *o.Authorized
}

// GetAuthorizedOk returns a tuple with the Authorized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSvcHasPermissionResponse) GetAuthorizedOk() (*bool, bool) {
	if o == nil || IsNil(o.Authorized) {
		return nil, false
	}
	return o.Authorized, true
}

// HasAuthorized returns a boolean if a field has been set.
func (o *UserSvcHasPermissionResponse) HasAuthorized() bool {
	if o != nil && !IsNil(o.Authorized) {
		return true
	}

	return false
}

// SetAuthorized gets a reference to the given bool and assigns it to the Authorized field.
func (o *UserSvcHasPermissionResponse) SetAuthorized(v bool) {
	o.Authorized = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *UserSvcHasPermissionResponse) GetUser() UserSvcUser {
	if o == nil || IsNil(o.User) {
		var ret UserSvcUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSvcHasPermissionResponse) GetUserOk() (*UserSvcUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *UserSvcHasPermissionResponse) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserSvcUser and assigns it to the User field.
func (o *UserSvcHasPermissionResponse) SetUser(v UserSvcUser) {
	o.User = &v
}

func (o UserSvcHasPermissionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcHasPermissionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Authorized) {
		toSerialize["authorized"] = o.Authorized
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableUserSvcHasPermissionResponse struct {
	value *UserSvcHasPermissionResponse
	isSet bool
}

func (v NullableUserSvcHasPermissionResponse) Get() *UserSvcHasPermissionResponse {
	return v.value
}

func (v *NullableUserSvcHasPermissionResponse) Set(val *UserSvcHasPermissionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcHasPermissionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcHasPermissionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcHasPermissionResponse(val *UserSvcHasPermissionResponse) *NullableUserSvcHasPermissionResponse {
	return &NullableUserSvcHasPermissionResponse{value: val, isSet: true}
}

func (v NullableUserSvcHasPermissionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcHasPermissionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


