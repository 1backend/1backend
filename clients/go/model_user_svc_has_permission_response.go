/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserSvcHasPermissionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcHasPermissionResponse{}

// UserSvcHasPermissionResponse struct for UserSvcHasPermissionResponse
type UserSvcHasPermissionResponse struct {
	App *string `json:"app,omitempty"`
	Authorized bool `json:"authorized"`
	Until string `json:"until"`
	User UserSvcUser `json:"user"`
}

type _UserSvcHasPermissionResponse UserSvcHasPermissionResponse

// NewUserSvcHasPermissionResponse instantiates a new UserSvcHasPermissionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcHasPermissionResponse(authorized bool, until string, user UserSvcUser) *UserSvcHasPermissionResponse {
	this := UserSvcHasPermissionResponse{}
	this.Authorized = authorized
	this.Until = until
	this.User = user
	return &this
}

// NewUserSvcHasPermissionResponseWithDefaults instantiates a new UserSvcHasPermissionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcHasPermissionResponseWithDefaults() *UserSvcHasPermissionResponse {
	this := UserSvcHasPermissionResponse{}
	return &this
}



// HasApp returns a boolean if a field has been set.
func (o *UserSvcHasPermissionResponse) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}











func (o UserSvcHasPermissionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcHasPermissionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	toSerialize["authorized"] = o.Authorized
	toSerialize["until"] = o.Until
	toSerialize["user"] = o.User
	return toSerialize, nil
}

func (o *UserSvcHasPermissionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authorized",
		"until",
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSvcHasPermissionResponse := _UserSvcHasPermissionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSvcHasPermissionResponse)

	if err != nil {
		return err
	}

	*o = UserSvcHasPermissionResponse(varUserSvcHasPermissionResponse)

	return err
}

type NullableUserSvcHasPermissionResponse struct {
	value *UserSvcHasPermissionResponse
	isSet bool
}

func (v NullableUserSvcHasPermissionResponse) Get() *UserSvcHasPermissionResponse {
	return v.value
}

func (v *NullableUserSvcHasPermissionResponse) Set(val *UserSvcHasPermissionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcHasPermissionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcHasPermissionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcHasPermissionResponse(val *UserSvcHasPermissionResponse) *NullableUserSvcHasPermissionResponse {
	return &NullableUserSvcHasPermissionResponse{value: val, isSet: true}
}

func (v NullableUserSvcHasPermissionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcHasPermissionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


