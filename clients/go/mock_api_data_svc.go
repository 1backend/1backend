// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package openapi is a generated GoMock package.
package openapi

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDataSvcAPI is a mock of DataSvcAPI interface.
type MockDataSvcAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDataSvcAPIMockRecorder
	isgomock struct{}
}

// MockDataSvcAPIMockRecorder is the mock recorder for MockDataSvcAPI.
type MockDataSvcAPIMockRecorder struct {
	mock *MockDataSvcAPI
}

// NewMockDataSvcAPI creates a new mock instance.
func NewMockDataSvcAPI(ctrl *gomock.Controller) *MockDataSvcAPI {
	mock := &MockDataSvcAPI{ctrl: ctrl}
	mock.recorder = &MockDataSvcAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSvcAPI) EXPECT() *MockDataSvcAPIMockRecorder {
	return m.recorder
}

// CreateObject mocks base method.
func (m *MockDataSvcAPI) CreateObject(ctx context.Context) ApiCreateObjectRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", ctx)
	ret0, _ := ret[0].(ApiCreateObjectRequest)
	return ret0
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockDataSvcAPIMockRecorder) CreateObject(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockDataSvcAPI)(nil).CreateObject), ctx)
}

// CreateObjectExecute mocks base method.
func (m *MockDataSvcAPI) CreateObjectExecute(r ApiCreateObjectRequest) (*DataSvcCreateObjectResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectExecute", r)
	ret0, _ := ret[0].(*DataSvcCreateObjectResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateObjectExecute indicates an expected call of CreateObjectExecute.
func (mr *MockDataSvcAPIMockRecorder) CreateObjectExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectExecute", reflect.TypeOf((*MockDataSvcAPI)(nil).CreateObjectExecute), r)
}

// DeleteObjects mocks base method.
func (m *MockDataSvcAPI) DeleteObjects(ctx context.Context) ApiDeleteObjectsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjects", ctx)
	ret0, _ := ret[0].(ApiDeleteObjectsRequest)
	return ret0
}

// DeleteObjects indicates an expected call of DeleteObjects.
func (mr *MockDataSvcAPIMockRecorder) DeleteObjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjects", reflect.TypeOf((*MockDataSvcAPI)(nil).DeleteObjects), ctx)
}

// DeleteObjectsExecute mocks base method.
func (m *MockDataSvcAPI) DeleteObjectsExecute(r ApiDeleteObjectsRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectsExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteObjectsExecute indicates an expected call of DeleteObjectsExecute.
func (mr *MockDataSvcAPIMockRecorder) DeleteObjectsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectsExecute", reflect.TypeOf((*MockDataSvcAPI)(nil).DeleteObjectsExecute), r)
}

// QueryObjects mocks base method.
func (m *MockDataSvcAPI) QueryObjects(ctx context.Context) ApiQueryObjectsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryObjects", ctx)
	ret0, _ := ret[0].(ApiQueryObjectsRequest)
	return ret0
}

// QueryObjects indicates an expected call of QueryObjects.
func (mr *MockDataSvcAPIMockRecorder) QueryObjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryObjects", reflect.TypeOf((*MockDataSvcAPI)(nil).QueryObjects), ctx)
}

// QueryObjectsExecute mocks base method.
func (m *MockDataSvcAPI) QueryObjectsExecute(r ApiQueryObjectsRequest) (*DataSvcQueryResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryObjectsExecute", r)
	ret0, _ := ret[0].(*DataSvcQueryResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryObjectsExecute indicates an expected call of QueryObjectsExecute.
func (mr *MockDataSvcAPIMockRecorder) QueryObjectsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryObjectsExecute", reflect.TypeOf((*MockDataSvcAPI)(nil).QueryObjectsExecute), r)
}

// UpdateObjects mocks base method.
func (m *MockDataSvcAPI) UpdateObjects(ctx context.Context) ApiUpdateObjectsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjects", ctx)
	ret0, _ := ret[0].(ApiUpdateObjectsRequest)
	return ret0
}

// UpdateObjects indicates an expected call of UpdateObjects.
func (mr *MockDataSvcAPIMockRecorder) UpdateObjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjects", reflect.TypeOf((*MockDataSvcAPI)(nil).UpdateObjects), ctx)
}

// UpdateObjectsExecute mocks base method.
func (m *MockDataSvcAPI) UpdateObjectsExecute(r ApiUpdateObjectsRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectsExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateObjectsExecute indicates an expected call of UpdateObjectsExecute.
func (mr *MockDataSvcAPIMockRecorder) UpdateObjectsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectsExecute", reflect.TypeOf((*MockDataSvcAPI)(nil).UpdateObjectsExecute), r)
}

// UpsertObject mocks base method.
func (m *MockDataSvcAPI) UpsertObject(ctx context.Context, objectId string) ApiUpsertObjectRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertObject", ctx, objectId)
	ret0, _ := ret[0].(ApiUpsertObjectRequest)
	return ret0
}

// UpsertObject indicates an expected call of UpsertObject.
func (mr *MockDataSvcAPIMockRecorder) UpsertObject(ctx, objectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertObject", reflect.TypeOf((*MockDataSvcAPI)(nil).UpsertObject), ctx, objectId)
}

// UpsertObjectExecute mocks base method.
func (m *MockDataSvcAPI) UpsertObjectExecute(r ApiUpsertObjectRequest) (*DataSvcUpsertObjectResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertObjectExecute", r)
	ret0, _ := ret[0].(*DataSvcUpsertObjectResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertObjectExecute indicates an expected call of UpsertObjectExecute.
func (mr *MockDataSvcAPIMockRecorder) UpsertObjectExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertObjectExecute", reflect.TypeOf((*MockDataSvcAPI)(nil).UpsertObjectExecute), r)
}

// UpsertObjects mocks base method.
func (m *MockDataSvcAPI) UpsertObjects(ctx context.Context) ApiUpsertObjectsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertObjects", ctx)
	ret0, _ := ret[0].(ApiUpsertObjectsRequest)
	return ret0
}

// UpsertObjects indicates an expected call of UpsertObjects.
func (mr *MockDataSvcAPIMockRecorder) UpsertObjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertObjects", reflect.TypeOf((*MockDataSvcAPI)(nil).UpsertObjects), ctx)
}

// UpsertObjectsExecute mocks base method.
func (m *MockDataSvcAPI) UpsertObjectsExecute(r ApiUpsertObjectsRequest) (*DataSvcUpsertObjectResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertObjectsExecute", r)
	ret0, _ := ret[0].(*DataSvcUpsertObjectResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertObjectsExecute indicates an expected call of UpsertObjectsExecute.
func (mr *MockDataSvcAPIMockRecorder) UpsertObjectsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertObjectsExecute", reflect.TypeOf((*MockDataSvcAPI)(nil).UpsertObjectsExecute), r)
}
