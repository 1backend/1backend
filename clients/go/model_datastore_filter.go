/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatastoreFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreFilter{}

// DatastoreFilter struct for DatastoreFilter
type DatastoreFilter struct {
	Fields []string `json:"fields,omitempty"`
	Op *DatastoreOp `json:"op,omitempty"`
	// SubFilters is used for operations like OR where multiple filters are combined.
	SubFilters []DatastoreFilter `json:"subFilters,omitempty"`
	// @openapi-any-array
	Values []any `json:"values,omitempty"`
}

// NewDatastoreFilter instantiates a new DatastoreFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreFilter() *DatastoreFilter {
	this := DatastoreFilter{}
	return &this
}

// NewDatastoreFilterWithDefaults instantiates a new DatastoreFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreFilterWithDefaults() *DatastoreFilter {
	this := DatastoreFilter{}
	return &this
}



// HasFields returns a boolean if a field has been set.
func (o *DatastoreFilter) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}




// HasOp returns a boolean if a field has been set.
func (o *DatastoreFilter) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}




// HasSubFilters returns a boolean if a field has been set.
func (o *DatastoreFilter) HasSubFilters() bool {
	if o != nil && !IsNil(o.SubFilters) {
		return true
	}

	return false
}




// HasValues returns a boolean if a field has been set.
func (o *DatastoreFilter) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}


func (o DatastoreFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.SubFilters) {
		toSerialize["subFilters"] = o.SubFilters
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableDatastoreFilter struct {
	value *DatastoreFilter
	isSet bool
}

func (v NullableDatastoreFilter) Get() *DatastoreFilter {
	return v.value
}

func (v *NullableDatastoreFilter) Set(val *DatastoreFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreFilter(val *DatastoreFilter) *NullableDatastoreFilter {
	return &NullableDatastoreFilter{value: val, isSet: true}
}

func (v NullableDatastoreFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


