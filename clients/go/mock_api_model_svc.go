// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package openapi is a generated GoMock package.
package openapi

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockModelSvcAPI is a mock of ModelSvcAPI interface.
type MockModelSvcAPI struct {
	ctrl     *gomock.Controller
	recorder *MockModelSvcAPIMockRecorder
	isgomock struct{}
}

// MockModelSvcAPIMockRecorder is the mock recorder for MockModelSvcAPI.
type MockModelSvcAPIMockRecorder struct {
	mock *MockModelSvcAPI
}

// NewMockModelSvcAPI creates a new mock instance.
func NewMockModelSvcAPI(ctrl *gomock.Controller) *MockModelSvcAPI {
	mock := &MockModelSvcAPI{ctrl: ctrl}
	mock.recorder = &MockModelSvcAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelSvcAPI) EXPECT() *MockModelSvcAPIMockRecorder {
	return m.recorder
}

// GetDefaultModelStatus mocks base method.
func (m *MockModelSvcAPI) GetDefaultModelStatus(ctx context.Context) ApiGetDefaultModelStatusRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultModelStatus", ctx)
	ret0, _ := ret[0].(ApiGetDefaultModelStatusRequest)
	return ret0
}

// GetDefaultModelStatus indicates an expected call of GetDefaultModelStatus.
func (mr *MockModelSvcAPIMockRecorder) GetDefaultModelStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultModelStatus", reflect.TypeOf((*MockModelSvcAPI)(nil).GetDefaultModelStatus), ctx)
}

// GetDefaultModelStatusExecute mocks base method.
func (m *MockModelSvcAPI) GetDefaultModelStatusExecute(r ApiGetDefaultModelStatusRequest) (*ModelSvcStatusResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultModelStatusExecute", r)
	ret0, _ := ret[0].(*ModelSvcStatusResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDefaultModelStatusExecute indicates an expected call of GetDefaultModelStatusExecute.
func (mr *MockModelSvcAPIMockRecorder) GetDefaultModelStatusExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultModelStatusExecute", reflect.TypeOf((*MockModelSvcAPI)(nil).GetDefaultModelStatusExecute), r)
}

// GetModel mocks base method.
func (m *MockModelSvcAPI) GetModel(ctx context.Context, modelId string) ApiGetModelRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", ctx, modelId)
	ret0, _ := ret[0].(ApiGetModelRequest)
	return ret0
}

// GetModel indicates an expected call of GetModel.
func (mr *MockModelSvcAPIMockRecorder) GetModel(ctx, modelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockModelSvcAPI)(nil).GetModel), ctx, modelId)
}

// GetModelExecute mocks base method.
func (m *MockModelSvcAPI) GetModelExecute(r ApiGetModelRequest) (*ModelSvcGetModelResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelExecute", r)
	ret0, _ := ret[0].(*ModelSvcGetModelResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModelExecute indicates an expected call of GetModelExecute.
func (mr *MockModelSvcAPIMockRecorder) GetModelExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelExecute", reflect.TypeOf((*MockModelSvcAPI)(nil).GetModelExecute), r)
}

// GetModelStatus mocks base method.
func (m *MockModelSvcAPI) GetModelStatus(ctx context.Context, modelId string) ApiGetModelStatusRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelStatus", ctx, modelId)
	ret0, _ := ret[0].(ApiGetModelStatusRequest)
	return ret0
}

// GetModelStatus indicates an expected call of GetModelStatus.
func (mr *MockModelSvcAPIMockRecorder) GetModelStatus(ctx, modelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelStatus", reflect.TypeOf((*MockModelSvcAPI)(nil).GetModelStatus), ctx, modelId)
}

// GetModelStatusExecute mocks base method.
func (m *MockModelSvcAPI) GetModelStatusExecute(r ApiGetModelStatusRequest) (*ModelSvcStatusResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelStatusExecute", r)
	ret0, _ := ret[0].(*ModelSvcStatusResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModelStatusExecute indicates an expected call of GetModelStatusExecute.
func (mr *MockModelSvcAPIMockRecorder) GetModelStatusExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelStatusExecute", reflect.TypeOf((*MockModelSvcAPI)(nil).GetModelStatusExecute), r)
}

// ListModels mocks base method.
func (m *MockModelSvcAPI) ListModels(ctx context.Context) ApiListModelsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", ctx)
	ret0, _ := ret[0].(ApiListModelsRequest)
	return ret0
}

// ListModels indicates an expected call of ListModels.
func (mr *MockModelSvcAPIMockRecorder) ListModels(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockModelSvcAPI)(nil).ListModels), ctx)
}

// ListModelsExecute mocks base method.
func (m *MockModelSvcAPI) ListModelsExecute(r ApiListModelsRequest) (*ModelSvcListModelsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelsExecute", r)
	ret0, _ := ret[0].(*ModelSvcListModelsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListModelsExecute indicates an expected call of ListModelsExecute.
func (mr *MockModelSvcAPIMockRecorder) ListModelsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsExecute", reflect.TypeOf((*MockModelSvcAPI)(nil).ListModelsExecute), r)
}

// ListPlatforms mocks base method.
func (m *MockModelSvcAPI) ListPlatforms(ctx context.Context) ApiListPlatformsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlatforms", ctx)
	ret0, _ := ret[0].(ApiListPlatformsRequest)
	return ret0
}

// ListPlatforms indicates an expected call of ListPlatforms.
func (mr *MockModelSvcAPIMockRecorder) ListPlatforms(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlatforms", reflect.TypeOf((*MockModelSvcAPI)(nil).ListPlatforms), ctx)
}

// ListPlatformsExecute mocks base method.
func (m *MockModelSvcAPI) ListPlatformsExecute(r ApiListPlatformsRequest) (*ModelSvcListPlatformsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlatformsExecute", r)
	ret0, _ := ret[0].(*ModelSvcListPlatformsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPlatformsExecute indicates an expected call of ListPlatformsExecute.
func (mr *MockModelSvcAPIMockRecorder) ListPlatformsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlatformsExecute", reflect.TypeOf((*MockModelSvcAPI)(nil).ListPlatformsExecute), r)
}

// MakeDefault mocks base method.
func (m *MockModelSvcAPI) MakeDefault(ctx context.Context, modelId string) ApiMakeDefaultRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDefault", ctx, modelId)
	ret0, _ := ret[0].(ApiMakeDefaultRequest)
	return ret0
}

// MakeDefault indicates an expected call of MakeDefault.
func (mr *MockModelSvcAPIMockRecorder) MakeDefault(ctx, modelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDefault", reflect.TypeOf((*MockModelSvcAPI)(nil).MakeDefault), ctx, modelId)
}

// MakeDefaultExecute mocks base method.
func (m *MockModelSvcAPI) MakeDefaultExecute(r ApiMakeDefaultRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDefaultExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeDefaultExecute indicates an expected call of MakeDefaultExecute.
func (mr *MockModelSvcAPIMockRecorder) MakeDefaultExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDefaultExecute", reflect.TypeOf((*MockModelSvcAPI)(nil).MakeDefaultExecute), r)
}

// StartDefaultModel mocks base method.
func (m *MockModelSvcAPI) StartDefaultModel(ctx context.Context) ApiStartDefaultModelRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDefaultModel", ctx)
	ret0, _ := ret[0].(ApiStartDefaultModelRequest)
	return ret0
}

// StartDefaultModel indicates an expected call of StartDefaultModel.
func (mr *MockModelSvcAPIMockRecorder) StartDefaultModel(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDefaultModel", reflect.TypeOf((*MockModelSvcAPI)(nil).StartDefaultModel), ctx)
}

// StartDefaultModelExecute mocks base method.
func (m *MockModelSvcAPI) StartDefaultModelExecute(r ApiStartDefaultModelRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDefaultModelExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartDefaultModelExecute indicates an expected call of StartDefaultModelExecute.
func (mr *MockModelSvcAPIMockRecorder) StartDefaultModelExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDefaultModelExecute", reflect.TypeOf((*MockModelSvcAPI)(nil).StartDefaultModelExecute), r)
}

// StartModel mocks base method.
func (m *MockModelSvcAPI) StartModel(ctx context.Context, modelId string) ApiStartModelRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartModel", ctx, modelId)
	ret0, _ := ret[0].(ApiStartModelRequest)
	return ret0
}

// StartModel indicates an expected call of StartModel.
func (mr *MockModelSvcAPIMockRecorder) StartModel(ctx, modelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartModel", reflect.TypeOf((*MockModelSvcAPI)(nil).StartModel), ctx, modelId)
}

// StartModelExecute mocks base method.
func (m *MockModelSvcAPI) StartModelExecute(r ApiStartModelRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartModelExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartModelExecute indicates an expected call of StartModelExecute.
func (mr *MockModelSvcAPIMockRecorder) StartModelExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartModelExecute", reflect.TypeOf((*MockModelSvcAPI)(nil).StartModelExecute), r)
}
