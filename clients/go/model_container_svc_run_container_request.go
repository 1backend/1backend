/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContainerSvcRunContainerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerSvcRunContainerRequest{}

// ContainerSvcRunContainerRequest struct for ContainerSvcRunContainerRequest
type ContainerSvcRunContainerRequest struct {
	// Assets maps environment variable names to file URLs. Example: {\"MODEL\": \"https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/resolve/main/mistral-7b-instruct-v0.2.Q2_K.gguf\"} These files are downloaded by the File Svc and mounted in the container. The environment variable `MODEL` will point to the local file path in the container.
	Assets []ContainerSvcAsset `json:"assets,omitempty"`
	// Capabilities define additional runtime features, such as GPU support.
	Capabilities *ContainerSvcCapabilities `json:"capabilities,omitempty"`
	// Envs are environment variables set within the container.
	Envs []ContainerSvcEnvVar `json:"envs,omitempty"`
	// Hash is a unique identifier for the container
	Hash *string `json:"hash,omitempty"`
	// Image is the Docker image to use for the container
	Image string `json:"image"`
	// Keeps are paths that persist across container restarts. They function like mounts or volumes, but their external storage location is irrelevant.
	Keeps []ContainerSvcKeep `json:"keeps,omitempty"`
	// Labels are metadata tags assigned to the container.
	Labels []ContainerSvcLabel `json:"labels,omitempty"`
	// Names are the human-readable aliases assigned to the container.
	Names []string `json:"names,omitempty"`
	// Ports maps host ports (keys) to container ports (values).
	Ports []ContainerSvcPortMapping `json:"ports,omitempty"`
}

type _ContainerSvcRunContainerRequest ContainerSvcRunContainerRequest

// NewContainerSvcRunContainerRequest instantiates a new ContainerSvcRunContainerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerSvcRunContainerRequest(image string) *ContainerSvcRunContainerRequest {
	this := ContainerSvcRunContainerRequest{}
	this.Image = image
	return &this
}

// NewContainerSvcRunContainerRequestWithDefaults instantiates a new ContainerSvcRunContainerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerSvcRunContainerRequestWithDefaults() *ContainerSvcRunContainerRequest {
	this := ContainerSvcRunContainerRequest{}
	return &this
}



// HasAssets returns a boolean if a field has been set.
func (o *ContainerSvcRunContainerRequest) HasAssets() bool {
	if o != nil && !IsNil(o.Assets) {
		return true
	}

	return false
}




// HasCapabilities returns a boolean if a field has been set.
func (o *ContainerSvcRunContainerRequest) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}




// HasEnvs returns a boolean if a field has been set.
func (o *ContainerSvcRunContainerRequest) HasEnvs() bool {
	if o != nil && !IsNil(o.Envs) {
		return true
	}

	return false
}




// HasHash returns a boolean if a field has been set.
func (o *ContainerSvcRunContainerRequest) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}







// HasKeeps returns a boolean if a field has been set.
func (o *ContainerSvcRunContainerRequest) HasKeeps() bool {
	if o != nil && !IsNil(o.Keeps) {
		return true
	}

	return false
}




// HasLabels returns a boolean if a field has been set.
func (o *ContainerSvcRunContainerRequest) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}




// HasNames returns a boolean if a field has been set.
func (o *ContainerSvcRunContainerRequest) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}




// HasPorts returns a boolean if a field has been set.
func (o *ContainerSvcRunContainerRequest) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}


func (o ContainerSvcRunContainerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerSvcRunContainerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assets) {
		toSerialize["assets"] = o.Assets
	}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	if !IsNil(o.Envs) {
		toSerialize["envs"] = o.Envs
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	toSerialize["image"] = o.Image
	if !IsNil(o.Keeps) {
		toSerialize["keeps"] = o.Keeps
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	return toSerialize, nil
}

func (o *ContainerSvcRunContainerRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainerSvcRunContainerRequest := _ContainerSvcRunContainerRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContainerSvcRunContainerRequest)

	if err != nil {
		return err
	}

	*o = ContainerSvcRunContainerRequest(varContainerSvcRunContainerRequest)

	return err
}

type NullableContainerSvcRunContainerRequest struct {
	value *ContainerSvcRunContainerRequest
	isSet bool
}

func (v NullableContainerSvcRunContainerRequest) Get() *ContainerSvcRunContainerRequest {
	return v.value
}

func (v *NullableContainerSvcRunContainerRequest) Set(val *ContainerSvcRunContainerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerSvcRunContainerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerSvcRunContainerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerSvcRunContainerRequest(val *ContainerSvcRunContainerRequest) *NullableContainerSvcRunContainerRequest {
	return &NullableContainerSvcRunContainerRequest{value: val, isSet: true}
}

func (v NullableContainerSvcRunContainerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerSvcRunContainerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


