/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ImageSvcErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageSvcErrorResponse{}

// ImageSvcErrorResponse struct for ImageSvcErrorResponse
type ImageSvcErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// NewImageSvcErrorResponse instantiates a new ImageSvcErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageSvcErrorResponse() *ImageSvcErrorResponse {
	this := ImageSvcErrorResponse{}
	return &this
}

// NewImageSvcErrorResponseWithDefaults instantiates a new ImageSvcErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageSvcErrorResponseWithDefaults() *ImageSvcErrorResponse {
	this := ImageSvcErrorResponse{}
	return &this
}



// HasError returns a boolean if a field has been set.
func (o *ImageSvcErrorResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}


func (o ImageSvcErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageSvcErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableImageSvcErrorResponse struct {
	value *ImageSvcErrorResponse
	isSet bool
}

func (v NullableImageSvcErrorResponse) Get() *ImageSvcErrorResponse {
	return v.value
}

func (v *NullableImageSvcErrorResponse) Set(val *ImageSvcErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableImageSvcErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableImageSvcErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageSvcErrorResponse(val *ImageSvcErrorResponse) *NullableImageSvcErrorResponse {
	return &NullableImageSvcErrorResponse{value: val, isSet: true}
}

func (v NullableImageSvcErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageSvcErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


