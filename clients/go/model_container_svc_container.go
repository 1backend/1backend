/*
1Backend

AI-native microservices platform.

API version: 0.8.0-rc1
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContainerSvcContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerSvcContainer{}

// ContainerSvcContainer struct for ContainerSvcContainer
type ContainerSvcContainer struct {
	// Assets maps environment variable names to file URLs. Example: {\"MODEL\": \"https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/resolve/main/mistral-7b-instruct-v0.2.Q2_K.gguf\"} These files are downloaded by the File Svc and mounted in the container. The environment variable `MODEL` will point to the local file path in the container.
	Assets []ContainerSvcAsset `json:"assets,omitempty"`
	// Capabilities define additional runtime features, such as GPU support.
	Capabilities *ContainerSvcCapabilities `json:"capabilities,omitempty"`
	// Envs are environment variables set within the container.
	Envs []ContainerSvcEnvVar `json:"envs,omitempty"`
	// Hash is a unique identifier associated with the container.
	Hash *string `json:"hash,omitempty"`
	// Id is the unique identifier for the container instance.
	Id *string `json:"id,omitempty"`
	// Image is the Docker image used to create the container.
	Image *string `json:"image,omitempty"`
	// Keeps are paths that persist across container restarts. They function like mounts or volumes, but their external storage location is irrelevant.
	Keeps []ContainerSvcKeep `json:"keeps,omitempty"`
	// Labels are metadata tags assigned to the container.
	Labels []ContainerSvcLabel `json:"labels,omitempty"`
	// Names are the human-readable aliases assigned to the container.
	Names []string `json:"names,omitempty"`
	// Network contains networking-related information for the container.
	Network *ContainerSvcNetwork `json:"network,omitempty"`
	// Node Id Please see the documentation for the envar OB_NODE_ID
	NodeId *string `json:"nodeId,omitempty"`
	// Ports maps host ports (keys) to container ports (values).
	Ports []ContainerSvcPortMapping `json:"ports,omitempty"`
	// Resources defines CPU, memory, and disk constraints for the container.
	Resources *ContainerSvcResources `json:"resources,omitempty"`
	// Runtime specifies the container runtime (e.g., Docker, containerd, etc.).
	Runtime *string `json:"runtime,omitempty"`
	// Status indicates the current state of the container (e.g., running, stopped).
	Status *string `json:"status,omitempty"`
	// Volumes mounted by the container.
	Volumes []ContainerSvcVolume `json:"volumes,omitempty"`
}

// NewContainerSvcContainer instantiates a new ContainerSvcContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerSvcContainer() *ContainerSvcContainer {
	this := ContainerSvcContainer{}
	return &this
}

// NewContainerSvcContainerWithDefaults instantiates a new ContainerSvcContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerSvcContainerWithDefaults() *ContainerSvcContainer {
	this := ContainerSvcContainer{}
	return &this
}



// HasAssets returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasAssets() bool {
	if o != nil && !IsNil(o.Assets) {
		return true
	}

	return false
}




// HasCapabilities returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}




// HasEnvs returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasEnvs() bool {
	if o != nil && !IsNil(o.Envs) {
		return true
	}

	return false
}




// HasHash returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}




// HasId returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}




// HasImage returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}




// HasKeeps returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasKeeps() bool {
	if o != nil && !IsNil(o.Keeps) {
		return true
	}

	return false
}




// HasLabels returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}




// HasNames returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}




// HasNetwork returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}




// HasNodeId returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}




// HasPorts returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}




// HasResources returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}




// HasRuntime returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasRuntime() bool {
	if o != nil && !IsNil(o.Runtime) {
		return true
	}

	return false
}




// HasStatus returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}




// HasVolumes returns a boolean if a field has been set.
func (o *ContainerSvcContainer) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}


func (o ContainerSvcContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerSvcContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assets) {
		toSerialize["assets"] = o.Assets
	}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	if !IsNil(o.Envs) {
		toSerialize["envs"] = o.Envs
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Keeps) {
		toSerialize["keeps"] = o.Keeps
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.Runtime) {
		toSerialize["runtime"] = o.Runtime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	return toSerialize, nil
}

type NullableContainerSvcContainer struct {
	value *ContainerSvcContainer
	isSet bool
}

func (v NullableContainerSvcContainer) Get() *ContainerSvcContainer {
	return v.value
}

func (v *NullableContainerSvcContainer) Set(val *ContainerSvcContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerSvcContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerSvcContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerSvcContainer(val *ContainerSvcContainer) *NullableContainerSvcContainer {
	return &NullableContainerSvcContainer{value: val, isSet: true}
}

func (v NullableContainerSvcContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerSvcContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


