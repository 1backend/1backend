/*
1Backend

AI-native microservices platform.

API version: 0.4.0
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserSvcHasPermissionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcHasPermissionRequest{}

// UserSvcHasPermissionRequest struct for UserSvcHasPermissionRequest
type UserSvcHasPermissionRequest struct {
	ContactsPermited []string `json:"contactsPermited,omitempty"`
	PermittedSlugs []string `json:"permittedSlugs,omitempty"`
}

// NewUserSvcHasPermissionRequest instantiates a new UserSvcHasPermissionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcHasPermissionRequest() *UserSvcHasPermissionRequest {
	this := UserSvcHasPermissionRequest{}
	return &this
}

// NewUserSvcHasPermissionRequestWithDefaults instantiates a new UserSvcHasPermissionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcHasPermissionRequestWithDefaults() *UserSvcHasPermissionRequest {
	this := UserSvcHasPermissionRequest{}
	return &this
}

// GetContactsPermited returns the ContactsPermited field value if set, zero value otherwise.
func (o *UserSvcHasPermissionRequest) GetContactsPermited() []string {
	if o == nil || IsNil(o.ContactsPermited) {
		var ret []string
		return ret
	}
	return o.ContactsPermited
}

// GetContactsPermitedOk returns a tuple with the ContactsPermited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSvcHasPermissionRequest) GetContactsPermitedOk() ([]string, bool) {
	if o == nil || IsNil(o.ContactsPermited) {
		return nil, false
	}
	return o.ContactsPermited, true
}

// HasContactsPermited returns a boolean if a field has been set.
func (o *UserSvcHasPermissionRequest) HasContactsPermited() bool {
	if o != nil && !IsNil(o.ContactsPermited) {
		return true
	}

	return false
}

// SetContactsPermited gets a reference to the given []string and assigns it to the ContactsPermited field.
func (o *UserSvcHasPermissionRequest) SetContactsPermited(v []string) {
	o.ContactsPermited = v
}

// GetPermittedSlugs returns the PermittedSlugs field value if set, zero value otherwise.
func (o *UserSvcHasPermissionRequest) GetPermittedSlugs() []string {
	if o == nil || IsNil(o.PermittedSlugs) {
		var ret []string
		return ret
	}
	return o.PermittedSlugs
}

// GetPermittedSlugsOk returns a tuple with the PermittedSlugs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSvcHasPermissionRequest) GetPermittedSlugsOk() ([]string, bool) {
	if o == nil || IsNil(o.PermittedSlugs) {
		return nil, false
	}
	return o.PermittedSlugs, true
}

// HasPermittedSlugs returns a boolean if a field has been set.
func (o *UserSvcHasPermissionRequest) HasPermittedSlugs() bool {
	if o != nil && !IsNil(o.PermittedSlugs) {
		return true
	}

	return false
}

// SetPermittedSlugs gets a reference to the given []string and assigns it to the PermittedSlugs field.
func (o *UserSvcHasPermissionRequest) SetPermittedSlugs(v []string) {
	o.PermittedSlugs = v
}

func (o UserSvcHasPermissionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcHasPermissionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContactsPermited) {
		toSerialize["contactsPermited"] = o.ContactsPermited
	}
	if !IsNil(o.PermittedSlugs) {
		toSerialize["permittedSlugs"] = o.PermittedSlugs
	}
	return toSerialize, nil
}

type NullableUserSvcHasPermissionRequest struct {
	value *UserSvcHasPermissionRequest
	isSet bool
}

func (v NullableUserSvcHasPermissionRequest) Get() *UserSvcHasPermissionRequest {
	return v.value
}

func (v *NullableUserSvcHasPermissionRequest) Set(val *UserSvcHasPermissionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcHasPermissionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcHasPermissionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcHasPermissionRequest(val *UserSvcHasPermissionRequest) *NullableUserSvcHasPermissionRequest {
	return &NullableUserSvcHasPermissionRequest{value: val, isSet: true}
}

func (v NullableUserSvcHasPermissionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcHasPermissionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


