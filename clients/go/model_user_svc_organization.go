/*
1Backend

AI-native microservices platform.

API version: 0.8.0-rc1
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserSvcOrganization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcOrganization{}

// UserSvcOrganization struct for UserSvcOrganization
type UserSvcOrganization struct {
	App *string `json:"app,omitempty"`
	CreatedAt string `json:"createdAt"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Id string `json:"id"`
	// Full name of the organization
	Name string `json:"name"`
	// URL-friendly unique (inside the Singularon platform) identifier for the `organization`.
	Slug string `json:"slug"`
	ThumbnailFileId *string `json:"thumbnailFileId,omitempty"`
	UpdatedAt string `json:"updatedAt"`
}

type _UserSvcOrganization UserSvcOrganization

// NewUserSvcOrganization instantiates a new UserSvcOrganization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcOrganization(createdAt string, id string, name string, slug string, updatedAt string) *UserSvcOrganization {
	this := UserSvcOrganization{}
	this.CreatedAt = createdAt
	this.Id = id
	this.Name = name
	this.Slug = slug
	this.UpdatedAt = updatedAt
	return &this
}

// NewUserSvcOrganizationWithDefaults instantiates a new UserSvcOrganization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcOrganizationWithDefaults() *UserSvcOrganization {
	this := UserSvcOrganization{}
	return &this
}



// HasApp returns a boolean if a field has been set.
func (o *UserSvcOrganization) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}







// HasDeletedAt returns a boolean if a field has been set.
func (o *UserSvcOrganization) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}













// HasThumbnailFileId returns a boolean if a field has been set.
func (o *UserSvcOrganization) HasThumbnailFileId() bool {
	if o != nil && !IsNil(o.ThumbnailFileId) {
		return true
	}

	return false
}





func (o UserSvcOrganization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcOrganization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["slug"] = o.Slug
	if !IsNil(o.ThumbnailFileId) {
		toSerialize["thumbnailFileId"] = o.ThumbnailFileId
	}
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *UserSvcOrganization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"id",
		"name",
		"slug",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSvcOrganization := _UserSvcOrganization{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSvcOrganization)

	if err != nil {
		return err
	}

	*o = UserSvcOrganization(varUserSvcOrganization)

	return err
}

type NullableUserSvcOrganization struct {
	value *UserSvcOrganization
	isSet bool
}

func (v NullableUserSvcOrganization) Get() *UserSvcOrganization {
	return v.value
}

func (v *NullableUserSvcOrganization) Set(val *UserSvcOrganization) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcOrganization) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcOrganization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcOrganization(val *UserSvcOrganization) *NullableUserSvcOrganization {
	return &NullableUserSvcOrganization{value: val, isSet: true}
}

func (v NullableUserSvcOrganization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcOrganization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


