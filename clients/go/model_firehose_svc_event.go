/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FirehoseSvcEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirehoseSvcEvent{}

// FirehoseSvcEvent struct for FirehoseSvcEvent
type FirehoseSvcEvent struct {
	Data map[string]interface{} `json:"data,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewFirehoseSvcEvent instantiates a new FirehoseSvcEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirehoseSvcEvent() *FirehoseSvcEvent {
	this := FirehoseSvcEvent{}
	return &this
}

// NewFirehoseSvcEventWithDefaults instantiates a new FirehoseSvcEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirehoseSvcEventWithDefaults() *FirehoseSvcEvent {
	this := FirehoseSvcEvent{}
	return &this
}



// HasData returns a boolean if a field has been set.
func (o *FirehoseSvcEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}




// HasName returns a boolean if a field has been set.
func (o *FirehoseSvcEvent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}


func (o FirehoseSvcEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirehoseSvcEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableFirehoseSvcEvent struct {
	value *FirehoseSvcEvent
	isSet bool
}

func (v NullableFirehoseSvcEvent) Get() *FirehoseSvcEvent {
	return v.value
}

func (v *NullableFirehoseSvcEvent) Set(val *FirehoseSvcEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableFirehoseSvcEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableFirehoseSvcEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirehoseSvcEvent(val *FirehoseSvcEvent) *NullableFirehoseSvcEvent {
	return &NullableFirehoseSvcEvent{value: val, isSet: true}
}

func (v NullableFirehoseSvcEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirehoseSvcEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


