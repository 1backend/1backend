/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserSvcEnroll type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcEnroll{}

// UserSvcEnroll struct for UserSvcEnroll
type UserSvcEnroll struct {
	// App of the enroll. Use `*` to match all apps, such as when bootstrapping in services.
	App *string `json:"app,omitempty"`
	// ContactId is the the recipient of the enroll. If the user is already registered, the role is assigned immediately; otherwise, it is applied upon registration.
	ContactId *string `json:"contactId,omitempty"`
	CreatedAt string `json:"createdAt"`
	// CreatedBy contains the ID of the user who created the Enroll.
	CreatedBy *string `json:"createdBy,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Id string `json:"id"`
	// Role specifies the role to be assigned to the ContactId. Callers can only assign roles they own, identified by their service slug (e.g., if \"my-service\" creates an enroll, the role must be \"my-service:admin\"). Dynamic organization roles can also be assigned (e.g., \"user-svc:org:{%orgId}:admin\" or \"user-svc:org:{%orgId}:user\"), but in this case, the caller must be an admin of the target organization.
	Role string `json:"role"`
	UpdatedAt string `json:"updatedAt"`
	// UserId is the recipient of the enroll. If the user is already registered, the role is assigned immediately; otherwise, it is applied upon registration.
	UserId *string `json:"userId,omitempty"`
}

type _UserSvcEnroll UserSvcEnroll

// NewUserSvcEnroll instantiates a new UserSvcEnroll object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcEnroll(createdAt string, id string, role string, updatedAt string) *UserSvcEnroll {
	this := UserSvcEnroll{}
	this.CreatedAt = createdAt
	this.Id = id
	this.Role = role
	this.UpdatedAt = updatedAt
	return &this
}

// NewUserSvcEnrollWithDefaults instantiates a new UserSvcEnroll object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcEnrollWithDefaults() *UserSvcEnroll {
	this := UserSvcEnroll{}
	return &this
}



// HasApp returns a boolean if a field has been set.
func (o *UserSvcEnroll) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}




// HasContactId returns a boolean if a field has been set.
func (o *UserSvcEnroll) HasContactId() bool {
	if o != nil && !IsNil(o.ContactId) {
		return true
	}

	return false
}







// HasCreatedBy returns a boolean if a field has been set.
func (o *UserSvcEnroll) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}




// HasDeletedAt returns a boolean if a field has been set.
func (o *UserSvcEnroll) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}













// HasUserId returns a boolean if a field has been set.
func (o *UserSvcEnroll) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}


func (o UserSvcEnroll) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcEnroll) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	if !IsNil(o.ContactId) {
		toSerialize["contactId"] = o.ContactId
	}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	toSerialize["id"] = o.Id
	toSerialize["role"] = o.Role
	toSerialize["updatedAt"] = o.UpdatedAt
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

func (o *UserSvcEnroll) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"id",
		"role",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSvcEnroll := _UserSvcEnroll{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSvcEnroll)

	if err != nil {
		return err
	}

	*o = UserSvcEnroll(varUserSvcEnroll)

	return err
}

type NullableUserSvcEnroll struct {
	value *UserSvcEnroll
	isSet bool
}

func (v NullableUserSvcEnroll) Get() *UserSvcEnroll {
	return v.value
}

func (v *NullableUserSvcEnroll) Set(val *UserSvcEnroll) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcEnroll) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcEnroll) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcEnroll(val *UserSvcEnroll) *NullableUserSvcEnroll {
	return &NullableUserSvcEnroll{value: val, isSet: true}
}

func (v NullableUserSvcEnroll) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcEnroll) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


