/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FileSvcDownload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileSvcDownload{}

// FileSvcDownload struct for FileSvcDownload
type FileSvcDownload struct {
	CreatedAt string `json:"createdAt"`
	// DownloadedBytes exists to show the download progress in terms of the number of bytes already downloaded.
	DownloadedBytes *int64 `json:"downloadedBytes,omitempty"`
	Error *string `json:"error,omitempty"`
	FileName *string `json:"fileName,omitempty"`
	FilePath *string `json:"filePath,omitempty"`
	// FileSize is the full final downloaded file size.
	FileSize *int64 `json:"fileSize,omitempty"`
	Id *string `json:"id,omitempty"`
	Progress *float32 `json:"progress,omitempty"`
	Status *string `json:"status,omitempty"`
	UpdatedAt string `json:"updatedAt"`
	Url *string `json:"url,omitempty"`
}

type _FileSvcDownload FileSvcDownload

// NewFileSvcDownload instantiates a new FileSvcDownload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSvcDownload(createdAt string, updatedAt string) *FileSvcDownload {
	this := FileSvcDownload{}
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewFileSvcDownloadWithDefaults instantiates a new FileSvcDownload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSvcDownloadWithDefaults() *FileSvcDownload {
	this := FileSvcDownload{}
	return &this
}






// HasDownloadedBytes returns a boolean if a field has been set.
func (o *FileSvcDownload) HasDownloadedBytes() bool {
	if o != nil && !IsNil(o.DownloadedBytes) {
		return true
	}

	return false
}




// HasError returns a boolean if a field has been set.
func (o *FileSvcDownload) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}




// HasFileName returns a boolean if a field has been set.
func (o *FileSvcDownload) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}




// HasFilePath returns a boolean if a field has been set.
func (o *FileSvcDownload) HasFilePath() bool {
	if o != nil && !IsNil(o.FilePath) {
		return true
	}

	return false
}




// HasFileSize returns a boolean if a field has been set.
func (o *FileSvcDownload) HasFileSize() bool {
	if o != nil && !IsNil(o.FileSize) {
		return true
	}

	return false
}




// HasId returns a boolean if a field has been set.
func (o *FileSvcDownload) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}




// HasProgress returns a boolean if a field has been set.
func (o *FileSvcDownload) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}




// HasStatus returns a boolean if a field has been set.
func (o *FileSvcDownload) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}







// HasUrl returns a boolean if a field has been set.
func (o *FileSvcDownload) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}


func (o FileSvcDownload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileSvcDownload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.DownloadedBytes) {
		toSerialize["downloadedBytes"] = o.DownloadedBytes
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.FilePath) {
		toSerialize["filePath"] = o.FilePath
	}
	if !IsNil(o.FileSize) {
		toSerialize["fileSize"] = o.FileSize
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["updatedAt"] = o.UpdatedAt
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *FileSvcDownload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileSvcDownload := _FileSvcDownload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileSvcDownload)

	if err != nil {
		return err
	}

	*o = FileSvcDownload(varFileSvcDownload)

	return err
}

type NullableFileSvcDownload struct {
	value *FileSvcDownload
	isSet bool
}

func (v NullableFileSvcDownload) Get() *FileSvcDownload {
	return v.value
}

func (v *NullableFileSvcDownload) Set(val *FileSvcDownload) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSvcDownload) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSvcDownload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSvcDownload(val *FileSvcDownload) *NullableFileSvcDownload {
	return &NullableFileSvcDownload{value: val, isSet: true}
}

func (v NullableFileSvcDownload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSvcDownload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


