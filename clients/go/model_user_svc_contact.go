/*
1Backend

AI-native microservices platform.

API version: 0.8.0-rc1
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserSvcContact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcContact{}

// UserSvcContact struct for UserSvcContact
type UserSvcContact struct {
	CreatedAt string `json:"createdAt"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	// Handle is the platform local unique identifier. Ie. while the `id` of a Twitter contact is `twitter.com/thejoe`, the value will be only `thejoe`. For email and phones the `id` and the `value` will be the same. This field mostly exists for display purposes.  Example values: \"joe12\" (1backend username), \"thejoe\" (twitter username), \"joe@joesdomain.com\" (email)
	Handle string `json:"handle"`
	// The unique identifier, which can be a URL.  Example values: \"joe12\" (1backend username), \"twitter.com/thejoe\" (twitter url), \"joe@joesdomain.com\" (email)
	Id string `json:"id"`
	// If this is the primary contact method
	IsPrimary *bool `json:"isPrimary,omitempty"`
	// Platform of the contact (e.g., \"email\", \"phone\", \"twitter\")
	Platform string `json:"platform"`
	UpdatedAt string `json:"updatedAt"`
	UserId string `json:"userId"`
	// Whether the contact is verified
	Verified *bool `json:"verified,omitempty"`
}

type _UserSvcContact UserSvcContact

// NewUserSvcContact instantiates a new UserSvcContact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcContact(createdAt string, handle string, id string, platform string, updatedAt string, userId string) *UserSvcContact {
	this := UserSvcContact{}
	this.CreatedAt = createdAt
	this.Handle = handle
	this.Id = id
	this.Platform = platform
	this.UpdatedAt = updatedAt
	this.UserId = userId
	return &this
}

// NewUserSvcContactWithDefaults instantiates a new UserSvcContact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcContactWithDefaults() *UserSvcContact {
	this := UserSvcContact{}
	return &this
}






// HasDeletedAt returns a boolean if a field has been set.
func (o *UserSvcContact) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}










// HasIsPrimary returns a boolean if a field has been set.
func (o *UserSvcContact) HasIsPrimary() bool {
	if o != nil && !IsNil(o.IsPrimary) {
		return true
	}

	return false
}













// HasVerified returns a boolean if a field has been set.
func (o *UserSvcContact) HasVerified() bool {
	if o != nil && !IsNil(o.Verified) {
		return true
	}

	return false
}


func (o UserSvcContact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcContact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	toSerialize["handle"] = o.Handle
	toSerialize["id"] = o.Id
	if !IsNil(o.IsPrimary) {
		toSerialize["isPrimary"] = o.IsPrimary
	}
	toSerialize["platform"] = o.Platform
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["userId"] = o.UserId
	if !IsNil(o.Verified) {
		toSerialize["verified"] = o.Verified
	}
	return toSerialize, nil
}

func (o *UserSvcContact) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"handle",
		"id",
		"platform",
		"updatedAt",
		"userId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSvcContact := _UserSvcContact{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSvcContact)

	if err != nil {
		return err
	}

	*o = UserSvcContact(varUserSvcContact)

	return err
}

type NullableUserSvcContact struct {
	value *UserSvcContact
	isSet bool
}

func (v NullableUserSvcContact) Get() *UserSvcContact {
	return v.value
}

func (v *NullableUserSvcContact) Set(val *UserSvcContact) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcContact) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcContact(val *UserSvcContact) *NullableUserSvcContact {
	return &NullableUserSvcContact{value: val, isSet: true}
}

func (v NullableUserSvcContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


