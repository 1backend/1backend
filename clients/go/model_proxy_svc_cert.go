/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProxySvcCert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProxySvcCert{}

// ProxySvcCert struct for ProxySvcCert
type ProxySvcCert struct {
	// PEM-encoded certificate bundle   -----BEGIN EC PARAMETERS-----  BggqhkjOPQMBBw==  -----END EC PARAMETERS-----  -----BEGIN EC PRIVATE KEY-----  MHcCAQEEIDC3+7pySTQl6WRBuef...  -----END EC PRIVATE KEY-----  -----BEGIN CERTIFICATE-----  MIIBhTCCASugAwIBAgIUQYwE...  -----END CERTIFICATE-----
	Cert string `json:"cert"`
	// Subject Common Name (typically domain)
	CommonName *string `json:"commonName,omitempty"`
	// When cert record was created
	CreatedAt string `json:"createdAt"`
	// Subject Alternative Names (covered domains)
	DnsNames []string `json:"dnsNames,omitempty"`
	// Id is the host which this cert is for, e.g., \"example.com\" or \"www.example.com\"
	Id string `json:"id"`
	// Whether cert is a CA (usually false for LE certs)
	IsCA *bool `json:"isCA,omitempty"`
	// Certificate issuer name (e.g., Let's Encrypt)
	Issuer *string `json:"issuer,omitempty"`
	// Cert validity end time
	NotAfter *string `json:"notAfter,omitempty"`
	// Cert validity start time
	NotBefore *string `json:"notBefore,omitempty"`
	// Public key algorithm (e.g., RSA, ECDSA)
	PublicKeyAlgorithm *string `json:"publicKeyAlgorithm,omitempty"`
	// Bit length of the public key
	PublicKeyBitLength *int32 `json:"publicKeyBitLength,omitempty"`
	// Unique certificate serial number
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Algorithm used to sign the cert (e.g., SHA256-RSA)
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty"`
	// When cert record was last updated
	UpdatedAt string `json:"updatedAt"`
}

type _ProxySvcCert ProxySvcCert

// NewProxySvcCert instantiates a new ProxySvcCert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProxySvcCert(cert string, createdAt string, id string, updatedAt string) *ProxySvcCert {
	this := ProxySvcCert{}
	this.Cert = cert
	this.CreatedAt = createdAt
	this.Id = id
	this.UpdatedAt = updatedAt
	return &this
}

// NewProxySvcCertWithDefaults instantiates a new ProxySvcCert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProxySvcCertWithDefaults() *ProxySvcCert {
	this := ProxySvcCert{}
	return &this
}






// HasCommonName returns a boolean if a field has been set.
func (o *ProxySvcCert) HasCommonName() bool {
	if o != nil && !IsNil(o.CommonName) {
		return true
	}

	return false
}







// HasDnsNames returns a boolean if a field has been set.
func (o *ProxySvcCert) HasDnsNames() bool {
	if o != nil && !IsNil(o.DnsNames) {
		return true
	}

	return false
}







// HasIsCA returns a boolean if a field has been set.
func (o *ProxySvcCert) HasIsCA() bool {
	if o != nil && !IsNil(o.IsCA) {
		return true
	}

	return false
}




// HasIssuer returns a boolean if a field has been set.
func (o *ProxySvcCert) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}




// HasNotAfter returns a boolean if a field has been set.
func (o *ProxySvcCert) HasNotAfter() bool {
	if o != nil && !IsNil(o.NotAfter) {
		return true
	}

	return false
}




// HasNotBefore returns a boolean if a field has been set.
func (o *ProxySvcCert) HasNotBefore() bool {
	if o != nil && !IsNil(o.NotBefore) {
		return true
	}

	return false
}




// HasPublicKeyAlgorithm returns a boolean if a field has been set.
func (o *ProxySvcCert) HasPublicKeyAlgorithm() bool {
	if o != nil && !IsNil(o.PublicKeyAlgorithm) {
		return true
	}

	return false
}




// HasPublicKeyBitLength returns a boolean if a field has been set.
func (o *ProxySvcCert) HasPublicKeyBitLength() bool {
	if o != nil && !IsNil(o.PublicKeyBitLength) {
		return true
	}

	return false
}




// HasSerialNumber returns a boolean if a field has been set.
func (o *ProxySvcCert) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}




// HasSignatureAlgorithm returns a boolean if a field has been set.
func (o *ProxySvcCert) HasSignatureAlgorithm() bool {
	if o != nil && !IsNil(o.SignatureAlgorithm) {
		return true
	}

	return false
}





func (o ProxySvcCert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProxySvcCert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cert"] = o.Cert
	if !IsNil(o.CommonName) {
		toSerialize["commonName"] = o.CommonName
	}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.DnsNames) {
		toSerialize["dnsNames"] = o.DnsNames
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.IsCA) {
		toSerialize["isCA"] = o.IsCA
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.NotAfter) {
		toSerialize["notAfter"] = o.NotAfter
	}
	if !IsNil(o.NotBefore) {
		toSerialize["notBefore"] = o.NotBefore
	}
	if !IsNil(o.PublicKeyAlgorithm) {
		toSerialize["publicKeyAlgorithm"] = o.PublicKeyAlgorithm
	}
	if !IsNil(o.PublicKeyBitLength) {
		toSerialize["publicKeyBitLength"] = o.PublicKeyBitLength
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.SignatureAlgorithm) {
		toSerialize["signatureAlgorithm"] = o.SignatureAlgorithm
	}
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *ProxySvcCert) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cert",
		"createdAt",
		"id",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProxySvcCert := _ProxySvcCert{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProxySvcCert)

	if err != nil {
		return err
	}

	*o = ProxySvcCert(varProxySvcCert)

	return err
}

type NullableProxySvcCert struct {
	value *ProxySvcCert
	isSet bool
}

func (v NullableProxySvcCert) Get() *ProxySvcCert {
	return v.value
}

func (v *NullableProxySvcCert) Set(val *ProxySvcCert) {
	v.value = val
	v.isSet = true
}

func (v NullableProxySvcCert) IsSet() bool {
	return v.isSet
}

func (v *NullableProxySvcCert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProxySvcCert(val *ProxySvcCert) *NullableProxySvcCert {
	return &NullableProxySvcCert{value: val, isSet: true}
}

func (v NullableProxySvcCert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProxySvcCert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


