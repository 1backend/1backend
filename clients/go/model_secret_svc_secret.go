/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SecretSvcSecret type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretSvcSecret{}

// SecretSvcSecret struct for SecretSvcSecret
type SecretSvcSecret struct {
	// App of the secret
	App *string `json:"app,omitempty"`
	// Slugs of services/users who can change the deleters list
	CanChangeDeleters []string `json:"canChangeDeleters,omitempty"`
	// Slugs of services/users who can change the readers list
	CanChangeReaders []string `json:"canChangeReaders,omitempty"`
	// Slugs of services/users who can change the writers list
	CanChangeWriters []string `json:"canChangeWriters,omitempty"`
	// Checksum of the secret value
	Checksum *string `json:"checksum,omitempty"`
	// Algorithm used for the checksum (e.g., \"CRC32\")
	ChecksumAlgorithm *SecretSvcChecksumAlgorithm `json:"checksumAlgorithm,omitempty"`
	// Slugs of services/users who can delete the secret
	Deleters []string `json:"deleters,omitempty"`
	// Whether the secret is encrypted All secrets are encrypted before written to the DB. This really only exists for write requests to know if the secret is already encrypted. Ie: while most `secret save [key] [value]` commands are probably not encrypted, File based saves, eg. `secret save secretA.yaml` are probably encrypted.
	Encrypted *bool `json:"encrypted,omitempty"`
	// Id of the secret
	Id *string `json:"id,omitempty"`
	// Envar or slug-like key of the secret
	Key *string `json:"key,omitempty"`
	// Slugs of services/users who can read the secret
	Readers []string `json:"readers,omitempty"`
	// Secret Value
	Value *string `json:"value,omitempty"`
	// Slugs of services/users who can modify the secret
	Writers []string `json:"writers,omitempty"`
}

// NewSecretSvcSecret instantiates a new SecretSvcSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretSvcSecret() *SecretSvcSecret {
	this := SecretSvcSecret{}
	return &this
}

// NewSecretSvcSecretWithDefaults instantiates a new SecretSvcSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretSvcSecretWithDefaults() *SecretSvcSecret {
	this := SecretSvcSecret{}
	return &this
}



// HasApp returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}




// HasCanChangeDeleters returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasCanChangeDeleters() bool {
	if o != nil && !IsNil(o.CanChangeDeleters) {
		return true
	}

	return false
}




// HasCanChangeReaders returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasCanChangeReaders() bool {
	if o != nil && !IsNil(o.CanChangeReaders) {
		return true
	}

	return false
}




// HasCanChangeWriters returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasCanChangeWriters() bool {
	if o != nil && !IsNil(o.CanChangeWriters) {
		return true
	}

	return false
}




// HasChecksum returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasChecksum() bool {
	if o != nil && !IsNil(o.Checksum) {
		return true
	}

	return false
}




// HasChecksumAlgorithm returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasChecksumAlgorithm() bool {
	if o != nil && !IsNil(o.ChecksumAlgorithm) {
		return true
	}

	return false
}




// HasDeleters returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasDeleters() bool {
	if o != nil && !IsNil(o.Deleters) {
		return true
	}

	return false
}




// HasEncrypted returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasEncrypted() bool {
	if o != nil && !IsNil(o.Encrypted) {
		return true
	}

	return false
}




// HasId returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}




// HasKey returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}




// HasReaders returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasReaders() bool {
	if o != nil && !IsNil(o.Readers) {
		return true
	}

	return false
}




// HasValue returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}




// HasWriters returns a boolean if a field has been set.
func (o *SecretSvcSecret) HasWriters() bool {
	if o != nil && !IsNil(o.Writers) {
		return true
	}

	return false
}


func (o SecretSvcSecret) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretSvcSecret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	if !IsNil(o.CanChangeDeleters) {
		toSerialize["canChangeDeleters"] = o.CanChangeDeleters
	}
	if !IsNil(o.CanChangeReaders) {
		toSerialize["canChangeReaders"] = o.CanChangeReaders
	}
	if !IsNil(o.CanChangeWriters) {
		toSerialize["canChangeWriters"] = o.CanChangeWriters
	}
	if !IsNil(o.Checksum) {
		toSerialize["checksum"] = o.Checksum
	}
	if !IsNil(o.ChecksumAlgorithm) {
		toSerialize["checksumAlgorithm"] = o.ChecksumAlgorithm
	}
	if !IsNil(o.Deleters) {
		toSerialize["deleters"] = o.Deleters
	}
	if !IsNil(o.Encrypted) {
		toSerialize["encrypted"] = o.Encrypted
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Readers) {
		toSerialize["readers"] = o.Readers
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Writers) {
		toSerialize["writers"] = o.Writers
	}
	return toSerialize, nil
}

type NullableSecretSvcSecret struct {
	value *SecretSvcSecret
	isSet bool
}

func (v NullableSecretSvcSecret) Get() *SecretSvcSecret {
	return v.value
}

func (v *NullableSecretSvcSecret) Set(val *SecretSvcSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretSvcSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretSvcSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretSvcSecret(val *SecretSvcSecret) *NullableSecretSvcSecret {
	return &NullableSecretSvcSecret{value: val, isSet: true}
}

func (v NullableSecretSvcSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretSvcSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


