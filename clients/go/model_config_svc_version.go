/*
1Backend

AI-native microservices platform.

API version: 0.9.1
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigSvcVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigSvcVersion{}

// ConfigSvcVersion struct for ConfigSvcVersion
type ConfigSvcVersion struct {
	AppId string `json:"appId"`
	CreatedAt string `json:"createdAt"`
	Data map[string]interface{} `json:"data"`
	DataJson string `json:"dataJson"`
	// CamelCased slugs of the config owners
	Id string `json:"id"`
	InternalId *string `json:"internalId,omitempty"`
	Tags []string `json:"tags,omitempty"`
	UpdatedAt string `json:"updatedAt"`
	Version *string `json:"version,omitempty"`
}

type _ConfigSvcVersion ConfigSvcVersion

// NewConfigSvcVersion instantiates a new ConfigSvcVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigSvcVersion(appId string, createdAt string, data map[string]interface{}, dataJson string, id string, updatedAt string) *ConfigSvcVersion {
	this := ConfigSvcVersion{}
	this.AppId = appId
	this.CreatedAt = createdAt
	this.Data = data
	this.DataJson = dataJson
	this.Id = id
	this.UpdatedAt = updatedAt
	return &this
}

// NewConfigSvcVersionWithDefaults instantiates a new ConfigSvcVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigSvcVersionWithDefaults() *ConfigSvcVersion {
	this := ConfigSvcVersion{}
	return &this
}

// GetAppId returns the AppId field value
func (o *ConfigSvcVersion) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *ConfigSvcVersion) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *ConfigSvcVersion) SetAppId(v string) {
	o.AppId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ConfigSvcVersion) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ConfigSvcVersion) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ConfigSvcVersion) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetData returns the Data field value
func (o *ConfigSvcVersion) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ConfigSvcVersion) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ConfigSvcVersion) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetDataJson returns the DataJson field value
func (o *ConfigSvcVersion) GetDataJson() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataJson
}

// GetDataJsonOk returns a tuple with the DataJson field value
// and a boolean to check if the value has been set.
func (o *ConfigSvcVersion) GetDataJsonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataJson, true
}

// SetDataJson sets field value
func (o *ConfigSvcVersion) SetDataJson(v string) {
	o.DataJson = v
}

// GetId returns the Id field value
func (o *ConfigSvcVersion) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConfigSvcVersion) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConfigSvcVersion) SetId(v string) {
	o.Id = v
}

// GetInternalId returns the InternalId field value if set, zero value otherwise.
func (o *ConfigSvcVersion) GetInternalId() string {
	if o == nil || IsNil(o.InternalId) {
		var ret string
		return ret
	}
	return *o.InternalId
}

// GetInternalIdOk returns a tuple with the InternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSvcVersion) GetInternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.InternalId) {
		return nil, false
	}
	return o.InternalId, true
}

// HasInternalId returns a boolean if a field has been set.
func (o *ConfigSvcVersion) HasInternalId() bool {
	if o != nil && !IsNil(o.InternalId) {
		return true
	}

	return false
}

// SetInternalId gets a reference to the given string and assigns it to the InternalId field.
func (o *ConfigSvcVersion) SetInternalId(v string) {
	o.InternalId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ConfigSvcVersion) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSvcVersion) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ConfigSvcVersion) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ConfigSvcVersion) SetTags(v []string) {
	o.Tags = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ConfigSvcVersion) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ConfigSvcVersion) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ConfigSvcVersion) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ConfigSvcVersion) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSvcVersion) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ConfigSvcVersion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ConfigSvcVersion) SetVersion(v string) {
	o.Version = &v
}

func (o ConfigSvcVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigSvcVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appId"] = o.AppId
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["data"] = o.Data
	toSerialize["dataJson"] = o.DataJson
	toSerialize["id"] = o.Id
	if !IsNil(o.InternalId) {
		toSerialize["internalId"] = o.InternalId
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["updatedAt"] = o.UpdatedAt
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *ConfigSvcVersion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appId",
		"createdAt",
		"data",
		"dataJson",
		"id",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigSvcVersion := _ConfigSvcVersion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigSvcVersion)

	if err != nil {
		return err
	}

	*o = ConfigSvcVersion(varConfigSvcVersion)

	return err
}

type NullableConfigSvcVersion struct {
	value *ConfigSvcVersion
	isSet bool
}

func (v NullableConfigSvcVersion) Get() *ConfigSvcVersion {
	return v.value
}

func (v *NullableConfigSvcVersion) Set(val *ConfigSvcVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigSvcVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigSvcVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigSvcVersion(val *ConfigSvcVersion) *NullableConfigSvcVersion {
	return &NullableConfigSvcVersion{value: val, isSet: true}
}

func (v NullableConfigSvcVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigSvcVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


