/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PromptSvcPrompt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PromptSvcPrompt{}

// PromptSvcPrompt struct for PromptSvcPrompt
type PromptSvcPrompt struct {
	// CreatedAt is the time of the prompt creation.
	CreatedAt *string `json:"createdAt,omitempty"`
	// AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters
	EngineParameters *PromptSvcEngineParameters `json:"engineParameters,omitempty"`
	// Error that arose during prompt execution, if any.
	Error *string `json:"error,omitempty"`
	// Id is the unique ID of the prompt.
	Id *string `json:"id,omitempty"`
	// LastRun is the time of the last prompt run.
	LastRun *string `json:"lastRun,omitempty"`
	// MaxRetries specified how many times the system should retry a prompt when it keeps erroring.
	MaxRetries *int32 `json:"maxRetries,omitempty"`
	// ModelId is just the 1Backend internal ID of the model.
	ModelId *string `json:"modelId,omitempty"`
	// AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters. Use these high level parameters when you don't care about the actual engine, only the functionality (eg. text to image, image to image) it provides.
	Parameters *PromptSvcParameters `json:"parameters,omitempty"`
	// Prompt is the message itself eg. \"What's a banana?
	Prompt string `json:"prompt"`
	RequestMessageId *string `json:"requestMessageId,omitempty"`
	ResponseMessageId *string `json:"responseMessageId,omitempty"`
	// RunCount is the number of times the prompt was retried due to errors
	RunCount *int32 `json:"runCount,omitempty"`
	// Status of the prompt.
	Status *PromptSvcPromptStatus `json:"status,omitempty"`
	// Sync drives whether prompt add request should wait and hang until the prompt is done executing. By default the prompt just gets put on a queue and the client will just subscribe to a Thread Stream. For quick and dirty scripting however it's often times easier to do things syncronously. In those cases set Sync to true.
	Sync *bool `json:"sync,omitempty"`
	// ThreadId is the ID of the thread a prompt belongs to. Clients subscribe to Thread Streams to see the answer to a prompt, or set `prompt.sync` to true for a blocking answer.
	ThreadId *string `json:"threadId,omitempty"`
	// Type is inferred from the `Parameters` or `EngineParameters` field. Eg. A LLamaCpp prompt will be \"Text-to-Text\", a Stabel Diffusion one will be \"Text-to-Image\" etc.
	Type *PromptSvcPromptType `json:"type,omitempty"`
	// UpdatedAt is the last time the prompt was updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`
	// UserId contains the ID of the user who submitted the prompt.
	UserId *string `json:"userId,omitempty"`
}

type _PromptSvcPrompt PromptSvcPrompt

// NewPromptSvcPrompt instantiates a new PromptSvcPrompt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPromptSvcPrompt(prompt string) *PromptSvcPrompt {
	this := PromptSvcPrompt{}
	this.Prompt = prompt
	return &this
}

// NewPromptSvcPromptWithDefaults instantiates a new PromptSvcPrompt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPromptSvcPromptWithDefaults() *PromptSvcPrompt {
	this := PromptSvcPrompt{}
	return &this
}



// HasCreatedAt returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}




// HasEngineParameters returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasEngineParameters() bool {
	if o != nil && !IsNil(o.EngineParameters) {
		return true
	}

	return false
}




// HasError returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}




// HasId returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}




// HasLastRun returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasLastRun() bool {
	if o != nil && !IsNil(o.LastRun) {
		return true
	}

	return false
}




// HasMaxRetries returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasMaxRetries() bool {
	if o != nil && !IsNil(o.MaxRetries) {
		return true
	}

	return false
}




// HasModelId returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasModelId() bool {
	if o != nil && !IsNil(o.ModelId) {
		return true
	}

	return false
}




// HasParameters returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}







// HasRequestMessageId returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasRequestMessageId() bool {
	if o != nil && !IsNil(o.RequestMessageId) {
		return true
	}

	return false
}




// HasResponseMessageId returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasResponseMessageId() bool {
	if o != nil && !IsNil(o.ResponseMessageId) {
		return true
	}

	return false
}




// HasRunCount returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasRunCount() bool {
	if o != nil && !IsNil(o.RunCount) {
		return true
	}

	return false
}




// HasStatus returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}




// HasSync returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasSync() bool {
	if o != nil && !IsNil(o.Sync) {
		return true
	}

	return false
}




// HasThreadId returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasThreadId() bool {
	if o != nil && !IsNil(o.ThreadId) {
		return true
	}

	return false
}




// HasType returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}




// HasUpdatedAt returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}




// HasUserId returns a boolean if a field has been set.
func (o *PromptSvcPrompt) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}


func (o PromptSvcPrompt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PromptSvcPrompt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.EngineParameters) {
		toSerialize["engineParameters"] = o.EngineParameters
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastRun) {
		toSerialize["lastRun"] = o.LastRun
	}
	if !IsNil(o.MaxRetries) {
		toSerialize["maxRetries"] = o.MaxRetries
	}
	if !IsNil(o.ModelId) {
		toSerialize["modelId"] = o.ModelId
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	toSerialize["prompt"] = o.Prompt
	if !IsNil(o.RequestMessageId) {
		toSerialize["requestMessageId"] = o.RequestMessageId
	}
	if !IsNil(o.ResponseMessageId) {
		toSerialize["responseMessageId"] = o.ResponseMessageId
	}
	if !IsNil(o.RunCount) {
		toSerialize["runCount"] = o.RunCount
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Sync) {
		toSerialize["sync"] = o.Sync
	}
	if !IsNil(o.ThreadId) {
		toSerialize["threadId"] = o.ThreadId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

func (o *PromptSvcPrompt) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"prompt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPromptSvcPrompt := _PromptSvcPrompt{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPromptSvcPrompt)

	if err != nil {
		return err
	}

	*o = PromptSvcPrompt(varPromptSvcPrompt)

	return err
}

type NullablePromptSvcPrompt struct {
	value *PromptSvcPrompt
	isSet bool
}

func (v NullablePromptSvcPrompt) Get() *PromptSvcPrompt {
	return v.value
}

func (v *NullablePromptSvcPrompt) Set(val *PromptSvcPrompt) {
	v.value = val
	v.isSet = true
}

func (v NullablePromptSvcPrompt) IsSet() bool {
	return v.isSet
}

func (v *NullablePromptSvcPrompt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromptSvcPrompt(val *PromptSvcPrompt) *NullablePromptSvcPrompt {
	return &NullablePromptSvcPrompt{value: val, isSet: true}
}

func (v NullablePromptSvcPrompt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromptSvcPrompt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


