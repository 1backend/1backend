/*
1Backend

AI-native microservices platform.

API version: 0.8.0-rc3
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Events200Response - struct for Events200Response
type Events200Response struct {
	ChatSvcEventMessageAdded *ChatSvcEventMessageAdded
	ChatSvcEventThreadAdded *ChatSvcEventThreadAdded
	ChatSvcEventThreadUpdate *ChatSvcEventThreadUpdate
}

// ChatSvcEventMessageAddedAsEvents200Response is a convenience function that returns ChatSvcEventMessageAdded wrapped in Events200Response
func ChatSvcEventMessageAddedAsEvents200Response(v *ChatSvcEventMessageAdded) Events200Response {
	return Events200Response{
		ChatSvcEventMessageAdded: v,
	}
}

// ChatSvcEventThreadAddedAsEvents200Response is a convenience function that returns ChatSvcEventThreadAdded wrapped in Events200Response
func ChatSvcEventThreadAddedAsEvents200Response(v *ChatSvcEventThreadAdded) Events200Response {
	return Events200Response{
		ChatSvcEventThreadAdded: v,
	}
}

// ChatSvcEventThreadUpdateAsEvents200Response is a convenience function that returns ChatSvcEventThreadUpdate wrapped in Events200Response
func ChatSvcEventThreadUpdateAsEvents200Response(v *ChatSvcEventThreadUpdate) Events200Response {
	return Events200Response{
		ChatSvcEventThreadUpdate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Events200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ChatSvcEventMessageAdded
	err = newStrictDecoder(data).Decode(&dst.ChatSvcEventMessageAdded)
	if err == nil {
		jsonChatSvcEventMessageAdded, _ := json.Marshal(dst.ChatSvcEventMessageAdded)
		if string(jsonChatSvcEventMessageAdded) == "{}" { // empty struct
			dst.ChatSvcEventMessageAdded = nil
		} else {
			if err = validator.Validate(dst.ChatSvcEventMessageAdded); err != nil {
				dst.ChatSvcEventMessageAdded = nil
			} else {
				match++
			}
		}
	} else {
		dst.ChatSvcEventMessageAdded = nil
	}

	// try to unmarshal data into ChatSvcEventThreadAdded
	err = newStrictDecoder(data).Decode(&dst.ChatSvcEventThreadAdded)
	if err == nil {
		jsonChatSvcEventThreadAdded, _ := json.Marshal(dst.ChatSvcEventThreadAdded)
		if string(jsonChatSvcEventThreadAdded) == "{}" { // empty struct
			dst.ChatSvcEventThreadAdded = nil
		} else {
			if err = validator.Validate(dst.ChatSvcEventThreadAdded); err != nil {
				dst.ChatSvcEventThreadAdded = nil
			} else {
				match++
			}
		}
	} else {
		dst.ChatSvcEventThreadAdded = nil
	}

	// try to unmarshal data into ChatSvcEventThreadUpdate
	err = newStrictDecoder(data).Decode(&dst.ChatSvcEventThreadUpdate)
	if err == nil {
		jsonChatSvcEventThreadUpdate, _ := json.Marshal(dst.ChatSvcEventThreadUpdate)
		if string(jsonChatSvcEventThreadUpdate) == "{}" { // empty struct
			dst.ChatSvcEventThreadUpdate = nil
		} else {
			if err = validator.Validate(dst.ChatSvcEventThreadUpdate); err != nil {
				dst.ChatSvcEventThreadUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.ChatSvcEventThreadUpdate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ChatSvcEventMessageAdded = nil
		dst.ChatSvcEventThreadAdded = nil
		dst.ChatSvcEventThreadUpdate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Events200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Events200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Events200Response) MarshalJSON() ([]byte, error) {
	if src.ChatSvcEventMessageAdded != nil {
		return json.Marshal(&src.ChatSvcEventMessageAdded)
	}

	if src.ChatSvcEventThreadAdded != nil {
		return json.Marshal(&src.ChatSvcEventThreadAdded)
	}

	if src.ChatSvcEventThreadUpdate != nil {
		return json.Marshal(&src.ChatSvcEventThreadUpdate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Events200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ChatSvcEventMessageAdded != nil {
		return obj.ChatSvcEventMessageAdded
	}

	if obj.ChatSvcEventThreadAdded != nil {
		return obj.ChatSvcEventThreadAdded
	}

	if obj.ChatSvcEventThreadUpdate != nil {
		return obj.ChatSvcEventThreadUpdate
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Events200Response) GetActualInstanceValue() (interface{}) {
	if obj.ChatSvcEventMessageAdded != nil {
		return *obj.ChatSvcEventMessageAdded
	}

	if obj.ChatSvcEventThreadAdded != nil {
		return *obj.ChatSvcEventThreadAdded
	}

	if obj.ChatSvcEventThreadUpdate != nil {
		return *obj.ChatSvcEventThreadUpdate
	}

	// all schemas are nil
	return nil
}

type NullableEvents200Response struct {
	value *Events200Response
	isSet bool
}

func (v NullableEvents200Response) Get() *Events200Response {
	return v.value
}

func (v *NullableEvents200Response) Set(val *Events200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableEvents200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableEvents200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvents200Response(val *Events200Response) *NullableEvents200Response {
	return &NullableEvents200Response{value: val, isSet: true}
}

func (v NullableEvents200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvents200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


