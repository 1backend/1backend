// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package openapi is a generated GoMock package.
package openapi

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigSvcAPI is a mock of ConfigSvcAPI interface.
type MockConfigSvcAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConfigSvcAPIMockRecorder
	isgomock struct{}
}

// MockConfigSvcAPIMockRecorder is the mock recorder for MockConfigSvcAPI.
type MockConfigSvcAPIMockRecorder struct {
	mock *MockConfigSvcAPI
}

// NewMockConfigSvcAPI creates a new mock instance.
func NewMockConfigSvcAPI(ctrl *gomock.Controller) *MockConfigSvcAPI {
	mock := &MockConfigSvcAPI{ctrl: ctrl}
	mock.recorder = &MockConfigSvcAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigSvcAPI) EXPECT() *MockConfigSvcAPIMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigSvcAPI) GetConfig(ctx context.Context) ApiGetConfigRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx)
	ret0, _ := ret[0].(ApiGetConfigRequest)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigSvcAPIMockRecorder) GetConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigSvcAPI)(nil).GetConfig), ctx)
}

// GetConfigExecute mocks base method.
func (m *MockConfigSvcAPI) GetConfigExecute(r ApiGetConfigRequest) (*ConfigSvcGetConfigResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigExecute", r)
	ret0, _ := ret[0].(*ConfigSvcGetConfigResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConfigExecute indicates an expected call of GetConfigExecute.
func (mr *MockConfigSvcAPIMockRecorder) GetConfigExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigExecute", reflect.TypeOf((*MockConfigSvcAPI)(nil).GetConfigExecute), r)
}

// SaveConfig mocks base method.
func (m *MockConfigSvcAPI) SaveConfig(ctx context.Context) ApiSaveConfigRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", ctx)
	ret0, _ := ret[0].(ApiSaveConfigRequest)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockConfigSvcAPIMockRecorder) SaveConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockConfigSvcAPI)(nil).SaveConfig), ctx)
}

// SaveConfigExecute mocks base method.
func (m *MockConfigSvcAPI) SaveConfigExecute(r ApiSaveConfigRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfigExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SaveConfigExecute indicates an expected call of SaveConfigExecute.
func (mr *MockConfigSvcAPIMockRecorder) SaveConfigExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfigExecute", reflect.TypeOf((*MockConfigSvcAPI)(nil).SaveConfigExecute), r)
}
