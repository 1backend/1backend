/*
1Backend

AI-native microservices platform.

API version: 0.9.4
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserSvcSendOtpResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcSendOtpResponse{}

// UserSvcSendOtpResponse struct for UserSvcSendOtpResponse
type UserSvcSendOtpResponse struct {
	// In test mode, the OTP code is returned in the response for easier testing.
	Code *string `json:"code,omitempty"`
	OtpId string `json:"otpId"`
}

type _UserSvcSendOtpResponse UserSvcSendOtpResponse

// NewUserSvcSendOtpResponse instantiates a new UserSvcSendOtpResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcSendOtpResponse(otpId string) *UserSvcSendOtpResponse {
	this := UserSvcSendOtpResponse{}
	this.OtpId = otpId
	return &this
}

// NewUserSvcSendOtpResponseWithDefaults instantiates a new UserSvcSendOtpResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcSendOtpResponseWithDefaults() *UserSvcSendOtpResponse {
	this := UserSvcSendOtpResponse{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UserSvcSendOtpResponse) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSvcSendOtpResponse) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *UserSvcSendOtpResponse) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *UserSvcSendOtpResponse) SetCode(v string) {
	o.Code = &v
}

// GetOtpId returns the OtpId field value
func (o *UserSvcSendOtpResponse) GetOtpId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OtpId
}

// GetOtpIdOk returns a tuple with the OtpId field value
// and a boolean to check if the value has been set.
func (o *UserSvcSendOtpResponse) GetOtpIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OtpId, true
}

// SetOtpId sets field value
func (o *UserSvcSendOtpResponse) SetOtpId(v string) {
	o.OtpId = v
}

func (o UserSvcSendOtpResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcSendOtpResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["otpId"] = o.OtpId
	return toSerialize, nil
}

func (o *UserSvcSendOtpResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"otpId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSvcSendOtpResponse := _UserSvcSendOtpResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSvcSendOtpResponse)

	if err != nil {
		return err
	}

	*o = UserSvcSendOtpResponse(varUserSvcSendOtpResponse)

	return err
}

type NullableUserSvcSendOtpResponse struct {
	value *UserSvcSendOtpResponse
	isSet bool
}

func (v NullableUserSvcSendOtpResponse) Get() *UserSvcSendOtpResponse {
	return v.value
}

func (v *NullableUserSvcSendOtpResponse) Set(val *UserSvcSendOtpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcSendOtpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcSendOtpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcSendOtpResponse(val *UserSvcSendOtpResponse) *NullableUserSvcSendOtpResponse {
	return &NullableUserSvcSendOtpResponse{value: val, isSet: true}
}

func (v NullableUserSvcSendOtpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcSendOtpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


