/*
1Backend

AI-native microservices platform.

API version: 0.9.1
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigSvcListVersionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigSvcListVersionsRequest{}

// ConfigSvcListVersionsRequest struct for ConfigSvcListVersionsRequest
type ConfigSvcListVersionsRequest struct {
	AfterJson *string `json:"afterJson,omitempty"`
	AppHost string `json:"appHost"`
	// Ids are camelCased slugs of the config owners. Specifying only the ids will mean all of the config will be returned for that key.  If the configs are large, consider using the `Selector` request field.
	Ids []string `json:"ids,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	// Selector allows dotPath-based filtering per config owner. Example: {   \"user1\": [\"settings.theme\", \"featureFlags.enableNewUI\"],   \"user2\": [\"settings.language\"] }
	Selector *map[string][]string `json:"selector,omitempty"`
	Tags []string `json:"tags,omitempty"`
}

type _ConfigSvcListVersionsRequest ConfigSvcListVersionsRequest

// NewConfigSvcListVersionsRequest instantiates a new ConfigSvcListVersionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigSvcListVersionsRequest(appHost string) *ConfigSvcListVersionsRequest {
	this := ConfigSvcListVersionsRequest{}
	this.AppHost = appHost
	return &this
}

// NewConfigSvcListVersionsRequestWithDefaults instantiates a new ConfigSvcListVersionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigSvcListVersionsRequestWithDefaults() *ConfigSvcListVersionsRequest {
	this := ConfigSvcListVersionsRequest{}
	return &this
}

// GetAfterJson returns the AfterJson field value if set, zero value otherwise.
func (o *ConfigSvcListVersionsRequest) GetAfterJson() string {
	if o == nil || IsNil(o.AfterJson) {
		var ret string
		return ret
	}
	return *o.AfterJson
}

// GetAfterJsonOk returns a tuple with the AfterJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSvcListVersionsRequest) GetAfterJsonOk() (*string, bool) {
	if o == nil || IsNil(o.AfterJson) {
		return nil, false
	}
	return o.AfterJson, true
}

// HasAfterJson returns a boolean if a field has been set.
func (o *ConfigSvcListVersionsRequest) HasAfterJson() bool {
	if o != nil && !IsNil(o.AfterJson) {
		return true
	}

	return false
}

// SetAfterJson gets a reference to the given string and assigns it to the AfterJson field.
func (o *ConfigSvcListVersionsRequest) SetAfterJson(v string) {
	o.AfterJson = &v
}

// GetAppHost returns the AppHost field value
func (o *ConfigSvcListVersionsRequest) GetAppHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppHost
}

// GetAppHostOk returns a tuple with the AppHost field value
// and a boolean to check if the value has been set.
func (o *ConfigSvcListVersionsRequest) GetAppHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppHost, true
}

// SetAppHost sets field value
func (o *ConfigSvcListVersionsRequest) SetAppHost(v string) {
	o.AppHost = v
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *ConfigSvcListVersionsRequest) GetIds() []string {
	if o == nil || IsNil(o.Ids) {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSvcListVersionsRequest) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *ConfigSvcListVersionsRequest) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *ConfigSvcListVersionsRequest) SetIds(v []string) {
	o.Ids = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ConfigSvcListVersionsRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSvcListVersionsRequest) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ConfigSvcListVersionsRequest) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *ConfigSvcListVersionsRequest) SetLimit(v int32) {
	o.Limit = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *ConfigSvcListVersionsRequest) GetSelector() map[string][]string {
	if o == nil || IsNil(o.Selector) {
		var ret map[string][]string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSvcListVersionsRequest) GetSelectorOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *ConfigSvcListVersionsRequest) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given map[string][]string and assigns it to the Selector field.
func (o *ConfigSvcListVersionsRequest) SetSelector(v map[string][]string) {
	o.Selector = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ConfigSvcListVersionsRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSvcListVersionsRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ConfigSvcListVersionsRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ConfigSvcListVersionsRequest) SetTags(v []string) {
	o.Tags = v
}

func (o ConfigSvcListVersionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigSvcListVersionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AfterJson) {
		toSerialize["afterJson"] = o.AfterJson
	}
	toSerialize["appHost"] = o.AppHost
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *ConfigSvcListVersionsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appHost",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigSvcListVersionsRequest := _ConfigSvcListVersionsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigSvcListVersionsRequest)

	if err != nil {
		return err
	}

	*o = ConfigSvcListVersionsRequest(varConfigSvcListVersionsRequest)

	return err
}

type NullableConfigSvcListVersionsRequest struct {
	value *ConfigSvcListVersionsRequest
	isSet bool
}

func (v NullableConfigSvcListVersionsRequest) Get() *ConfigSvcListVersionsRequest {
	return v.value
}

func (v *NullableConfigSvcListVersionsRequest) Set(val *ConfigSvcListVersionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigSvcListVersionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigSvcListVersionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigSvcListVersionsRequest(val *ConfigSvcListVersionsRequest) *NullableConfigSvcListVersionsRequest {
	return &NullableConfigSvcListVersionsRequest{value: val, isSet: true}
}

func (v NullableConfigSvcListVersionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigSvcListVersionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


