/*
1Backend

AI-native microservices platform.

API version: 0.8.0-rc1
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatastoreQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreQuery{}

// DatastoreQuery struct for DatastoreQuery
type DatastoreQuery struct {
	// After is used for cursor-based pagination, which is more effective in scalable and distributed environments compared to offset-based pagination. @openapi-any-array
	After []any `json:"after,omitempty"`
	// Count true means return the count of the dataset filtered by Filters without after or limit.
	Count *bool `json:"count,omitempty"`
	// Filters are filtering options of a query. It is advised to use It's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
	Filters []DatastoreFilter `json:"filters,omitempty"`
	// Limit the number of records in the result set.
	Limit *int32 `json:"limit,omitempty"`
	// OrderBys order the result set.
	OrderBys []DatastoreOrderBy `json:"orderBys,omitempty"`
}

// NewDatastoreQuery instantiates a new DatastoreQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreQuery() *DatastoreQuery {
	this := DatastoreQuery{}
	return &this
}

// NewDatastoreQueryWithDefaults instantiates a new DatastoreQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreQueryWithDefaults() *DatastoreQuery {
	this := DatastoreQuery{}
	return &this
}



// HasAfter returns a boolean if a field has been set.
func (o *DatastoreQuery) HasAfter() bool {
	if o != nil && !IsNil(o.After) {
		return true
	}

	return false
}




// HasCount returns a boolean if a field has been set.
func (o *DatastoreQuery) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}




// HasFilters returns a boolean if a field has been set.
func (o *DatastoreQuery) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}




// HasLimit returns a boolean if a field has been set.
func (o *DatastoreQuery) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}




// HasOrderBys returns a boolean if a field has been set.
func (o *DatastoreQuery) HasOrderBys() bool {
	if o != nil && !IsNil(o.OrderBys) {
		return true
	}

	return false
}


func (o DatastoreQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.After) {
		toSerialize["after"] = o.After
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.OrderBys) {
		toSerialize["orderBys"] = o.OrderBys
	}
	return toSerialize, nil
}

type NullableDatastoreQuery struct {
	value *DatastoreQuery
	isSet bool
}

func (v NullableDatastoreQuery) Get() *DatastoreQuery {
	return v.value
}

func (v *NullableDatastoreQuery) Set(val *DatastoreQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreQuery(val *DatastoreQuery) *NullableDatastoreQuery {
	return &NullableDatastoreQuery{value: val, isSet: true}
}

func (v NullableDatastoreQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


