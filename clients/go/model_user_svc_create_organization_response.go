/*
1Backend

AI-native microservices platform.

API version: 0.3.0-rc.30
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserSvcCreateOrganizationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcCreateOrganizationResponse{}

// UserSvcCreateOrganizationResponse struct for UserSvcCreateOrganizationResponse
type UserSvcCreateOrganizationResponse struct {
	Organization UserSvcOrganization `json:"organization"`
	// Due to the nature of JWT tokens, the token must be refreshed after creating an organization, as dynamic organization roles are embedded in it.
	Token UserSvcAuthToken `json:"token"`
}

type _UserSvcCreateOrganizationResponse UserSvcCreateOrganizationResponse

// NewUserSvcCreateOrganizationResponse instantiates a new UserSvcCreateOrganizationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcCreateOrganizationResponse(organization UserSvcOrganization, token UserSvcAuthToken) *UserSvcCreateOrganizationResponse {
	this := UserSvcCreateOrganizationResponse{}
	this.Organization = organization
	this.Token = token
	return &this
}

// NewUserSvcCreateOrganizationResponseWithDefaults instantiates a new UserSvcCreateOrganizationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcCreateOrganizationResponseWithDefaults() *UserSvcCreateOrganizationResponse {
	this := UserSvcCreateOrganizationResponse{}
	return &this
}

// GetOrganization returns the Organization field value
func (o *UserSvcCreateOrganizationResponse) GetOrganization() UserSvcOrganization {
	if o == nil {
		var ret UserSvcOrganization
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *UserSvcCreateOrganizationResponse) GetOrganizationOk() (*UserSvcOrganization, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *UserSvcCreateOrganizationResponse) SetOrganization(v UserSvcOrganization) {
	o.Organization = v
}

// GetToken returns the Token field value
func (o *UserSvcCreateOrganizationResponse) GetToken() UserSvcAuthToken {
	if o == nil {
		var ret UserSvcAuthToken
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *UserSvcCreateOrganizationResponse) GetTokenOk() (*UserSvcAuthToken, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *UserSvcCreateOrganizationResponse) SetToken(v UserSvcAuthToken) {
	o.Token = v
}

func (o UserSvcCreateOrganizationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcCreateOrganizationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["organization"] = o.Organization
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

func (o *UserSvcCreateOrganizationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organization",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSvcCreateOrganizationResponse := _UserSvcCreateOrganizationResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSvcCreateOrganizationResponse)

	if err != nil {
		return err
	}

	*o = UserSvcCreateOrganizationResponse(varUserSvcCreateOrganizationResponse)

	return err
}

type NullableUserSvcCreateOrganizationResponse struct {
	value *UserSvcCreateOrganizationResponse
	isSet bool
}

func (v NullableUserSvcCreateOrganizationResponse) Get() *UserSvcCreateOrganizationResponse {
	return v.value
}

func (v *NullableUserSvcCreateOrganizationResponse) Set(val *UserSvcCreateOrganizationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcCreateOrganizationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcCreateOrganizationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcCreateOrganizationResponse(val *UserSvcCreateOrganizationResponse) *NullableUserSvcCreateOrganizationResponse {
	return &NullableUserSvcCreateOrganizationResponse{value: val, isSet: true}
}

func (v NullableUserSvcCreateOrganizationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcCreateOrganizationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


