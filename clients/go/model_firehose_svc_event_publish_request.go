/*
OpenOrch

A language-agnostic microservices framework for building AI applications.

API version: 0.3.0-rc.29
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FirehoseSvcEventPublishRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirehoseSvcEventPublishRequest{}

// FirehoseSvcEventPublishRequest struct for FirehoseSvcEventPublishRequest
type FirehoseSvcEventPublishRequest struct {
	Event *FirehoseSvcEvent `json:"event,omitempty"`
}

// NewFirehoseSvcEventPublishRequest instantiates a new FirehoseSvcEventPublishRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirehoseSvcEventPublishRequest() *FirehoseSvcEventPublishRequest {
	this := FirehoseSvcEventPublishRequest{}
	return &this
}

// NewFirehoseSvcEventPublishRequestWithDefaults instantiates a new FirehoseSvcEventPublishRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirehoseSvcEventPublishRequestWithDefaults() *FirehoseSvcEventPublishRequest {
	this := FirehoseSvcEventPublishRequest{}
	return &this
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *FirehoseSvcEventPublishRequest) GetEvent() FirehoseSvcEvent {
	if o == nil || IsNil(o.Event) {
		var ret FirehoseSvcEvent
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirehoseSvcEventPublishRequest) GetEventOk() (*FirehoseSvcEvent, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *FirehoseSvcEventPublishRequest) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given FirehoseSvcEvent and assigns it to the Event field.
func (o *FirehoseSvcEventPublishRequest) SetEvent(v FirehoseSvcEvent) {
	o.Event = &v
}

func (o FirehoseSvcEventPublishRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirehoseSvcEventPublishRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	return toSerialize, nil
}

type NullableFirehoseSvcEventPublishRequest struct {
	value *FirehoseSvcEventPublishRequest
	isSet bool
}

func (v NullableFirehoseSvcEventPublishRequest) Get() *FirehoseSvcEventPublishRequest {
	return v.value
}

func (v *NullableFirehoseSvcEventPublishRequest) Set(val *FirehoseSvcEventPublishRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFirehoseSvcEventPublishRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFirehoseSvcEventPublishRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirehoseSvcEventPublishRequest(val *FirehoseSvcEventPublishRequest) *NullableFirehoseSvcEventPublishRequest {
	return &NullableFirehoseSvcEventPublishRequest{value: val, isSet: true}
}

func (v NullableFirehoseSvcEventPublishRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirehoseSvcEventPublishRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


