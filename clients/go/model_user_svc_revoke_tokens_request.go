/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserSvcRevokeTokensRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcRevokeTokensRequest{}

// UserSvcRevokeTokensRequest struct for UserSvcRevokeTokensRequest
type UserSvcRevokeTokensRequest struct {
	// If true, all tokens for the user will be revoked.
	AllTokens *bool `json:"allTokens,omitempty"`
	Device *string `json:"device,omitempty"`
	// Only used by admins (or whoever has the `user-svc:token:revoke` permission revoke tokens for other users
	UserId *string `json:"userId,omitempty"`
}

// NewUserSvcRevokeTokensRequest instantiates a new UserSvcRevokeTokensRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcRevokeTokensRequest() *UserSvcRevokeTokensRequest {
	this := UserSvcRevokeTokensRequest{}
	return &this
}

// NewUserSvcRevokeTokensRequestWithDefaults instantiates a new UserSvcRevokeTokensRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcRevokeTokensRequestWithDefaults() *UserSvcRevokeTokensRequest {
	this := UserSvcRevokeTokensRequest{}
	return &this
}



// HasAllTokens returns a boolean if a field has been set.
func (o *UserSvcRevokeTokensRequest) HasAllTokens() bool {
	if o != nil && !IsNil(o.AllTokens) {
		return true
	}

	return false
}




// HasDevice returns a boolean if a field has been set.
func (o *UserSvcRevokeTokensRequest) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}




// HasUserId returns a boolean if a field has been set.
func (o *UserSvcRevokeTokensRequest) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}


func (o UserSvcRevokeTokensRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcRevokeTokensRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllTokens) {
		toSerialize["allTokens"] = o.AllTokens
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableUserSvcRevokeTokensRequest struct {
	value *UserSvcRevokeTokensRequest
	isSet bool
}

func (v NullableUserSvcRevokeTokensRequest) Get() *UserSvcRevokeTokensRequest {
	return v.value
}

func (v *NullableUserSvcRevokeTokensRequest) Set(val *UserSvcRevokeTokensRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcRevokeTokensRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcRevokeTokensRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcRevokeTokensRequest(val *UserSvcRevokeTokensRequest) *NullableUserSvcRevokeTokensRequest {
	return &NullableUserSvcRevokeTokensRequest{value: val, isSet: true}
}

func (v NullableUserSvcRevokeTokensRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcRevokeTokensRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


