// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package openapi is a generated GoMock package.
package openapi

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPolicySvcAPI is a mock of PolicySvcAPI interface.
type MockPolicySvcAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPolicySvcAPIMockRecorder
	isgomock struct{}
}

// MockPolicySvcAPIMockRecorder is the mock recorder for MockPolicySvcAPI.
type MockPolicySvcAPIMockRecorder struct {
	mock *MockPolicySvcAPI
}

// NewMockPolicySvcAPI creates a new mock instance.
func NewMockPolicySvcAPI(ctrl *gomock.Controller) *MockPolicySvcAPI {
	mock := &MockPolicySvcAPI{ctrl: ctrl}
	mock.recorder = &MockPolicySvcAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicySvcAPI) EXPECT() *MockPolicySvcAPIMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockPolicySvcAPI) Check(ctx context.Context) ApiCheckRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx)
	ret0, _ := ret[0].(ApiCheckRequest)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockPolicySvcAPIMockRecorder) Check(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockPolicySvcAPI)(nil).Check), ctx)
}

// CheckExecute mocks base method.
func (m *MockPolicySvcAPI) CheckExecute(r ApiCheckRequest) (*PolicySvcCheckResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExecute", r)
	ret0, _ := ret[0].(*PolicySvcCheckResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckExecute indicates an expected call of CheckExecute.
func (mr *MockPolicySvcAPIMockRecorder) CheckExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExecute", reflect.TypeOf((*MockPolicySvcAPI)(nil).CheckExecute), r)
}

// UpsertInstance mocks base method.
func (m *MockPolicySvcAPI) UpsertInstance(ctx context.Context, instanceId string) ApiUpsertInstanceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertInstance", ctx, instanceId)
	ret0, _ := ret[0].(ApiUpsertInstanceRequest)
	return ret0
}

// UpsertInstance indicates an expected call of UpsertInstance.
func (mr *MockPolicySvcAPIMockRecorder) UpsertInstance(ctx, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInstance", reflect.TypeOf((*MockPolicySvcAPI)(nil).UpsertInstance), ctx, instanceId)
}

// UpsertInstanceExecute mocks base method.
func (m *MockPolicySvcAPI) UpsertInstanceExecute(r ApiUpsertInstanceRequest) (map[string]any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertInstanceExecute", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertInstanceExecute indicates an expected call of UpsertInstanceExecute.
func (mr *MockPolicySvcAPIMockRecorder) UpsertInstanceExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInstanceExecute", reflect.TypeOf((*MockPolicySvcAPI)(nil).UpsertInstanceExecute), r)
}
