/*
1Backend

AI-native microservices platform.

API version: 0.3.0-rc.31
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserSvcNewInvite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcNewInvite{}

// UserSvcNewInvite struct for UserSvcNewInvite
type UserSvcNewInvite struct {
	ContactId string `json:"contactId"`
	Id *string `json:"id,omitempty"`
	RoleId string `json:"roleId"`
}

type _UserSvcNewInvite UserSvcNewInvite

// NewUserSvcNewInvite instantiates a new UserSvcNewInvite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcNewInvite(contactId string, roleId string) *UserSvcNewInvite {
	this := UserSvcNewInvite{}
	this.ContactId = contactId
	this.RoleId = roleId
	return &this
}

// NewUserSvcNewInviteWithDefaults instantiates a new UserSvcNewInvite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcNewInviteWithDefaults() *UserSvcNewInvite {
	this := UserSvcNewInvite{}
	return &this
}

// GetContactId returns the ContactId field value
func (o *UserSvcNewInvite) GetContactId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContactId
}

// GetContactIdOk returns a tuple with the ContactId field value
// and a boolean to check if the value has been set.
func (o *UserSvcNewInvite) GetContactIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContactId, true
}

// SetContactId sets field value
func (o *UserSvcNewInvite) SetContactId(v string) {
	o.ContactId = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserSvcNewInvite) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSvcNewInvite) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserSvcNewInvite) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserSvcNewInvite) SetId(v string) {
	o.Id = &v
}

// GetRoleId returns the RoleId field value
func (o *UserSvcNewInvite) GetRoleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value
// and a boolean to check if the value has been set.
func (o *UserSvcNewInvite) GetRoleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleId, true
}

// SetRoleId sets field value
func (o *UserSvcNewInvite) SetRoleId(v string) {
	o.RoleId = v
}

func (o UserSvcNewInvite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcNewInvite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contactId"] = o.ContactId
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["roleId"] = o.RoleId
	return toSerialize, nil
}

func (o *UserSvcNewInvite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contactId",
		"roleId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSvcNewInvite := _UserSvcNewInvite{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSvcNewInvite)

	if err != nil {
		return err
	}

	*o = UserSvcNewInvite(varUserSvcNewInvite)

	return err
}

type NullableUserSvcNewInvite struct {
	value *UserSvcNewInvite
	isSet bool
}

func (v NullableUserSvcNewInvite) Get() *UserSvcNewInvite {
	return v.value
}

func (v *NullableUserSvcNewInvite) Set(val *UserSvcNewInvite) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcNewInvite) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcNewInvite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcNewInvite(val *UserSvcNewInvite) *NullableUserSvcNewInvite {
	return &NullableUserSvcNewInvite{value: val, isSet: true}
}

func (v NullableUserSvcNewInvite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcNewInvite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


