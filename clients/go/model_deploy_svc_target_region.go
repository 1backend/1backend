/*
OpenOrch

A language-agnostic microservices framework for building AI applications.

API version: 0.3.0-rc.29
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeploySvcTargetRegion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploySvcTargetRegion{}

// DeploySvcTargetRegion struct for DeploySvcTargetRegion
type DeploySvcTargetRegion struct {
	// Cluster or node where service should be deployed (e.g., \"us-west1\", \"local-docker\")
	Cluster *string `json:"cluster,omitempty"`
	// Optional: Specific zone for the deployment
	Zone *string `json:"zone,omitempty"`
}

// NewDeploySvcTargetRegion instantiates a new DeploySvcTargetRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploySvcTargetRegion() *DeploySvcTargetRegion {
	this := DeploySvcTargetRegion{}
	return &this
}

// NewDeploySvcTargetRegionWithDefaults instantiates a new DeploySvcTargetRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploySvcTargetRegionWithDefaults() *DeploySvcTargetRegion {
	this := DeploySvcTargetRegion{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *DeploySvcTargetRegion) GetCluster() string {
	if o == nil || IsNil(o.Cluster) {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploySvcTargetRegion) GetClusterOk() (*string, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *DeploySvcTargetRegion) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the Cluster field.
func (o *DeploySvcTargetRegion) SetCluster(v string) {
	o.Cluster = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *DeploySvcTargetRegion) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploySvcTargetRegion) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *DeploySvcTargetRegion) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *DeploySvcTargetRegion) SetZone(v string) {
	o.Zone = &v
}

func (o DeploySvcTargetRegion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploySvcTargetRegion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

type NullableDeploySvcTargetRegion struct {
	value *DeploySvcTargetRegion
	isSet bool
}

func (v NullableDeploySvcTargetRegion) Get() *DeploySvcTargetRegion {
	return v.value
}

func (v *NullableDeploySvcTargetRegion) Set(val *DeploySvcTargetRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploySvcTargetRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploySvcTargetRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploySvcTargetRegion(val *DeploySvcTargetRegion) *NullableDeploySvcTargetRegion {
	return &NullableDeploySvcTargetRegion{value: val, isSet: true}
}

func (v NullableDeploySvcTargetRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploySvcTargetRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


