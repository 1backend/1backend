/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeploySvcDeployment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploySvcDeployment{}

// DeploySvcDeployment struct for DeploySvcDeployment
type DeploySvcDeployment struct {
	// Optional: Auto-scaling rules
	AutoScaling *DeploySvcAutoScalingConfig `json:"autoScaling,omitempty"`
	// DefinitionId is the id of the definition
	DefinitionId string `json:"definitionId"`
	// Description of what this deployment does
	Description *string `json:"description,omitempty"`
	// Details provides additional information about the deployment's current state, including both success and failure conditions (e.g., \"Deployment in progress\", \"Error pulling image\").
	Details *string `json:"details,omitempty"`
	// Envars is a map of environment variables that will be passed down to service instances (see Registry Svc Instance) Also see the Registry Svc Definition for required envars.
	Envars *map[string]string `json:"envars,omitempty"`
	// ID of the deployment (e.g., \"depl_dbOdi5eLQK\")
	Id string `json:"id"`
	// Short name for easy reference (e.g., \"user-service-v2\")
	Name *string `json:"name,omitempty"`
	// Number of container instances to run
	Replicas *int32 `json:"replicas,omitempty"`
	// Resource requirements for each replica
	Resources *DeploySvcResourceLimits `json:"resources,omitempty"`
	// Current status of the deployment (e.g., \"OK\", \"Error\", \"Pending\")
	Status *DeploySvcDeploymentStatus `json:"status,omitempty"`
	// Deployment strategy (e.g., rolling update)
	Strategy *DeploySvcDeploymentStrategy `json:"strategy,omitempty"`
	// Target deployment regions or clusters
	TargetRegions []DeploySvcTargetRegion `json:"targetRegions,omitempty"`
}

type _DeploySvcDeployment DeploySvcDeployment

// NewDeploySvcDeployment instantiates a new DeploySvcDeployment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploySvcDeployment(definitionId string, id string) *DeploySvcDeployment {
	this := DeploySvcDeployment{}
	this.DefinitionId = definitionId
	this.Id = id
	return &this
}

// NewDeploySvcDeploymentWithDefaults instantiates a new DeploySvcDeployment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploySvcDeploymentWithDefaults() *DeploySvcDeployment {
	this := DeploySvcDeployment{}
	return &this
}



// HasAutoScaling returns a boolean if a field has been set.
func (o *DeploySvcDeployment) HasAutoScaling() bool {
	if o != nil && !IsNil(o.AutoScaling) {
		return true
	}

	return false
}







// HasDescription returns a boolean if a field has been set.
func (o *DeploySvcDeployment) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}




// HasDetails returns a boolean if a field has been set.
func (o *DeploySvcDeployment) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}




// HasEnvars returns a boolean if a field has been set.
func (o *DeploySvcDeployment) HasEnvars() bool {
	if o != nil && !IsNil(o.Envars) {
		return true
	}

	return false
}







// HasName returns a boolean if a field has been set.
func (o *DeploySvcDeployment) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}




// HasReplicas returns a boolean if a field has been set.
func (o *DeploySvcDeployment) HasReplicas() bool {
	if o != nil && !IsNil(o.Replicas) {
		return true
	}

	return false
}




// HasResources returns a boolean if a field has been set.
func (o *DeploySvcDeployment) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}




// HasStatus returns a boolean if a field has been set.
func (o *DeploySvcDeployment) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}




// HasStrategy returns a boolean if a field has been set.
func (o *DeploySvcDeployment) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}




// HasTargetRegions returns a boolean if a field has been set.
func (o *DeploySvcDeployment) HasTargetRegions() bool {
	if o != nil && !IsNil(o.TargetRegions) {
		return true
	}

	return false
}


func (o DeploySvcDeployment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploySvcDeployment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoScaling) {
		toSerialize["autoScaling"] = o.AutoScaling
	}
	toSerialize["definitionId"] = o.DefinitionId
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Envars) {
		toSerialize["envars"] = o.Envars
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Replicas) {
		toSerialize["replicas"] = o.Replicas
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	if !IsNil(o.TargetRegions) {
		toSerialize["targetRegions"] = o.TargetRegions
	}
	return toSerialize, nil
}

func (o *DeploySvcDeployment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"definitionId",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploySvcDeployment := _DeploySvcDeployment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeploySvcDeployment)

	if err != nil {
		return err
	}

	*o = DeploySvcDeployment(varDeploySvcDeployment)

	return err
}

type NullableDeploySvcDeployment struct {
	value *DeploySvcDeployment
	isSet bool
}

func (v NullableDeploySvcDeployment) Get() *DeploySvcDeployment {
	return v.value
}

func (v *NullableDeploySvcDeployment) Set(val *DeploySvcDeployment) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploySvcDeployment) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploySvcDeployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploySvcDeployment(val *DeploySvcDeployment) *NullableDeploySvcDeployment {
	return &NullableDeploySvcDeployment{value: val, isSet: true}
}

func (v NullableDeploySvcDeployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploySvcDeployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


