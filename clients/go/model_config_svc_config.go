/*
1Backend

AI-native microservices platform.

API version: 0.8.0-rc2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigSvcConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigSvcConfig{}

// ConfigSvcConfig struct for ConfigSvcConfig
type ConfigSvcConfig struct {
	App *string `json:"app,omitempty"`
	CreatedAt string `json:"createdAt"`
	Data map[string]interface{} `json:"data"`
	DataJson string `json:"dataJson"`
	// Id of the config. It is deterministically created from the app and the key.
	Id string `json:"id"`
	Key *string `json:"key,omitempty"`
	UpdatedAt string `json:"updatedAt"`
}

type _ConfigSvcConfig ConfigSvcConfig

// NewConfigSvcConfig instantiates a new ConfigSvcConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigSvcConfig(createdAt string, data map[string]interface{}, dataJson string, id string, updatedAt string) *ConfigSvcConfig {
	this := ConfigSvcConfig{}
	this.CreatedAt = createdAt
	this.Data = data
	this.DataJson = dataJson
	this.Id = id
	this.UpdatedAt = updatedAt
	return &this
}

// NewConfigSvcConfigWithDefaults instantiates a new ConfigSvcConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigSvcConfigWithDefaults() *ConfigSvcConfig {
	this := ConfigSvcConfig{}
	return &this
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *ConfigSvcConfig) GetApp() string {
	if o == nil || IsNil(o.App) {
		var ret string
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSvcConfig) GetAppOk() (*string, bool) {
	if o == nil || IsNil(o.App) {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *ConfigSvcConfig) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}

// SetApp gets a reference to the given string and assigns it to the App field.
func (o *ConfigSvcConfig) SetApp(v string) {
	o.App = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ConfigSvcConfig) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ConfigSvcConfig) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ConfigSvcConfig) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetData returns the Data field value
func (o *ConfigSvcConfig) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ConfigSvcConfig) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ConfigSvcConfig) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetDataJson returns the DataJson field value
func (o *ConfigSvcConfig) GetDataJson() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataJson
}

// GetDataJsonOk returns a tuple with the DataJson field value
// and a boolean to check if the value has been set.
func (o *ConfigSvcConfig) GetDataJsonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataJson, true
}

// SetDataJson sets field value
func (o *ConfigSvcConfig) SetDataJson(v string) {
	o.DataJson = v
}

// GetId returns the Id field value
func (o *ConfigSvcConfig) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConfigSvcConfig) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConfigSvcConfig) SetId(v string) {
	o.Id = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ConfigSvcConfig) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigSvcConfig) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ConfigSvcConfig) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ConfigSvcConfig) SetKey(v string) {
	o.Key = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ConfigSvcConfig) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ConfigSvcConfig) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ConfigSvcConfig) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

func (o ConfigSvcConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigSvcConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["data"] = o.Data
	toSerialize["dataJson"] = o.DataJson
	toSerialize["id"] = o.Id
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *ConfigSvcConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"data",
		"dataJson",
		"id",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigSvcConfig := _ConfigSvcConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigSvcConfig)

	if err != nil {
		return err
	}

	*o = ConfigSvcConfig(varConfigSvcConfig)

	return err
}

type NullableConfigSvcConfig struct {
	value *ConfigSvcConfig
	isSet bool
}

func (v NullableConfigSvcConfig) Get() *ConfigSvcConfig {
	return v.value
}

func (v *NullableConfigSvcConfig) Set(val *ConfigSvcConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigSvcConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigSvcConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigSvcConfig(val *ConfigSvcConfig) *NullableConfigSvcConfig {
	return &NullableConfigSvcConfig{value: val, isSet: true}
}

func (v NullableConfigSvcConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigSvcConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


