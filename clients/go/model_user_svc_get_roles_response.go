/*
OpenOrch

A language-agnostic microservices framework for building AI applications.

API version: 0.3.0-rc.29
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserSvcGetRolesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcGetRolesResponse{}

// UserSvcGetRolesResponse struct for UserSvcGetRolesResponse
type UserSvcGetRolesResponse struct {
	Roles []UserSvcRole `json:"roles,omitempty"`
}

// NewUserSvcGetRolesResponse instantiates a new UserSvcGetRolesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcGetRolesResponse() *UserSvcGetRolesResponse {
	this := UserSvcGetRolesResponse{}
	return &this
}

// NewUserSvcGetRolesResponseWithDefaults instantiates a new UserSvcGetRolesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcGetRolesResponseWithDefaults() *UserSvcGetRolesResponse {
	this := UserSvcGetRolesResponse{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UserSvcGetRolesResponse) GetRoles() []UserSvcRole {
	if o == nil || IsNil(o.Roles) {
		var ret []UserSvcRole
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSvcGetRolesResponse) GetRolesOk() ([]UserSvcRole, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UserSvcGetRolesResponse) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []UserSvcRole and assigns it to the Roles field.
func (o *UserSvcGetRolesResponse) SetRoles(v []UserSvcRole) {
	o.Roles = v
}

func (o UserSvcGetRolesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcGetRolesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableUserSvcGetRolesResponse struct {
	value *UserSvcGetRolesResponse
	isSet bool
}

func (v NullableUserSvcGetRolesResponse) Get() *UserSvcGetRolesResponse {
	return v.value
}

func (v *NullableUserSvcGetRolesResponse) Set(val *UserSvcGetRolesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcGetRolesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcGetRolesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcGetRolesResponse(val *UserSvcGetRolesResponse) *NullableUserSvcGetRolesResponse {
	return &NullableUserSvcGetRolesResponse{value: val, isSet: true}
}

func (v NullableUserSvcGetRolesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcGetRolesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


