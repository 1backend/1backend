/*
1Backend

AI-native microservices platform.

API version: 0.7.6
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserSvcPermit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSvcPermit{}

// UserSvcPermit struct for UserSvcPermit
type UserSvcPermit struct {
	// App of the permit. Use `*` to match all apps, such as when bootstrapping in services.
	App *string `json:"app,omitempty"`
	CreatedAt string `json:"createdAt"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Id string `json:"id"`
	Permission string `json:"permission"`
	// Role IDs that have been permited the specified permission.  Originally, permits were designed for slugs to facilitate service-to-service calls. Due to their convenience—especially with CLI and infrastructure-as-code support—they were later extended to roles.
	Roles []string `json:"roles,omitempty"`
	// Slugs that have been permited the specified permission.
	Slugs []string `json:"slugs,omitempty"`
	UpdatedAt string `json:"updatedAt"`
}

type _UserSvcPermit UserSvcPermit

// NewUserSvcPermit instantiates a new UserSvcPermit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSvcPermit(createdAt string, id string, permission string, updatedAt string) *UserSvcPermit {
	this := UserSvcPermit{}
	this.CreatedAt = createdAt
	this.Id = id
	this.Permission = permission
	this.UpdatedAt = updatedAt
	return &this
}

// NewUserSvcPermitWithDefaults instantiates a new UserSvcPermit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSvcPermitWithDefaults() *UserSvcPermit {
	this := UserSvcPermit{}
	return &this
}



// HasApp returns a boolean if a field has been set.
func (o *UserSvcPermit) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}







// HasDeletedAt returns a boolean if a field has been set.
func (o *UserSvcPermit) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}










// HasRoles returns a boolean if a field has been set.
func (o *UserSvcPermit) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}




// HasSlugs returns a boolean if a field has been set.
func (o *UserSvcPermit) HasSlugs() bool {
	if o != nil && !IsNil(o.Slugs) {
		return true
	}

	return false
}





func (o UserSvcPermit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSvcPermit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	toSerialize["id"] = o.Id
	toSerialize["permission"] = o.Permission
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Slugs) {
		toSerialize["slugs"] = o.Slugs
	}
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *UserSvcPermit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"id",
		"permission",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSvcPermit := _UserSvcPermit{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSvcPermit)

	if err != nil {
		return err
	}

	*o = UserSvcPermit(varUserSvcPermit)

	return err
}

type NullableUserSvcPermit struct {
	value *UserSvcPermit
	isSet bool
}

func (v NullableUserSvcPermit) Get() *UserSvcPermit {
	return v.value
}

func (v *NullableUserSvcPermit) Set(val *UserSvcPermit) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSvcPermit) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSvcPermit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSvcPermit(val *UserSvcPermit) *NullableUserSvcPermit {
	return &NullableUserSvcPermit{value: val, isSet: true}
}

func (v NullableUserSvcPermit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSvcPermit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


