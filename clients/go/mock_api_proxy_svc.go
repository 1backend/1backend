// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package openapi is a generated GoMock package.
package openapi

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProxySvcAPI is a mock of ProxySvcAPI interface.
type MockProxySvcAPI struct {
	ctrl     *gomock.Controller
	recorder *MockProxySvcAPIMockRecorder
	isgomock struct{}
}

// MockProxySvcAPIMockRecorder is the mock recorder for MockProxySvcAPI.
type MockProxySvcAPIMockRecorder struct {
	mock *MockProxySvcAPI
}

// NewMockProxySvcAPI creates a new mock instance.
func NewMockProxySvcAPI(ctrl *gomock.Controller) *MockProxySvcAPI {
	mock := &MockProxySvcAPI{ctrl: ctrl}
	mock.recorder = &MockProxySvcAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxySvcAPI) EXPECT() *MockProxySvcAPIMockRecorder {
	return m.recorder
}

// ListCerts mocks base method.
func (m *MockProxySvcAPI) ListCerts(ctx context.Context) ApiListCertsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCerts", ctx)
	ret0, _ := ret[0].(ApiListCertsRequest)
	return ret0
}

// ListCerts indicates an expected call of ListCerts.
func (mr *MockProxySvcAPIMockRecorder) ListCerts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCerts", reflect.TypeOf((*MockProxySvcAPI)(nil).ListCerts), ctx)
}

// ListCertsExecute mocks base method.
func (m *MockProxySvcAPI) ListCertsExecute(r ApiListCertsRequest) (*ProxySvcListCertsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertsExecute", r)
	ret0, _ := ret[0].(*ProxySvcListCertsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCertsExecute indicates an expected call of ListCertsExecute.
func (mr *MockProxySvcAPIMockRecorder) ListCertsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertsExecute", reflect.TypeOf((*MockProxySvcAPI)(nil).ListCertsExecute), r)
}

// ListRoutes mocks base method.
func (m *MockProxySvcAPI) ListRoutes(ctx context.Context) ApiListRoutesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutes", ctx)
	ret0, _ := ret[0].(ApiListRoutesRequest)
	return ret0
}

// ListRoutes indicates an expected call of ListRoutes.
func (mr *MockProxySvcAPIMockRecorder) ListRoutes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutes", reflect.TypeOf((*MockProxySvcAPI)(nil).ListRoutes), ctx)
}

// ListRoutesExecute mocks base method.
func (m *MockProxySvcAPI) ListRoutesExecute(r ApiListRoutesRequest) (*ProxySvcListRoutesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutesExecute", r)
	ret0, _ := ret[0].(*ProxySvcListRoutesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRoutesExecute indicates an expected call of ListRoutesExecute.
func (mr *MockProxySvcAPIMockRecorder) ListRoutesExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesExecute", reflect.TypeOf((*MockProxySvcAPI)(nil).ListRoutesExecute), r)
}

// SaveRoutes mocks base method.
func (m *MockProxySvcAPI) SaveRoutes(ctx context.Context) ApiSaveRoutesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRoutes", ctx)
	ret0, _ := ret[0].(ApiSaveRoutesRequest)
	return ret0
}

// SaveRoutes indicates an expected call of SaveRoutes.
func (mr *MockProxySvcAPIMockRecorder) SaveRoutes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRoutes", reflect.TypeOf((*MockProxySvcAPI)(nil).SaveRoutes), ctx)
}

// SaveRoutesExecute mocks base method.
func (m *MockProxySvcAPI) SaveRoutesExecute(r ApiSaveRoutesRequest) (*ProxySvcSaveRoutesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRoutesExecute", r)
	ret0, _ := ret[0].(*ProxySvcSaveRoutesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SaveRoutesExecute indicates an expected call of SaveRoutesExecute.
func (mr *MockProxySvcAPIMockRecorder) SaveRoutesExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRoutesExecute", reflect.TypeOf((*MockProxySvcAPI)(nil).SaveRoutesExecute), r)
}
