/*
1Backend

AI-native microservices platform.

API version: 0.8.0-rc1
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelSvcModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelSvcModel{}

// ModelSvcModel struct for ModelSvcModel
type ModelSvcModel struct {
	Assets []ModelSvcAsset `json:"assets,omitempty"`
	Bits *int32 `json:"bits,omitempty"`
	Description *string `json:"description,omitempty"`
	Extension *string `json:"extension,omitempty"`
	Flavour *string `json:"flavour,omitempty"`
	FullName *string `json:"fullName,omitempty"`
	Id string `json:"id"`
	MaxBits *int32 `json:"maxBits,omitempty"`
	MaxRam *float32 `json:"maxRam,omitempty"`
	Mirrors []string `json:"mirrors,omitempty"`
	Name string `json:"name"`
	Parameters *string `json:"parameters,omitempty"`
	PlatformId string `json:"platformId"`
	PromptTemplate *string `json:"promptTemplate,omitempty"`
	Quality *string `json:"quality,omitempty"`
	QuantComment *string `json:"quantComment,omitempty"`
	Size *float32 `json:"size,omitempty"`
	Tags []string `json:"tags,omitempty"`
	Uncensored *bool `json:"uncensored,omitempty"`
	Version *string `json:"version,omitempty"`
}

type _ModelSvcModel ModelSvcModel

// NewModelSvcModel instantiates a new ModelSvcModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelSvcModel(id string, name string, platformId string) *ModelSvcModel {
	this := ModelSvcModel{}
	this.Id = id
	this.Name = name
	this.PlatformId = platformId
	return &this
}

// NewModelSvcModelWithDefaults instantiates a new ModelSvcModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelSvcModelWithDefaults() *ModelSvcModel {
	this := ModelSvcModel{}
	return &this
}



// HasAssets returns a boolean if a field has been set.
func (o *ModelSvcModel) HasAssets() bool {
	if o != nil && !IsNil(o.Assets) {
		return true
	}

	return false
}




// HasBits returns a boolean if a field has been set.
func (o *ModelSvcModel) HasBits() bool {
	if o != nil && !IsNil(o.Bits) {
		return true
	}

	return false
}




// HasDescription returns a boolean if a field has been set.
func (o *ModelSvcModel) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}




// HasExtension returns a boolean if a field has been set.
func (o *ModelSvcModel) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}




// HasFlavour returns a boolean if a field has been set.
func (o *ModelSvcModel) HasFlavour() bool {
	if o != nil && !IsNil(o.Flavour) {
		return true
	}

	return false
}




// HasFullName returns a boolean if a field has been set.
func (o *ModelSvcModel) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}







// HasMaxBits returns a boolean if a field has been set.
func (o *ModelSvcModel) HasMaxBits() bool {
	if o != nil && !IsNil(o.MaxBits) {
		return true
	}

	return false
}




// HasMaxRam returns a boolean if a field has been set.
func (o *ModelSvcModel) HasMaxRam() bool {
	if o != nil && !IsNil(o.MaxRam) {
		return true
	}

	return false
}




// HasMirrors returns a boolean if a field has been set.
func (o *ModelSvcModel) HasMirrors() bool {
	if o != nil && !IsNil(o.Mirrors) {
		return true
	}

	return false
}







// HasParameters returns a boolean if a field has been set.
func (o *ModelSvcModel) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}







// HasPromptTemplate returns a boolean if a field has been set.
func (o *ModelSvcModel) HasPromptTemplate() bool {
	if o != nil && !IsNil(o.PromptTemplate) {
		return true
	}

	return false
}




// HasQuality returns a boolean if a field has been set.
func (o *ModelSvcModel) HasQuality() bool {
	if o != nil && !IsNil(o.Quality) {
		return true
	}

	return false
}




// HasQuantComment returns a boolean if a field has been set.
func (o *ModelSvcModel) HasQuantComment() bool {
	if o != nil && !IsNil(o.QuantComment) {
		return true
	}

	return false
}




// HasSize returns a boolean if a field has been set.
func (o *ModelSvcModel) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}




// HasTags returns a boolean if a field has been set.
func (o *ModelSvcModel) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}




// HasUncensored returns a boolean if a field has been set.
func (o *ModelSvcModel) HasUncensored() bool {
	if o != nil && !IsNil(o.Uncensored) {
		return true
	}

	return false
}




// HasVersion returns a boolean if a field has been set.
func (o *ModelSvcModel) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}


func (o ModelSvcModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelSvcModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assets) {
		toSerialize["assets"] = o.Assets
	}
	if !IsNil(o.Bits) {
		toSerialize["bits"] = o.Bits
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.Flavour) {
		toSerialize["flavour"] = o.Flavour
	}
	if !IsNil(o.FullName) {
		toSerialize["fullName"] = o.FullName
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.MaxBits) {
		toSerialize["maxBits"] = o.MaxBits
	}
	if !IsNil(o.MaxRam) {
		toSerialize["maxRam"] = o.MaxRam
	}
	if !IsNil(o.Mirrors) {
		toSerialize["mirrors"] = o.Mirrors
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	toSerialize["platformId"] = o.PlatformId
	if !IsNil(o.PromptTemplate) {
		toSerialize["promptTemplate"] = o.PromptTemplate
	}
	if !IsNil(o.Quality) {
		toSerialize["quality"] = o.Quality
	}
	if !IsNil(o.QuantComment) {
		toSerialize["quantComment"] = o.QuantComment
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Uncensored) {
		toSerialize["uncensored"] = o.Uncensored
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *ModelSvcModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"platformId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelSvcModel := _ModelSvcModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelSvcModel)

	if err != nil {
		return err
	}

	*o = ModelSvcModel(varModelSvcModel)

	return err
}

type NullableModelSvcModel struct {
	value *ModelSvcModel
	isSet bool
}

func (v NullableModelSvcModel) Get() *ModelSvcModel {
	return v.value
}

func (v *NullableModelSvcModel) Set(val *ModelSvcModel) {
	v.value = val
	v.isSet = true
}

func (v NullableModelSvcModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModelSvcModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelSvcModel(val *ModelSvcModel) *NullableModelSvcModel {
	return &NullableModelSvcModel{value: val, isSet: true}
}

func (v NullableModelSvcModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelSvcModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


