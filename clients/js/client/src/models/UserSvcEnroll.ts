/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.1
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserSvcEnroll
 */
export interface UserSvcEnroll {
    /**
     * App of the enroll.
     * Use `*` to match all apps, such as when bootstrapping
     * in services.
     * @type {string}
     * @memberof UserSvcEnroll
     */
    appId: string;
    /**
     * ContactId is the the recipient of the enroll.
     * If the user is already registered, the role is assigned immediately;
     * otherwise, it is applied upon registration.
     * @type {string}
     * @memberof UserSvcEnroll
     */
    contactId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcEnroll
     */
    createdAt: string;
    /**
     * CreatedBy contains the ID of the user who created the Enroll.
     * @type {string}
     * @memberof UserSvcEnroll
     */
    createdBy?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcEnroll
     */
    deletedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcEnroll
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcEnroll
     */
    internalId?: string;
    /**
     * Role specifies the role to be assigned to the ContactId.
     * Callers can only assign roles they own, identified by their service slug
     * (e.g., if "my-service" creates an enroll, the role must be "my-service:admin").
     * Dynamic organization roles can also be assigned
     * (e.g., "user-svc:org:{%orgId}:admin" or "user-svc:org:{%orgId}:user"),
     * but in this case, the caller must be an admin of the target organization.
     * @type {string}
     * @memberof UserSvcEnroll
     */
    role: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcEnroll
     */
    updatedAt: string;
    /**
     * UserId is the recipient of the enroll.
     * If the user is already registered, the role is assigned immediately;
     * otherwise, it is applied upon registration.
     * @type {string}
     * @memberof UserSvcEnroll
     */
    userId?: string;
}

/**
 * Check if a given object implements the UserSvcEnroll interface.
 */
export function instanceOfUserSvcEnroll(value: object): value is UserSvcEnroll {
    if (!('appId' in value) || value['appId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function UserSvcEnrollFromJSON(json: any): UserSvcEnroll {
    return UserSvcEnrollFromJSONTyped(json, false);
}

export function UserSvcEnrollFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSvcEnroll {
    if (json == null) {
        return json;
    }
    return {
        
        'appId': json['appId'],
        'contactId': json['contactId'] == null ? undefined : json['contactId'],
        'createdAt': json['createdAt'],
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'deletedAt': json['deletedAt'] == null ? undefined : json['deletedAt'],
        'id': json['id'],
        'internalId': json['internalId'] == null ? undefined : json['internalId'],
        'role': json['role'],
        'updatedAt': json['updatedAt'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}

export function UserSvcEnrollToJSON(json: any): UserSvcEnroll {
    return UserSvcEnrollToJSONTyped(json, false);
}

export function UserSvcEnrollToJSONTyped(value?: UserSvcEnroll | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'appId': value['appId'],
        'contactId': value['contactId'],
        'createdAt': value['createdAt'],
        'createdBy': value['createdBy'],
        'deletedAt': value['deletedAt'],
        'id': value['id'],
        'internalId': value['internalId'],
        'role': value['role'],
        'updatedAt': value['updatedAt'],
        'userId': value['userId'],
    };
}

