/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.0-rc3
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ChatSvcEventMessageAdded } from './ChatSvcEventMessageAdded';
import {
    instanceOfChatSvcEventMessageAdded,
    ChatSvcEventMessageAddedFromJSON,
    ChatSvcEventMessageAddedFromJSONTyped,
    ChatSvcEventMessageAddedToJSON,
} from './ChatSvcEventMessageAdded';
import type { ChatSvcEventThreadAdded } from './ChatSvcEventThreadAdded';
import {
    instanceOfChatSvcEventThreadAdded,
    ChatSvcEventThreadAddedFromJSON,
    ChatSvcEventThreadAddedFromJSONTyped,
    ChatSvcEventThreadAddedToJSON,
} from './ChatSvcEventThreadAdded';
import type { ChatSvcEventThreadUpdate } from './ChatSvcEventThreadUpdate';
import {
    instanceOfChatSvcEventThreadUpdate,
    ChatSvcEventThreadUpdateFromJSON,
    ChatSvcEventThreadUpdateFromJSONTyped,
    ChatSvcEventThreadUpdateToJSON,
} from './ChatSvcEventThreadUpdate';

/**
 * @type Events200Response
 * 
 * @export
 */
export type Events200Response = ChatSvcEventMessageAdded | ChatSvcEventThreadAdded | ChatSvcEventThreadUpdate;

export function Events200ResponseFromJSON(json: any): Events200Response {
    return Events200ResponseFromJSONTyped(json, false);
}

export function Events200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Events200Response {
    if (json == null) {
        return json;
    }
    if (typeof json !== 'object') {
        return json;
    }
    if (instanceOfChatSvcEventMessageAdded(json)) {
        return ChatSvcEventMessageAddedFromJSONTyped(json, true);
    }
    if (instanceOfChatSvcEventThreadAdded(json)) {
        return ChatSvcEventThreadAddedFromJSONTyped(json, true);
    }
    if (instanceOfChatSvcEventThreadUpdate(json)) {
        return ChatSvcEventThreadUpdateFromJSONTyped(json, true);
    }

    return {} as any;
}

export function Events200ResponseToJSON(json: any): any {
    return Events200ResponseToJSONTyped(json, false);
}

export function Events200ResponseToJSONTyped(value?: Events200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    if (typeof value !== 'object') {
        return value;
    }
    if (instanceOfChatSvcEventMessageAdded(value)) {
        return ChatSvcEventMessageAddedToJSON(value as ChatSvcEventMessageAdded);
    }
    if (instanceOfChatSvcEventThreadAdded(value)) {
        return ChatSvcEventThreadAddedToJSON(value as ChatSvcEventThreadAdded);
    }
    if (instanceOfChatSvcEventThreadUpdate(value)) {
        return ChatSvcEventThreadUpdateToJSON(value as ChatSvcEventThreadUpdate);
    }

    return {};
}

