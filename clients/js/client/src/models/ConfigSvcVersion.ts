/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConfigSvcVersion
 */
export interface ConfigSvcVersion {
    /**
     * 
     * @type {string}
     * @memberof ConfigSvcVersion
     */
    appId: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigSvcVersion
     */
    createdAt: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ConfigSvcVersion
     */
    data: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof ConfigSvcVersion
     */
    dataJson: string;
    /**
     * CamelCased slugs of the config owners
     * @type {string}
     * @memberof ConfigSvcVersion
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigSvcVersion
     */
    internalId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConfigSvcVersion
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ConfigSvcVersion
     */
    updatedAt: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigSvcVersion
     */
    version?: string;
}

/**
 * Check if a given object implements the ConfigSvcVersion interface.
 */
export function instanceOfConfigSvcVersion(value: object): value is ConfigSvcVersion {
    if (!('appId' in value) || value['appId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    if (!('dataJson' in value) || value['dataJson'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function ConfigSvcVersionFromJSON(json: any): ConfigSvcVersion {
    return ConfigSvcVersionFromJSONTyped(json, false);
}

export function ConfigSvcVersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigSvcVersion {
    if (json == null) {
        return json;
    }
    return {
        
        'appId': json['appId'],
        'createdAt': json['createdAt'],
        'data': json['data'],
        'dataJson': json['dataJson'],
        'id': json['id'],
        'internalId': json['internalId'] == null ? undefined : json['internalId'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'updatedAt': json['updatedAt'],
        'version': json['version'] == null ? undefined : json['version'],
    };
}

export function ConfigSvcVersionToJSON(json: any): ConfigSvcVersion {
    return ConfigSvcVersionToJSONTyped(json, false);
}

export function ConfigSvcVersionToJSONTyped(value?: ConfigSvcVersion | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'appId': value['appId'],
        'createdAt': value['createdAt'],
        'data': value['data'],
        'dataJson': value['dataJson'],
        'id': value['id'],
        'internalId': value['internalId'],
        'tags': value['tags'],
        'updatedAt': value['updatedAt'],
        'version': value['version'],
    };
}

