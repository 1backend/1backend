/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.4.3
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserSvcAuthToken
 */
export interface UserSvcAuthToken {
    /**
     * Active tokens contain the most up-to-date information.
     * When a user's role changes—due to role assignment, organization
     * creation/assignment, etc.—all existing tokens are marked inactive.
     * Active tokens are reused during login, while inactive tokens
     * are retained for historical reference.
     * @type {boolean}
     * @memberof UserSvcAuthToken
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserSvcAuthToken
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcAuthToken
     */
    deletedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcAuthToken
     */
    id: string;
    /**
     * Token is a signed JWT used to authenticate the user without querying the User Svc.
     * You can verify it using the public key at `/user-svc/public-key`.
     * 
     * The token is just a JSON object with fields like:
     * - "oui": the user ID (e.g., "usr_dC4K75Cbp6")
     * - "olu": the user slug (e.g., "test-user-slug-0")
     * - "oro": a list of roles, such as:
     *   - "user-svc:user"
     *   - "user-svc:org:{org_dC4K7NNDCG}:user"
     * @type {string}
     * @memberof UserSvcAuthToken
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcAuthToken
     */
    updatedAt: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcAuthToken
     */
    userId: string;
}

/**
 * Check if a given object implements the UserSvcAuthToken interface.
 */
export function instanceOfUserSvcAuthToken(value: object): value is UserSvcAuthToken {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('token' in value) || value['token'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function UserSvcAuthTokenFromJSON(json: any): UserSvcAuthToken {
    return UserSvcAuthTokenFromJSONTyped(json, false);
}

export function UserSvcAuthTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSvcAuthToken {
    if (json == null) {
        return json;
    }
    return {
        
        'active': json['active'] == null ? undefined : json['active'],
        'createdAt': json['createdAt'],
        'deletedAt': json['deletedAt'] == null ? undefined : json['deletedAt'],
        'id': json['id'],
        'token': json['token'],
        'updatedAt': json['updatedAt'],
        'userId': json['userId'],
    };
}

export function UserSvcAuthTokenToJSON(json: any): UserSvcAuthToken {
    return UserSvcAuthTokenToJSONTyped(json, false);
}

export function UserSvcAuthTokenToJSONTyped(value?: UserSvcAuthToken | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'active': value['active'],
        'createdAt': value['createdAt'],
        'deletedAt': value['deletedAt'],
        'id': value['id'],
        'token': value['token'],
        'updatedAt': value['updatedAt'],
        'userId': value['userId'],
    };
}

