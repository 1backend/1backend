/* tslint:disable */
/* eslint-disable */
/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.29
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DataSvcObject
 */
export interface DataSvcObject {
    /**
     * Authors is a list of user ID and organization ID who created the object.
     * The authors field tracks which users or organizations created an entry, helping to prevent spam.
     * If an organization ID is not provided, the currently active organization will
     * be queried from the User Svc.
     * @type {Array<string>}
     * @memberof DataSvcObject
     */
    authors?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DataSvcObject
     */
    createdAt?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DataSvcObject
     */
    data: { [key: string]: any; };
    /**
     * Deleters is a list of user IDs and role IDs that can delete the object.
     * `_self` can be used to refer to the caller user's userId and
     * `_org` can be used to refer to the user's currently active organization (if exists).
     * @type {Array<string>}
     * @memberof DataSvcObject
     */
    deleters?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DataSvcObject
     */
    id?: string;
    /**
     * Readers is a list of user IDs and role IDs that can read the object.
     * `_self` can be used to refer to the caller user's userId and
     * `_org` can be used to refer to the user's currently active organization (if exists).
     * @type {Array<string>}
     * @memberof DataSvcObject
     */
    readers?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DataSvcObject
     */
    table: string;
    /**
     * 
     * @type {string}
     * @memberof DataSvcObject
     */
    updatedAt?: string;
    /**
     * Writers is a list of user IDs and role IDs that can write the object.
     * `_self` can be used to refer to the caller user's userId and
     * `_org` can be used to refer to the user's currently active organization (if exists).
     * @type {Array<string>}
     * @memberof DataSvcObject
     */
    writers?: Array<string>;
}

/**
 * Check if a given object implements the DataSvcObject interface.
 */
export function instanceOfDataSvcObject(value: object): value is DataSvcObject {
    if (!('data' in value) || value['data'] === undefined) return false;
    if (!('table' in value) || value['table'] === undefined) return false;
    return true;
}

export function DataSvcObjectFromJSON(json: any): DataSvcObject {
    return DataSvcObjectFromJSONTyped(json, false);
}

export function DataSvcObjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataSvcObject {
    if (json == null) {
        return json;
    }
    return {
        
        'authors': json['authors'] == null ? undefined : json['authors'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'data': json['data'],
        'deleters': json['deleters'] == null ? undefined : json['deleters'],
        'id': json['id'] == null ? undefined : json['id'],
        'readers': json['readers'] == null ? undefined : json['readers'],
        'table': json['table'],
        'updatedAt': json['updatedAt'] == null ? undefined : json['updatedAt'],
        'writers': json['writers'] == null ? undefined : json['writers'],
    };
}

export function DataSvcObjectToJSON(json: any): DataSvcObject {
    return DataSvcObjectToJSONTyped(json, false);
}

export function DataSvcObjectToJSONTyped(value?: DataSvcObject | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'authors': value['authors'],
        'createdAt': value['createdAt'],
        'data': value['data'],
        'deleters': value['deleters'],
        'id': value['id'],
        'readers': value['readers'],
        'table': value['table'],
        'updatedAt': value['updatedAt'],
        'writers': value['writers'],
    };
}

