/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConfigSvcListVersionsRequest
 */
export interface ConfigSvcListVersionsRequest {
    /**
     * 
     * @type {string}
     * @memberof ConfigSvcListVersionsRequest
     */
    afterJson?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigSvcListVersionsRequest
     */
    appHost: string;
    /**
     * Ids are camelCased slugs of the config owners.
     * Specifying only the ids will mean all of the config will be returned
     * for that key.
     * 
     * If the configs are large, consider using the `Selector` request field.
     * @type {Array<string>}
     * @memberof ConfigSvcListVersionsRequest
     */
    ids?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ConfigSvcListVersionsRequest
     */
    limit?: number;
    /**
     * Selector allows dotPath-based filtering per config owner.
     * Example:
     * {
     *   "user1": ["settings.theme", "featureFlags.enableNewUI"],
     *   "user2": ["settings.language"]
     * }
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ConfigSvcListVersionsRequest
     */
    selector?: { [key: string]: Array<string>; };
    /**
     * 
     * @type {Array<string>}
     * @memberof ConfigSvcListVersionsRequest
     */
    tags?: Array<string>;
}

/**
 * Check if a given object implements the ConfigSvcListVersionsRequest interface.
 */
export function instanceOfConfigSvcListVersionsRequest(value: object): value is ConfigSvcListVersionsRequest {
    if (!('appHost' in value) || value['appHost'] === undefined) return false;
    return true;
}

export function ConfigSvcListVersionsRequestFromJSON(json: any): ConfigSvcListVersionsRequest {
    return ConfigSvcListVersionsRequestFromJSONTyped(json, false);
}

export function ConfigSvcListVersionsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigSvcListVersionsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'afterJson': json['afterJson'] == null ? undefined : json['afterJson'],
        'appHost': json['appHost'],
        'ids': json['ids'] == null ? undefined : json['ids'],
        'limit': json['limit'] == null ? undefined : json['limit'],
        'selector': json['selector'] == null ? undefined : json['selector'],
        'tags': json['tags'] == null ? undefined : json['tags'],
    };
}

export function ConfigSvcListVersionsRequestToJSON(json: any): ConfigSvcListVersionsRequest {
    return ConfigSvcListVersionsRequestToJSONTyped(json, false);
}

export function ConfigSvcListVersionsRequestToJSONTyped(value?: ConfigSvcListVersionsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'afterJson': value['afterJson'],
        'appHost': value['appHost'],
        'ids': value['ids'],
        'limit': value['limit'],
        'selector': value['selector'],
        'tags': value['tags'],
    };
}

