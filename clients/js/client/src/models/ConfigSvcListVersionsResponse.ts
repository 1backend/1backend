/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.9.4
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConfigSvcVersion } from './ConfigSvcVersion';
import {
    ConfigSvcVersionFromJSON,
    ConfigSvcVersionFromJSONTyped,
    ConfigSvcVersionToJSON,
    ConfigSvcVersionToJSONTyped,
} from './ConfigSvcVersion';

/**
 * 
 * @export
 * @interface ConfigSvcListVersionsResponse
 */
export interface ConfigSvcListVersionsResponse {
    /**
     * AfterJson is the cursor to fetch the next page, encoded as a JSON array string.
     * e.g. '["2023-08-01T12:00:00Z","versid-123"]'
     * @type {string}
     * @memberof ConfigSvcListVersionsResponse
     */
    afterJson?: string;
    /**
     * Versions across all IDs, sorted by CreatedAt descending.
     * @type {Array<ConfigSvcVersion>}
     * @memberof ConfigSvcListVersionsResponse
     */
    versions?: Array<ConfigSvcVersion>;
}

/**
 * Check if a given object implements the ConfigSvcListVersionsResponse interface.
 */
export function instanceOfConfigSvcListVersionsResponse(value: object): value is ConfigSvcListVersionsResponse {
    return true;
}

export function ConfigSvcListVersionsResponseFromJSON(json: any): ConfigSvcListVersionsResponse {
    return ConfigSvcListVersionsResponseFromJSONTyped(json, false);
}

export function ConfigSvcListVersionsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigSvcListVersionsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'afterJson': json['afterJson'] == null ? undefined : json['afterJson'],
        'versions': json['versions'] == null ? undefined : ((json['versions'] as Array<any>).map(ConfigSvcVersionFromJSON)),
    };
}

export function ConfigSvcListVersionsResponseToJSON(json: any): ConfigSvcListVersionsResponse {
    return ConfigSvcListVersionsResponseToJSONTyped(json, false);
}

export function ConfigSvcListVersionsResponseToJSONTyped(value?: ConfigSvcListVersionsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'afterJson': value['afterJson'],
        'versions': value['versions'] == null ? undefined : ((value['versions'] as Array<any>).map(ConfigSvcVersionToJSON)),
    };
}

