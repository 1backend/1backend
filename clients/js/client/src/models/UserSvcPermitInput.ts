/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.5.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserSvcPermitInput
 */
export interface UserSvcPermitInput {
    /**
     * 
     * @type {string}
     * @memberof UserSvcPermitInput
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcPermitInput
     */
    permission: string;
    /**
     * Role IDs that have been permited the specified permission.
     * 
     * Originally, permits were designed for slugs to facilitate service-to-service calls.
     * Due to their convenience—especially with CLI and infrastructure-as-code support—they were later extended to roles.
     * @type {Array<string>}
     * @memberof UserSvcPermitInput
     */
    roles?: Array<string>;
    /**
     * Slugs that have been permited the specified permission.
     * @type {Array<string>}
     * @memberof UserSvcPermitInput
     */
    slugs?: Array<string>;
}

/**
 * Check if a given object implements the UserSvcPermitInput interface.
 */
export function instanceOfUserSvcPermitInput(value: object): value is UserSvcPermitInput {
    if (!('permission' in value) || value['permission'] === undefined) return false;
    return true;
}

export function UserSvcPermitInputFromJSON(json: any): UserSvcPermitInput {
    return UserSvcPermitInputFromJSONTyped(json, false);
}

export function UserSvcPermitInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSvcPermitInput {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'permission': json['permission'],
        'roles': json['roles'] == null ? undefined : json['roles'],
        'slugs': json['slugs'] == null ? undefined : json['slugs'],
    };
}

export function UserSvcPermitInputToJSON(json: any): UserSvcPermitInput {
    return UserSvcPermitInputToJSONTyped(json, false);
}

export function UserSvcPermitInputToJSONTyped(value?: UserSvcPermitInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'permission': value['permission'],
        'roles': value['roles'],
        'slugs': value['slugs'],
    };
}

