/* tslint:disable */
/* eslint-disable */
/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.29
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserSvcContact
 */
export interface UserSvcContact {
    /**
     * 
     * @type {string}
     * @memberof UserSvcContact
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcContact
     */
    deletedAt?: string;
    /**
     * The unique identifier, which can be a URL.
     * 
     * Example values: "joe12" (openorch username), "twitter.com/thejoe" (twitter url), "joe@joesdomain.com" (email)
     * @type {string}
     * @memberof UserSvcContact
     */
    id?: string;
    /**
     * If this is the primary contact method
     * @type {boolean}
     * @memberof UserSvcContact
     */
    isPrimary?: boolean;
    /**
     * Platform of the contact (e.g., "email", "phone", "twitter")
     * @type {string}
     * @memberof UserSvcContact
     */
    platform?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcContact
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSvcContact
     */
    userId?: string;
    /**
     * Value is the platform local unique identifier.
     * Ie. while the `id` of a Twitter contact is `twitter.com/thejoe`, the value will be only `thejoe`.
     * For email and phones the `id` and the `value` will be the same.
     * This field mostly exists for display purposes.
     * 
     * Example values: "joe12" (openorch username), "thejoe" (twitter username), "joe@joesdomain.com" (email)
     * @type {string}
     * @memberof UserSvcContact
     */
    value?: string;
    /**
     * Whether the contact is verified
     * @type {boolean}
     * @memberof UserSvcContact
     */
    verified?: boolean;
}

/**
 * Check if a given object implements the UserSvcContact interface.
 */
export function instanceOfUserSvcContact(value: object): value is UserSvcContact {
    return true;
}

export function UserSvcContactFromJSON(json: any): UserSvcContact {
    return UserSvcContactFromJSONTyped(json, false);
}

export function UserSvcContactFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSvcContact {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'deletedAt': json['deletedAt'] == null ? undefined : json['deletedAt'],
        'id': json['id'] == null ? undefined : json['id'],
        'isPrimary': json['isPrimary'] == null ? undefined : json['isPrimary'],
        'platform': json['platform'] == null ? undefined : json['platform'],
        'updatedAt': json['updatedAt'] == null ? undefined : json['updatedAt'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'value': json['value'] == null ? undefined : json['value'],
        'verified': json['verified'] == null ? undefined : json['verified'],
    };
}

export function UserSvcContactToJSON(json: any): UserSvcContact {
    return UserSvcContactToJSONTyped(json, false);
}

export function UserSvcContactToJSONTyped(value?: UserSvcContact | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'createdAt': value['createdAt'],
        'deletedAt': value['deletedAt'],
        'id': value['id'],
        'isPrimary': value['isPrimary'],
        'platform': value['platform'],
        'updatedAt': value['updatedAt'],
        'userId': value['userId'],
        'value': value['value'],
        'verified': value['verified'],
    };
}

