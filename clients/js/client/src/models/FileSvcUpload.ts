/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.0-rc2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FileSvcUpload
 */
export interface FileSvcUpload {
    /**
     * 
     * @type {string}
     * @memberof FileSvcUpload
     */
    createdAt: string;
    /**
     * Logical file ID spanning all replicas
     * @type {string}
     * @memberof FileSvcUpload
     */
    fileId: string;
    /**
     * Filename is the original name of the file
     * @type {string}
     * @memberof FileSvcUpload
     */
    fileName: string;
    /**
     * FilePath is the full node local path of the file
     * @type {string}
     * @memberof FileSvcUpload
     */
    filePath: string;
    /**
     * 
     * @type {number}
     * @memberof FileSvcUpload
     */
    fileSize: number;
    /**
     * Unique ID for this replica
     * @type {string}
     * @memberof FileSvcUpload
     */
    id: string;
    /**
     * ID of the node storing this replica
     * @type {string}
     * @memberof FileSvcUpload
     */
    nodeId: string;
    /**
     * 
     * @type {string}
     * @memberof FileSvcUpload
     */
    updatedAt: string;
    /**
     * 
     * @type {string}
     * @memberof FileSvcUpload
     */
    userId: string;
}

/**
 * Check if a given object implements the FileSvcUpload interface.
 */
export function instanceOfFileSvcUpload(value: object): value is FileSvcUpload {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('fileId' in value) || value['fileId'] === undefined) return false;
    if (!('fileName' in value) || value['fileName'] === undefined) return false;
    if (!('filePath' in value) || value['filePath'] === undefined) return false;
    if (!('fileSize' in value) || value['fileSize'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('nodeId' in value) || value['nodeId'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function FileSvcUploadFromJSON(json: any): FileSvcUpload {
    return FileSvcUploadFromJSONTyped(json, false);
}

export function FileSvcUploadFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileSvcUpload {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['createdAt'],
        'fileId': json['fileId'],
        'fileName': json['fileName'],
        'filePath': json['filePath'],
        'fileSize': json['fileSize'],
        'id': json['id'],
        'nodeId': json['nodeId'],
        'updatedAt': json['updatedAt'],
        'userId': json['userId'],
    };
}

export function FileSvcUploadToJSON(json: any): FileSvcUpload {
    return FileSvcUploadToJSONTyped(json, false);
}

export function FileSvcUploadToJSONTyped(value?: FileSvcUpload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'createdAt': value['createdAt'],
        'fileId': value['fileId'],
        'fileName': value['fileName'],
        'filePath': value['filePath'],
        'fileSize': value['fileSize'],
        'id': value['id'],
        'nodeId': value['nodeId'],
        'updatedAt': value['updatedAt'],
        'userId': value['userId'],
    };
}

