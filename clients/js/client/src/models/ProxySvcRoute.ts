/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.1
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProxySvcRoute
 */
export interface ProxySvcRoute {
    /**
     * Id is the routing key: host plus optional path prefix.
     * Example:
     *   "x.com"              -> root of the domain
     *   "x.com/path1"        -> microfrontend at /path1
     *   "x.com/path1/path2"  -> deeper microfrontend mounted at /path1/path2
     * 
     * Use case: multiple microfrontends served under the same host but
     * separated by URL path segments. For example:
     *   - Marketing site at x.com
     *   - Dashboard at x.com/app
     *   - Admin UI at x.com/app/admin
     * 
     * Lookup algorithm:
     *   1. Take the request host and path (e.g. "x.com/app/admin/users").
     *   2. Try to match the longest registered Id by progressively stripping
     *      trailing path segments:
     *         - x.com/app/admin/users   (no match)
     *         - x.com/app/admin         (match -> admin UI)
     *   3. If still no match, strip again:
     *         - x.com/app               (match -> dashboard)
     *   4. If still no match, fallback to host-only route:
     *         - x.com                   (match -> marketing site)
     *   5. If no host-only route exists, return 404.
     * 
     * This provides deterministic longest-prefix routing without regex or
     * rule engines, keeping the model simple but enabling path-based
     * microfrontend composition.
     * @type {string}
     * @memberof ProxySvcRoute
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ProxySvcRoute
     */
    target: string;
}

/**
 * Check if a given object implements the ProxySvcRoute interface.
 */
export function instanceOfProxySvcRoute(value: object): value is ProxySvcRoute {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('target' in value) || value['target'] === undefined) return false;
    return true;
}

export function ProxySvcRouteFromJSON(json: any): ProxySvcRoute {
    return ProxySvcRouteFromJSONTyped(json, false);
}

export function ProxySvcRouteFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProxySvcRoute {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'target': json['target'],
    };
}

export function ProxySvcRouteToJSON(json: any): ProxySvcRoute {
    return ProxySvcRouteToJSONTyped(json, false);
}

export function ProxySvcRouteToJSONTyped(value?: ProxySvcRoute | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'target': value['target'],
    };
}

