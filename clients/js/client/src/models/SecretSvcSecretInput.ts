/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SecretSvcChecksumAlgorithm } from './SecretSvcChecksumAlgorithm';
import {
    SecretSvcChecksumAlgorithmFromJSON,
    SecretSvcChecksumAlgorithmFromJSONTyped,
    SecretSvcChecksumAlgorithmToJSON,
    SecretSvcChecksumAlgorithmToJSONTyped,
} from './SecretSvcChecksumAlgorithm';

/**
 * 
 * @export
 * @interface SecretSvcSecretInput
 */
export interface SecretSvcSecretInput {
    /**
     * 
     * @type {string}
     * @memberof SecretSvcSecretInput
     */
    appHost?: string;
    /**
     * Slugs of services/users who can change the deleters list
     * @type {Array<string>}
     * @memberof SecretSvcSecretInput
     */
    canChangeDeleters?: Array<string>;
    /**
     * Slugs of services/users who can change the readers list
     * @type {Array<string>}
     * @memberof SecretSvcSecretInput
     */
    canChangeReaders?: Array<string>;
    /**
     * Slugs of services/users who can change the writers list
     * @type {Array<string>}
     * @memberof SecretSvcSecretInput
     */
    canChangeWriters?: Array<string>;
    /**
     * Checksum of the secret value
     * @type {string}
     * @memberof SecretSvcSecretInput
     */
    checksum?: string;
    /**
     * Algorithm used for the checksum (e.g., "CRC32")
     * @type {SecretSvcChecksumAlgorithm}
     * @memberof SecretSvcSecretInput
     */
    checksumAlgorithm?: SecretSvcChecksumAlgorithm;
    /**
     * Slugs of services/users who can delete the secret
     * @type {Array<string>}
     * @memberof SecretSvcSecretInput
     */
    deleters?: Array<string>;
    /**
     * Whether the secret is encrypted
     * All secrets are encrypted before written to the DB.
     * This really only exists for write requests to know if the secret is already encrypted.
     * Ie: while most `secret save [id] [value]` commands are probably not encrypted,
     * File based saves, eg. `secret save secretA.yaml` are probably encrypted.
     * @type {boolean}
     * @memberof SecretSvcSecretInput
     */
    encrypted?: boolean;
    /**
     * Envar- or slug-like id of the secret
     * @type {string}
     * @memberof SecretSvcSecretInput
     */
    id: string;
    /**
     * Slugs of services/users who can read the secret
     * @type {Array<string>}
     * @memberof SecretSvcSecretInput
     */
    readers?: Array<string>;
    /**
     * Secret Value
     * @type {string}
     * @memberof SecretSvcSecretInput
     */
    value?: string;
    /**
     * Slugs of services/users who can modify the secret
     * @type {Array<string>}
     * @memberof SecretSvcSecretInput
     */
    writers?: Array<string>;
}



/**
 * Check if a given object implements the SecretSvcSecretInput interface.
 */
export function instanceOfSecretSvcSecretInput(value: object): value is SecretSvcSecretInput {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function SecretSvcSecretInputFromJSON(json: any): SecretSvcSecretInput {
    return SecretSvcSecretInputFromJSONTyped(json, false);
}

export function SecretSvcSecretInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): SecretSvcSecretInput {
    if (json == null) {
        return json;
    }
    return {
        
        'appHost': json['appHost'] == null ? undefined : json['appHost'],
        'canChangeDeleters': json['canChangeDeleters'] == null ? undefined : json['canChangeDeleters'],
        'canChangeReaders': json['canChangeReaders'] == null ? undefined : json['canChangeReaders'],
        'canChangeWriters': json['canChangeWriters'] == null ? undefined : json['canChangeWriters'],
        'checksum': json['checksum'] == null ? undefined : json['checksum'],
        'checksumAlgorithm': json['checksumAlgorithm'] == null ? undefined : SecretSvcChecksumAlgorithmFromJSON(json['checksumAlgorithm']),
        'deleters': json['deleters'] == null ? undefined : json['deleters'],
        'encrypted': json['encrypted'] == null ? undefined : json['encrypted'],
        'id': json['id'],
        'readers': json['readers'] == null ? undefined : json['readers'],
        'value': json['value'] == null ? undefined : json['value'],
        'writers': json['writers'] == null ? undefined : json['writers'],
    };
}

export function SecretSvcSecretInputToJSON(json: any): SecretSvcSecretInput {
    return SecretSvcSecretInputToJSONTyped(json, false);
}

export function SecretSvcSecretInputToJSONTyped(value?: SecretSvcSecretInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'appHost': value['appHost'],
        'canChangeDeleters': value['canChangeDeleters'],
        'canChangeReaders': value['canChangeReaders'],
        'canChangeWriters': value['canChangeWriters'],
        'checksum': value['checksum'],
        'checksumAlgorithm': SecretSvcChecksumAlgorithmToJSON(value['checksumAlgorithm']),
        'deleters': value['deleters'],
        'encrypted': value['encrypted'],
        'id': value['id'],
        'readers': value['readers'],
        'value': value['value'],
        'writers': value['writers'],
    };
}

