/* tslint:disable */
/* eslint-disable */
/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.29
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * 
 * @export
 */
export const RegistrySvcLanguage = {
    JavaScript: 'JavaScript',
    Python: 'Python',
    Java: 'Java',
    CSharp: 'C#',
    CPlusPlus: 'C++',
    Ruby: 'Ruby',
    Go: 'Go',
    Swift: 'Swift',
    PHP: 'PHP',
    TypeScript: 'TypeScript',
    Kotlin: 'Kotlin',
    Scala: 'Scala',
    Perl: 'Perl',
    Rust: 'Rust',
    Haskell: 'Haskell',
    Clojure: 'Clojure',
    Elixir: 'Elixir',
    ObjectiveC: 'Objective-C',
    FSharp: 'F#'
} as const;
export type RegistrySvcLanguage = typeof RegistrySvcLanguage[keyof typeof RegistrySvcLanguage];


export function instanceOfRegistrySvcLanguage(value: any): boolean {
    for (const key in RegistrySvcLanguage) {
        if (Object.prototype.hasOwnProperty.call(RegistrySvcLanguage, key)) {
            if (RegistrySvcLanguage[key as keyof typeof RegistrySvcLanguage] === value) {
                return true;
            }
        }
    }
    return false;
}

export function RegistrySvcLanguageFromJSON(json: any): RegistrySvcLanguage {
    return RegistrySvcLanguageFromJSONTyped(json, false);
}

export function RegistrySvcLanguageFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegistrySvcLanguage {
    return json as RegistrySvcLanguage;
}

export function RegistrySvcLanguageToJSON(value?: RegistrySvcLanguage | null): any {
    return value as any;
}

export function RegistrySvcLanguageToJSONTyped(value: any, ignoreDiscriminator: boolean): RegistrySvcLanguage {
    return value as RegistrySvcLanguage;
}

