/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.0-rc6
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConfigSvcListConfigsRequest
 */
export interface ConfigSvcListConfigsRequest {
    /**
     * 
     * @type {string}
     * @memberof ConfigSvcListConfigsRequest
     */
    app?: string;
    /**
     * Keys are camelCased slugs of the config owners.
     * Specifying only the keys will mean all of the config will be returned
     * for that key.
     * 
     * If the configs are large, consider using the `Selector` request field.
     * @type {Array<string>}
     * @memberof ConfigSvcListConfigsRequest
     */
    keys?: Array<string>;
    /**
     * Selector allows dotPath-based filtering per config owner.
     * Example:
     * {
     *   "user1": ["settings.theme", "featureFlags.enableNewUI"],
     *   "user2": ["settings.language"]
     * }
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ConfigSvcListConfigsRequest
     */
    selector?: { [key: string]: Array<string>; };
}

/**
 * Check if a given object implements the ConfigSvcListConfigsRequest interface.
 */
export function instanceOfConfigSvcListConfigsRequest(value: object): value is ConfigSvcListConfigsRequest {
    return true;
}

export function ConfigSvcListConfigsRequestFromJSON(json: any): ConfigSvcListConfigsRequest {
    return ConfigSvcListConfigsRequestFromJSONTyped(json, false);
}

export function ConfigSvcListConfigsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigSvcListConfigsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'app': json['app'] == null ? undefined : json['app'],
        'keys': json['keys'] == null ? undefined : json['keys'],
        'selector': json['selector'] == null ? undefined : json['selector'],
    };
}

export function ConfigSvcListConfigsRequestToJSON(json: any): ConfigSvcListConfigsRequest {
    return ConfigSvcListConfigsRequestToJSONTyped(json, false);
}

export function ConfigSvcListConfigsRequestToJSONTyped(value?: ConfigSvcListConfigsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'app': value['app'],
        'keys': value['keys'],
        'selector': value['selector'],
    };
}

