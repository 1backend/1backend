/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DatastoreFilter } from './DatastoreFilter';
import {
    DatastoreFilterFromJSON,
    DatastoreFilterFromJSONTyped,
    DatastoreFilterToJSON,
    DatastoreFilterToJSONTyped,
} from './DatastoreFilter';
import type { DatastoreOrderBy } from './DatastoreOrderBy';
import {
    DatastoreOrderByFromJSON,
    DatastoreOrderByFromJSONTyped,
    DatastoreOrderByToJSON,
    DatastoreOrderByToJSONTyped,
} from './DatastoreOrderBy';

/**
 * 
 * @export
 * @interface DatastoreQuery
 */
export interface DatastoreQuery {
    /**
     * AfterJson is used for cursor-based pagination, which is more
     * effective in scalable and distributed environments compared
     * to offset-based pagination.
     * @type {string}
     * @memberof DatastoreQuery
     */
    afterJson?: string;
    /**
     * Count true means return the count of the dataset filtered by Filters
     * without after or limit.
     * @type {boolean}
     * @memberof DatastoreQuery
     */
    count?: boolean;
    /**
     * Filters are filtering options of a query. It is advised to use
     * It's advised to use helper functions in your respective client library such as filter constructors (`all`, `equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * @type {Array<DatastoreFilter>}
     * @memberof DatastoreQuery
     */
    filters?: Array<DatastoreFilter>;
    /**
     * Limit the number of records in the result set.
     * @type {number}
     * @memberof DatastoreQuery
     */
    limit?: number;
    /**
     * OrderBys order the result set.
     * @type {Array<DatastoreOrderBy>}
     * @memberof DatastoreQuery
     */
    orderBys?: Array<DatastoreOrderBy>;
}

/**
 * Check if a given object implements the DatastoreQuery interface.
 */
export function instanceOfDatastoreQuery(value: object): value is DatastoreQuery {
    return true;
}

export function DatastoreQueryFromJSON(json: any): DatastoreQuery {
    return DatastoreQueryFromJSONTyped(json, false);
}

export function DatastoreQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatastoreQuery {
    if (json == null) {
        return json;
    }
    return {
        
        'afterJson': json['afterJson'] == null ? undefined : json['afterJson'],
        'count': json['count'] == null ? undefined : json['count'],
        'filters': json['filters'] == null ? undefined : ((json['filters'] as Array<any>).map(DatastoreFilterFromJSON)),
        'limit': json['limit'] == null ? undefined : json['limit'],
        'orderBys': json['orderBys'] == null ? undefined : ((json['orderBys'] as Array<any>).map(DatastoreOrderByFromJSON)),
    };
}

export function DatastoreQueryToJSON(json: any): DatastoreQuery {
    return DatastoreQueryToJSONTyped(json, false);
}

export function DatastoreQueryToJSONTyped(value?: DatastoreQuery | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'afterJson': value['afterJson'],
        'count': value['count'],
        'filters': value['filters'] == null ? undefined : ((value['filters'] as Array<any>).map(DatastoreFilterToJSON)),
        'limit': value['limit'],
        'orderBys': value['orderBys'] == null ? undefined : ((value['orderBys'] as Array<any>).map(DatastoreOrderByToJSON)),
    };
}

