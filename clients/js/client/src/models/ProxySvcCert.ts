/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.1
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProxySvcCert
 */
export interface ProxySvcCert {
    /**
     * PEM-encoded certificate bundle
     * 
     *  -----BEGIN EC PARAMETERS-----
     *  BggqhkjOPQMBBw==
     *  -----END EC PARAMETERS-----
     *  -----BEGIN EC PRIVATE KEY-----
     *  MHcCAQEEIDC3+7pySTQl6WRBuef...
     *  -----END EC PRIVATE KEY-----
     *  -----BEGIN CERTIFICATE-----
     *  MIIBhTCCASugAwIBAgIUQYwE...
     *  -----END CERTIFICATE-----
     * @type {string}
     * @memberof ProxySvcCert
     */
    cert: string;
    /**
     * Subject Common Name (typically domain)
     * @type {string}
     * @memberof ProxySvcCert
     */
    commonName?: string;
    /**
     * When cert record was created
     * @type {string}
     * @memberof ProxySvcCert
     */
    createdAt: string;
    /**
     * Subject Alternative Names (covered domains)
     * @type {Array<string>}
     * @memberof ProxySvcCert
     */
    dnsNames?: Array<string>;
    /**
     * Id is the host which this cert is for, e.g., "example.com" or "www.example.com"
     * @type {string}
     * @memberof ProxySvcCert
     */
    id: string;
    /**
     * Whether cert is a CA (usually false for LE certs)
     * @type {boolean}
     * @memberof ProxySvcCert
     */
    isCA?: boolean;
    /**
     * Certificate issuer name (e.g., Let's Encrypt)
     * @type {string}
     * @memberof ProxySvcCert
     */
    issuer?: string;
    /**
     * Cert validity end time
     * @type {string}
     * @memberof ProxySvcCert
     */
    notAfter?: string;
    /**
     * Cert validity start time
     * @type {string}
     * @memberof ProxySvcCert
     */
    notBefore?: string;
    /**
     * Public key algorithm (e.g., RSA, ECDSA)
     * @type {string}
     * @memberof ProxySvcCert
     */
    publicKeyAlgorithm?: string;
    /**
     * Bit length of the public key
     * @type {number}
     * @memberof ProxySvcCert
     */
    publicKeyBitLength?: number;
    /**
     * Unique certificate serial number
     * @type {string}
     * @memberof ProxySvcCert
     */
    serialNumber?: string;
    /**
     * Algorithm used to sign the cert (e.g., SHA256-RSA)
     * @type {string}
     * @memberof ProxySvcCert
     */
    signatureAlgorithm?: string;
    /**
     * When cert record was last updated
     * @type {string}
     * @memberof ProxySvcCert
     */
    updatedAt: string;
}

/**
 * Check if a given object implements the ProxySvcCert interface.
 */
export function instanceOfProxySvcCert(value: object): value is ProxySvcCert {
    if (!('cert' in value) || value['cert'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function ProxySvcCertFromJSON(json: any): ProxySvcCert {
    return ProxySvcCertFromJSONTyped(json, false);
}

export function ProxySvcCertFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProxySvcCert {
    if (json == null) {
        return json;
    }
    return {
        
        'cert': json['cert'],
        'commonName': json['commonName'] == null ? undefined : json['commonName'],
        'createdAt': json['createdAt'],
        'dnsNames': json['dnsNames'] == null ? undefined : json['dnsNames'],
        'id': json['id'],
        'isCA': json['isCA'] == null ? undefined : json['isCA'],
        'issuer': json['issuer'] == null ? undefined : json['issuer'],
        'notAfter': json['notAfter'] == null ? undefined : json['notAfter'],
        'notBefore': json['notBefore'] == null ? undefined : json['notBefore'],
        'publicKeyAlgorithm': json['publicKeyAlgorithm'] == null ? undefined : json['publicKeyAlgorithm'],
        'publicKeyBitLength': json['publicKeyBitLength'] == null ? undefined : json['publicKeyBitLength'],
        'serialNumber': json['serialNumber'] == null ? undefined : json['serialNumber'],
        'signatureAlgorithm': json['signatureAlgorithm'] == null ? undefined : json['signatureAlgorithm'],
        'updatedAt': json['updatedAt'],
    };
}

export function ProxySvcCertToJSON(json: any): ProxySvcCert {
    return ProxySvcCertToJSONTyped(json, false);
}

export function ProxySvcCertToJSONTyped(value?: ProxySvcCert | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'cert': value['cert'],
        'commonName': value['commonName'],
        'createdAt': value['createdAt'],
        'dnsNames': value['dnsNames'],
        'id': value['id'],
        'isCA': value['isCA'],
        'issuer': value['issuer'],
        'notAfter': value['notAfter'],
        'notBefore': value['notBefore'],
        'publicKeyAlgorithm': value['publicKeyAlgorithm'],
        'publicKeyBitLength': value['publicKeyBitLength'],
        'serialNumber': value['serialNumber'],
        'signatureAlgorithm': value['signatureAlgorithm'],
        'updatedAt': value['updatedAt'],
    };
}

