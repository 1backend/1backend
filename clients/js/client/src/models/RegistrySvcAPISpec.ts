/* tslint:disable */
/* eslint-disable */
/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.29
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RegistrySvcAPISpec
 */
export interface RegistrySvcAPISpec {
    /**
     * Additional metadata about the API (e.g., author, license, etc.)
     * @type {{ [key: string]: string; }}
     * @memberof RegistrySvcAPISpec
     */
    metadata?: { [key: string]: string; };
    /**
     * Protocol type (e.g., OpenAPI, Swagger, etc.)
     * @type {string}
     * @memberof RegistrySvcAPISpec
     */
    protocolType?: string;
    /**
     * URL to the OpenAPI file or other API definition
     * @type {string}
     * @memberof RegistrySvcAPISpec
     */
    url?: string;
    /**
     * Version of the API specification (e.g., 3.0.0)
     * @type {string}
     * @memberof RegistrySvcAPISpec
     */
    version?: string;
}

/**
 * Check if a given object implements the RegistrySvcAPISpec interface.
 */
export function instanceOfRegistrySvcAPISpec(value: object): value is RegistrySvcAPISpec {
    return true;
}

export function RegistrySvcAPISpecFromJSON(json: any): RegistrySvcAPISpec {
    return RegistrySvcAPISpecFromJSONTyped(json, false);
}

export function RegistrySvcAPISpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegistrySvcAPISpec {
    if (json == null) {
        return json;
    }
    return {
        
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'protocolType': json['protocolType'] == null ? undefined : json['protocolType'],
        'url': json['url'] == null ? undefined : json['url'],
        'version': json['version'] == null ? undefined : json['version'],
    };
}

export function RegistrySvcAPISpecToJSON(json: any): RegistrySvcAPISpec {
    return RegistrySvcAPISpecToJSONTyped(json, false);
}

export function RegistrySvcAPISpecToJSONTyped(value?: RegistrySvcAPISpec | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'metadata': value['metadata'],
        'protocolType': value['protocolType'],
        'url': value['url'],
        'version': value['version'],
    };
}

