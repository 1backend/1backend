/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.9.4
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConfigSvcSaveConfigRequest
 */
export interface ConfigSvcSaveConfigRequest {
    /**
     * AppHost can only be specified by users who have the
     * `config-svc:config:edit-on-behalf` permission, who are typically admins.
     * 
     * If not specified, the config will be saved for the current app of the user's token.
     * @type {string}
     * @memberof ConfigSvcSaveConfigRequest
     */
    appHost?: string;
    /**
     * Branch specifies the branch to get configs from.
     * @type {string}
     * @memberof ConfigSvcSaveConfigRequest
     */
    branch?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ConfigSvcSaveConfigRequest
     */
    data?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof ConfigSvcSaveConfigRequest
     */
    dataJson?: string;
    /**
     * Id is the slug of the owner to save the config for.
     * Only user with the `config-svc:config:edit-on-behalf` can specify this.
     * For everyone else, it is automatically set to the slug of the caller user.
     * @type {string}
     * @memberof ConfigSvcSaveConfigRequest
     */
    id?: string;
}

/**
 * Check if a given object implements the ConfigSvcSaveConfigRequest interface.
 */
export function instanceOfConfigSvcSaveConfigRequest(value: object): value is ConfigSvcSaveConfigRequest {
    return true;
}

export function ConfigSvcSaveConfigRequestFromJSON(json: any): ConfigSvcSaveConfigRequest {
    return ConfigSvcSaveConfigRequestFromJSONTyped(json, false);
}

export function ConfigSvcSaveConfigRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigSvcSaveConfigRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'appHost': json['appHost'] == null ? undefined : json['appHost'],
        'branch': json['branch'] == null ? undefined : json['branch'],
        'data': json['data'] == null ? undefined : json['data'],
        'dataJson': json['dataJson'] == null ? undefined : json['dataJson'],
        'id': json['id'] == null ? undefined : json['id'],
    };
}

export function ConfigSvcSaveConfigRequestToJSON(json: any): ConfigSvcSaveConfigRequest {
    return ConfigSvcSaveConfigRequestToJSONTyped(json, false);
}

export function ConfigSvcSaveConfigRequestToJSONTyped(value?: ConfigSvcSaveConfigRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'appHost': value['appHost'],
        'branch': value['branch'],
        'data': value['data'],
        'dataJson': value['dataJson'],
        'id': value['id'],
    };
}

