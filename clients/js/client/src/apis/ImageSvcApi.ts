/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.0-rc3
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ImageSvcErrorResponse,
} from '../models/index';
import {
    ImageSvcErrorResponseFromJSON,
    ImageSvcErrorResponseToJSON,
} from '../models/index';

export interface ServeUploadedImageRequest {
    fileId: string;
    width?: number;
    height?: number;
    body?: object;
}

/**
 * 
 */
export class ImageSvcApi extends runtime.BaseAPI {

    /**
     * Retrieves and serves a previously uploaded image file using its File ID.
     * Serve Uploaded Image
     */
    async serveUploadedImageRaw(requestParameters: ServeUploadedImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling serveUploadedImage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['width'] != null) {
            queryParameters['width'] = requestParameters['width'];
        }

        if (requestParameters['height'] != null) {
            queryParameters['height'] = requestParameters['height'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/image-svc/serve/upload/{fileId}`;
        urlPath = urlPath.replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieves and serves a previously uploaded image file using its File ID.
     * Serve Uploaded Image
     */
    async serveUploadedImage(requestParameters: ServeUploadedImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.serveUploadedImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
