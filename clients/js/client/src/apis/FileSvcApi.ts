/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.0-rc2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileSvcDownloadFileRequest,
  FileSvcDownloadsResponse,
  FileSvcErrorResponse,
  FileSvcGetDownloadResponse,
  FileSvcListUploadsRequest,
  FileSvcListUploadsResponse,
  FileSvcUploadFileResponse,
} from '../models/index';
import {
    FileSvcDownloadFileRequestFromJSON,
    FileSvcDownloadFileRequestToJSON,
    FileSvcDownloadsResponseFromJSON,
    FileSvcDownloadsResponseToJSON,
    FileSvcErrorResponseFromJSON,
    FileSvcErrorResponseToJSON,
    FileSvcGetDownloadResponseFromJSON,
    FileSvcGetDownloadResponseToJSON,
    FileSvcListUploadsRequestFromJSON,
    FileSvcListUploadsRequestToJSON,
    FileSvcListUploadsResponseFromJSON,
    FileSvcListUploadsResponseToJSON,
    FileSvcUploadFileResponseFromJSON,
    FileSvcUploadFileResponseToJSON,
} from '../models/index';

export interface DownloadFileRequest {
    fileSvcDownloadFileRequest: FileSvcDownloadFileRequest;
}

export interface GetDownloadRequest {
    url: string;
    body?: object;
}

export interface ListDownloadsRequest {
    body?: object;
}

export interface ListUploadsRequest {
    fileSvcListUploadsRequest?: FileSvcListUploadsRequest;
}

export interface PauseDownloadRequest {
    url: string;
    body?: object;
}

export interface ServeDownloadRequest {
    url: string;
}

export interface ServeUploadRequest {
    fileId: string;
    body?: object;
}

/**
 * 
 */
export class FileSvcApi extends runtime.BaseAPI {

    /**
     * Start or resume the download for a specified URL.  Requires the `file-svc:download:create` permission.
     * Download a File
     */
    async downloadFileRaw(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['fileSvcDownloadFileRequest'] == null) {
            throw new runtime.RequiredError(
                'fileSvcDownloadFileRequest',
                'Required parameter "fileSvcDownloadFileRequest" was null or undefined when calling downloadFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/file-svc/download`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FileSvcDownloadFileRequestToJSON(requestParameters['fileSvcDownloadFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Start or resume the download for a specified URL.  Requires the `file-svc:download:create` permission.
     * Download a File
     */
    async downloadFile(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.downloadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a download by URL.  Requires the `file-svc:download:view` permission.
     * Get a Download
     */
    async getDownloadRaw(requestParameters: GetDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSvcGetDownloadResponse>> {
        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling getDownload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/file-svc/download/{url}`;
        urlPath = urlPath.replace(`{${"url"}}`, encodeURIComponent(String(requestParameters['url'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileSvcGetDownloadResponseFromJSON(jsonValue));
    }

    /**
     * Get a download by URL.  Requires the `file-svc:download:view` permission.
     * Get a Download
     */
    async getDownload(requestParameters: GetDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSvcGetDownloadResponse> {
        const response = await this.getDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List download details.  Requires the `file-svc:download:view` permission.
     * List Downloads
     */
    async listDownloadsRaw(requestParameters: ListDownloadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSvcDownloadsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/file-svc/downloads`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileSvcDownloadsResponseFromJSON(jsonValue));
    }

    /**
     * List download details.  Requires the `file-svc:download:view` permission.
     * List Downloads
     */
    async listDownloads(requestParameters: ListDownloadsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSvcDownloadsResponse> {
        const response = await this.listDownloadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists uploaded files, returning only metadata about each upload. To retrieve file content, use the `Serve an Uploaded File` endpoint, which serves a single file per request. Note: Retrieving the contents of multiple files in a single request is not supported currently.  Requires the `file-svc:upload:view` permission.
     * List Uploads
     */
    async listUploadsRaw(requestParameters: ListUploadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSvcListUploadsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/file-svc/uploads`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileSvcListUploadsRequestToJSON(requestParameters['fileSvcListUploadsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileSvcListUploadsResponseFromJSON(jsonValue));
    }

    /**
     * Lists uploaded files, returning only metadata about each upload. To retrieve file content, use the `Serve an Uploaded File` endpoint, which serves a single file per request. Note: Retrieving the contents of multiple files in a single request is not supported currently.  Requires the `file-svc:upload:view` permission.
     * List Uploads
     */
    async listUploads(requestParameters: ListUploadsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSvcListUploadsResponse> {
        const response = await this.listUploadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Pause a download that is currently in progress.  Requires the `file-svc:download:edit` permission.
     * Pause a Download
     */
    async pauseDownloadRaw(requestParameters: PauseDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling pauseDownload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/file-svc/download/{url}/pause`;
        urlPath = urlPath.replace(`{${"url"}}`, encodeURIComponent(String(requestParameters['url'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Pause a download that is currently in progress.  Requires the `file-svc:download:edit` permission.
     * Pause a Download
     */
    async pauseDownload(requestParameters: PauseDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.pauseDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Serves a previously downloaded file based on its URL.
     * Serve a Downloaded file
     */
    async serveDownloadRaw(requestParameters: ServeDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling serveDownload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/file-svc/serve/download/{url}`;
        urlPath = urlPath.replace(`{${"url"}}`, encodeURIComponent(String(requestParameters['url'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Serves a previously downloaded file based on its URL.
     * Serve a Downloaded file
     */
    async serveDownload(requestParameters: ServeDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.serveDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves and serves a previously uploaded file using its File ID. Note: The `ID` and `FileID` fields of an upload are different. - `FileID` is a unique identifier for the file itself. - `ID` is a unique identifier for a specific replica of the file. Since 1Backend is a distributed system, files can be replicated across multiple nodes. This means each uploaded file may have multiple records with the same `FileID` but different `ID`s.
     * Serve an Uploaded File
     */
    async serveUploadRaw(requestParameters: ServeUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling serveUpload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/file-svc/serve/upload/{fileId}`;
        urlPath = urlPath.replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieves and serves a previously uploaded file using its File ID. Note: The `ID` and `FileID` fields of an upload are different. - `FileID` is a unique identifier for the file itself. - `ID` is a unique identifier for a specific replica of the file. Since 1Backend is a distributed system, files can be replicated across multiple nodes. This means each uploaded file may have multiple records with the same `FileID` but different `ID`s.
     * Serve an Uploaded File
     */
    async serveUpload(requestParameters: ServeUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.serveUploadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads a file to the server. Currently if using the clients only one file can be uploaded at a time due to this bug https://github.com/OpenAPITools/openapi-generator/issues/11341 Once that is fixed we should have an `PUT /file-svc/uploads`/uploadFiles (note the plural) endpoints. In reality the endpoint \"unofficially\" supports multiple files. YMMV.  Requires the `file-svc:upload:create` permission.
     * Upload a File
     */
    async uploadFileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSvcUploadFileResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/file-svc/upload`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileSvcUploadFileResponseFromJSON(jsonValue));
    }

    /**
     * Uploads a file to the server. Currently if using the clients only one file can be uploaded at a time due to this bug https://github.com/OpenAPITools/openapi-generator/issues/11341 Once that is fixed we should have an `PUT /file-svc/uploads`/uploadFiles (note the plural) endpoints. In reality the endpoint \"unofficially\" supports multiple files. YMMV.  Requires the `file-svc:upload:create` permission.
     * Upload a File
     */
    async uploadFile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSvcUploadFileResponse> {
        const response = await this.uploadFileRaw(initOverrides);
        return await response.value();
    }

}
