/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.0-rc2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatSvcListMessagesRequest,
  ChatSvcListMessagesResponse,
  ChatSvcListThreadsRequest,
  ChatSvcListThreadsResponse,
  ChatSvcSaveMessageRequest,
  ChatSvcSaveThreadRequest,
  ChatSvcSaveThreadResponse,
  Events200Response,
} from '../models/index';
import {
    ChatSvcListMessagesRequestFromJSON,
    ChatSvcListMessagesRequestToJSON,
    ChatSvcListMessagesResponseFromJSON,
    ChatSvcListMessagesResponseToJSON,
    ChatSvcListThreadsRequestFromJSON,
    ChatSvcListThreadsRequestToJSON,
    ChatSvcListThreadsResponseFromJSON,
    ChatSvcListThreadsResponseToJSON,
    ChatSvcSaveMessageRequestFromJSON,
    ChatSvcSaveMessageRequestToJSON,
    ChatSvcSaveThreadRequestFromJSON,
    ChatSvcSaveThreadRequestToJSON,
    ChatSvcSaveThreadResponseFromJSON,
    ChatSvcSaveThreadResponseToJSON,
    Events200ResponseFromJSON,
    Events200ResponseToJSON,
} from '../models/index';

export interface DeleteMessageRequest {
    messageId: string;
    body?: object;
}

export interface DeleteThreadRequest {
    threadId: string;
    body?: object;
}

export interface EventsRequest {
    body?: object;
}

export interface ListMessagesRequest {
    body: ChatSvcListMessagesRequest;
}

export interface ListThreadsRequest {
    body: ChatSvcListThreadsRequest;
}

export interface SaveMessageRequest {
    threadId: string;
    body: ChatSvcSaveMessageRequest;
}

export interface SaveThreadRequest {
    body: ChatSvcSaveThreadRequest;
}

/**
 * 
 */
export class ChatSvcApi extends runtime.BaseAPI {

    /**
     * Delete a specific message from a chat thread by its ID
     * Delete a Message
     */
    async deleteMessageRaw(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling deleteMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/chat-svc/message/{messageId}`;
        urlPath = urlPath.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a specific message from a chat thread by its ID
     * Delete a Message
     */
    async deleteMessage(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.deleteMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific chat thread by its ID
     * Delete a Thread
     */
    async deleteThreadRaw(requestParameters: DeleteThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling deleteThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/chat-svc/thread/{threadId}`;
        urlPath = urlPath.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a specific chat thread by its ID
     * Delete a Thread
     */
    async deleteThread(requestParameters: DeleteThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.deleteThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Events is a dummy endpoint to display documentation about the events that this service emits.
     * Events
     */
    async eventsRaw(requestParameters: EventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Events200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/chat-svc/events`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Events200ResponseFromJSON(jsonValue));
    }

    /**
     * Events is a dummy endpoint to display documentation about the events that this service emits.
     * Events
     */
    async events(requestParameters: EventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Events200Response> {
        const response = await this.eventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch messages (and associated assets) for a specific chat thread.
     * List Messages
     */
    async listMessagesRaw(requestParameters: ListMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatSvcListMessagesResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'chatSvcListMessagesRequest',
                'Required parameter "chatSvcListMessagesRequest" was null or undefined when calling listMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/chat-svc/messages`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatSvcListMessagesRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatSvcListMessagesResponseFromJSON(jsonValue));
    }

    /**
     * Fetch messages (and associated assets) for a specific chat thread.
     * List Messages
     */
    async listMessages(requestParameters: ListMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatSvcListMessagesResponse> {
        const response = await this.listMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch all chat threads associated with a specific user
     * List Threads
     */
    async listThreadsRaw(requestParameters: ListThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatSvcListThreadsResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'chatSvcListThreadsRequest',
                'Required parameter "chatSvcListThreadsRequest" was null or undefined when calling listThreads().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/chat-svc/threads`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatSvcListThreadsRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatSvcListThreadsResponseFromJSON(jsonValue));
    }

    /**
     * Fetch all chat threads associated with a specific user
     * List Threads
     */
    async listThreads(requestParameters: ListThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatSvcListThreadsResponse> {
        const response = await this.listThreadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save a new message to a specific thread.
     * Save Message
     */
    async saveMessageRaw(requestParameters: SaveMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling saveMessage().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'chatSvcSaveMessageRequest',
                'Required parameter "chatSvcSaveMessageRequest" was null or undefined when calling saveMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/chat-svc/thread/{threadId}/message`;
        urlPath = urlPath.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatSvcSaveMessageRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Save a new message to a specific thread.
     * Save Message
     */
    async saveMessage(requestParameters: SaveMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.saveMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update a chat thread. Requires the `chat-svc:thread:edit` permission.
     * Save Thread
     */
    async saveThreadRaw(requestParameters: SaveThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatSvcSaveThreadResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'chatSvcSaveThreadRequest',
                'Required parameter "chatSvcSaveThreadRequest" was null or undefined when calling saveThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }


        let urlPath = `/chat-svc/thread`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatSvcSaveThreadRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatSvcSaveThreadResponseFromJSON(jsonValue));
    }

    /**
     * Create or update a chat thread. Requires the `chat-svc:thread:edit` permission.
     * Save Thread
     */
    async saveThread(requestParameters: SaveThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatSvcSaveThreadResponse> {
        const response = await this.saveThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
