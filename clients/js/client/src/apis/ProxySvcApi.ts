/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProxySvcErrorResponse,
  ProxySvcListRoutesRequest,
  ProxySvcListRoutesResponse,
  ProxySvcSaveRoutesRequest,
  ProxySvcSaveRoutesResponse,
} from '../models/index';
import {
    ProxySvcErrorResponseFromJSON,
    ProxySvcErrorResponseToJSON,
    ProxySvcListRoutesRequestFromJSON,
    ProxySvcListRoutesRequestToJSON,
    ProxySvcListRoutesResponseFromJSON,
    ProxySvcListRoutesResponseToJSON,
    ProxySvcSaveRoutesRequestFromJSON,
    ProxySvcSaveRoutesRequestToJSON,
    ProxySvcSaveRoutesResponseFromJSON,
    ProxySvcSaveRoutesResponseToJSON,
} from '../models/index';

export interface ListRoutesRequest {
    body?: ProxySvcListRoutesRequest;
}

export interface SaveRoutesRequest {
    body: ProxySvcSaveRoutesRequest;
}

/**
 * 
 */
export class ProxySvcApi extends runtime.BaseAPI {

    /**
     * List routes that the edge proxy will use to route requests.
     * List Routes
     */
    async listRoutesRaw(requestParameters: ListRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProxySvcListRoutesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/proxy-svc/routes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProxySvcListRoutesRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProxySvcListRoutesResponseFromJSON(jsonValue));
    }

    /**
     * List routes that the edge proxy will use to route requests.
     * List Routes
     */
    async listRoutes(requestParameters: ListRoutesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProxySvcListRoutesResponse> {
        const response = await this.listRoutesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save routes that the edge proxy will use to route requests.
     * Save Routes
     */
    async saveRoutesRaw(requestParameters: SaveRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProxySvcSaveRoutesResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling saveRoutes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/proxy-svc/routes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProxySvcSaveRoutesRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProxySvcSaveRoutesResponseFromJSON(jsonValue));
    }

    /**
     * Save routes that the edge proxy will use to route requests.
     * Save Routes
     */
    async saveRoutes(requestParameters: SaveRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProxySvcSaveRoutesResponse> {
        const response = await this.saveRoutesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
