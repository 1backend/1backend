/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { UserSvcApp } from './UserSvcApp';
/**
 *
 * @export
 * @interface UserSvcToken
 */
export interface UserSvcToken {
    /**
     * Active tokens contain the most up-to-date information.
     * When a user's role changes—due to role assignment, organization
     * creation/assignment, etc.—all existing tokens are marked inactive.
     * Active tokens are reused during login, while inactive tokens
     * that have been recently refreshed (being used still) are kept for further refreshing
     * (unless `OB_TOKEN_AUTO_REFRESH_OFF` is set to true, old tokens can be refreshed indefinitely.)
     *
     * Active tokens contain the most up-to-date information.
     * When a user's role changes—due to role assignment, organization
     * creation/assignment, etc.—all existing tokens are marked inactive.
     * Active tokens are reused during login, while inactive tokens
     * that have been recently refreshed (see `lastRefreshedAt` field) and are still in use are retained for further refreshing.
     * (Unless `OB_TOKEN_AUTO_REFRESH_OFF` is set to true, in which case old tokens can be refreshed indefinitely.)
     * @type {boolean}
     * @memberof UserSvcToken
     */
    active?: boolean;
    /**
     *
     * @type {UserSvcApp}
     * @memberof UserSvcToken
     */
    app?: UserSvcApp;
    /**
     *
     * @type {string}
     * @memberof UserSvcToken
     */
    appId: string;
    /**
     *
     * @type {string}
     * @memberof UserSvcToken
     */
    createdAt: string;
    /**
     *
     * @type {string}
     * @memberof UserSvcToken
     */
    deletedAt?: string;
    /**
     * The device the token is associated with.
     * This in combination with LastRefreshedAt can be used to
     * determine if the token is still in use, and lets us prune unused tokens.
     * @type {string}
     * @memberof UserSvcToken
     */
    device: string;
    /**
     *
     * @type {string}
     * @memberof UserSvcToken
     */
    expiresAt: string;
    /**
     *
     * @type {string}
     * @memberof UserSvcToken
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof UserSvcToken
     */
    internalId?: string;
    /**
     * The last time the token was refreshed.
     * This is used to determine if the token is still in use.
     * @type {string}
     * @memberof UserSvcToken
     */
    lastRefreshedAt?: string;
    /**
     * Token is a signed JWT used to authenticate the user without querying the User Svc.
     * You can verify it using the public key at `/user-svc/public-key`.
     *
     * The token is just a JSON object with fields like:
     * - "oui": the user ID (e.g., "usr_dC4K75Cbp6")
     * - "olu": the user slug (e.g., "test-user-slug-0")
     * - "oro": a list of roles, such as:
     *   - "user-svc:user"
     *   - "user-svc:org:{org_dC4K7NNDCG}:user"
     * @type {string}
     * @memberof UserSvcToken
     */
    token: string;
    /**
     *
     * @type {string}
     * @memberof UserSvcToken
     */
    updatedAt: string;
    /**
     *
     * @type {string}
     * @memberof UserSvcToken
     */
    userId: string;
}
/**
 * Check if a given object implements the UserSvcToken interface.
 */
export declare function instanceOfUserSvcToken(value: object): value is UserSvcToken;
export declare function UserSvcTokenFromJSON(json: any): UserSvcToken;
export declare function UserSvcTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSvcToken;
export declare function UserSvcTokenToJSON(json: any): UserSvcToken;
export declare function UserSvcTokenToJSONTyped(value?: UserSvcToken | null, ignoreDiscriminator?: boolean): any;
