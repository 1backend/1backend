/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.29
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { PromptSvcParameters } from './PromptSvcParameters';
import type { PromptSvcEngineParameters } from './PromptSvcEngineParameters';
import type { PromptSvcPromptStatus } from './PromptSvcPromptStatus';
import type { PromptSvcPromptType } from './PromptSvcPromptType';
/**
 *
 * @export
 * @interface PromptSvcPrompt
 */
export interface PromptSvcPrompt {
    /**
     * CreatedAt is the time of the prompt creation.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    createdAt?: string;
    /**
     * AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters
     * @type {PromptSvcEngineParameters}
     * @memberof PromptSvcPrompt
     */
    engineParameters?: PromptSvcEngineParameters;
    /**
     * Error that arose during prompt execution, if any.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    error?: string;
    /**
     * Id is the unique ID of the prompt.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    id?: string;
    /**
     * LastRun is the time of the last prompt run.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    lastRun?: string;
    /**
     * MaxRetries specified how many times the system should retry a prompt when it keeps erroring.
     * @type {number}
     * @memberof PromptSvcPrompt
     */
    maxRetries?: number;
    /**
     * ModelId is just the OpenOrch internal ID of the model.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    modelId?: string;
    /**
     * AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.
     * Use these high level parameters when you don't care about the actual engine, only
     * the functionality (eg. text to image, image to image) it provides.
     * @type {PromptSvcParameters}
     * @memberof PromptSvcPrompt
     */
    parameters?: PromptSvcParameters;
    /**
     * Prompt is the message itself eg. "What's a banana?
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    prompt: string;
    /**
     *
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    requestMessageId?: string;
    /**
     *
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    responseMessageId?: string;
    /**
     * RunCount is the number of times the prompt was retried due to errors
     * @type {number}
     * @memberof PromptSvcPrompt
     */
    runCount?: number;
    /**
     * Status of the prompt.
     * @type {PromptSvcPromptStatus}
     * @memberof PromptSvcPrompt
     */
    status?: PromptSvcPromptStatus;
    /**
     * Sync drives whether prompt add request should wait and hang until
     * the prompt is done executing. By default the prompt just gets put on a queue
     * and the client will just subscribe to a Thread Stream.
     * For quick and dirty scripting however it's often times easier to do things syncronously.
     * In those cases set Sync to true.
     * @type {boolean}
     * @memberof PromptSvcPrompt
     */
    sync?: boolean;
    /**
     * ThreadId is the ID of the thread a prompt belongs to.
     * Clients subscribe to Thread Streams to see the answer to a prompt,
     * or set `prompt.sync` to true for a blocking answer.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    threadId?: string;
    /**
     * Type is inferred from the `Parameters` or `EngineParameters` field.
     * Eg. A LLamaCpp prompt will be "Text-to-Text",
     * a Stabel Diffusion one will be "Text-to-Image" etc.
     * @type {PromptSvcPromptType}
     * @memberof PromptSvcPrompt
     */
    type?: PromptSvcPromptType;
    /**
     * UpdatedAt is the last time the prompt was updated.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    updatedAt?: string;
    /**
     * UserId contains the ID of the user who submitted the prompt.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    userId?: string;
}
/**
 * Check if a given object implements the PromptSvcPrompt interface.
 */
export declare function instanceOfPromptSvcPrompt(value: object): value is PromptSvcPrompt;
export declare function PromptSvcPromptFromJSON(json: any): PromptSvcPrompt;
export declare function PromptSvcPromptFromJSONTyped(json: any, ignoreDiscriminator: boolean): PromptSvcPrompt;
export declare function PromptSvcPromptToJSON(json: any): PromptSvcPrompt;
export declare function PromptSvcPromptToJSONTyped(value?: PromptSvcPrompt | null, ignoreDiscriminator?: boolean): any;
