/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.5.1
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface UserSvcAuthToken
 */
export interface UserSvcAuthToken {
    /**
     * Active tokens contain the most up-to-date information.
     * When a user's role changes—due to role assignment, organization
     * creation/assignment, etc.—all existing tokens are marked inactive.
     * Active tokens are reused during login, while inactive tokens
     * are retained for historical reference.
     *
     * Inactive tokens can still be refreshed to create a new active token.
     * A separate mechanism for leaked tokens must be implemented (a different flag or outright deletion).
     * @type {boolean}
     * @memberof UserSvcAuthToken
     */
    active?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserSvcAuthToken
     */
    createdAt: string;
    /**
     *
     * @type {string}
     * @memberof UserSvcAuthToken
     */
    deletedAt?: string;
    /**
     *
     * @type {string}
     * @memberof UserSvcAuthToken
     */
    id: string;
    /**
     * Token is a signed JWT used to authenticate the user without querying the User Svc.
     * You can verify it using the public key at `/user-svc/public-key`.
     *
     * The token is just a JSON object with fields like:
     * - "oui": the user ID (e.g., "usr_dC4K75Cbp6")
     * - "olu": the user slug (e.g., "test-user-slug-0")
     * - "oro": a list of roles, such as:
     *   - "user-svc:user"
     *   - "user-svc:org:{org_dC4K7NNDCG}:user"
     * @type {string}
     * @memberof UserSvcAuthToken
     */
    token: string;
    /**
     *
     * @type {string}
     * @memberof UserSvcAuthToken
     */
    updatedAt: string;
    /**
     *
     * @type {string}
     * @memberof UserSvcAuthToken
     */
    userId: string;
}
/**
 * Check if a given object implements the UserSvcAuthToken interface.
 */
export declare function instanceOfUserSvcAuthToken(value: object): value is UserSvcAuthToken;
export declare function UserSvcAuthTokenFromJSON(json: any): UserSvcAuthToken;
export declare function UserSvcAuthTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSvcAuthToken;
export declare function UserSvcAuthTokenToJSON(json: any): UserSvcAuthToken;
export declare function UserSvcAuthTokenToJSONTyped(value?: UserSvcAuthToken | null, ignoreDiscriminator?: boolean): any;
