/* tslint:disable */
/* eslint-disable */
/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.29
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { FileSvcDownloadFileRequestToJSON, FileSvcDownloadsResponseFromJSON, FileSvcGetDownloadResponseFromJSON, FileSvcListUploadsRequestToJSON, FileSvcListUploadsResponseFromJSON, FileSvcUploadFileResponseFromJSON, } from '../models/index';
/**
 *
 */
export class FileSvcApi extends runtime.BaseAPI {
    /**
     * Start or resume the download for a specified URL.  Requires the `file-svc:download:create` permission.
     * Download a File
     */
    downloadFileRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling downloadFile().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/file-svc/download`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: FileSvcDownloadFileRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Start or resume the download for a specified URL.  Requires the `file-svc:download:create` permission.
     * Download a File
     */
    downloadFile(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.downloadFileRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a download by URL.  Requires the `file-svc:download:view` permission.
     * Get a Download
     */
    getDownloadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['url'] == null) {
                throw new runtime.RequiredError('url', 'Required parameter "url" was null or undefined when calling getDownload().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/file-svc/download/{url}`.replace(`{${"url"}}`, encodeURIComponent(String(requestParameters['url']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FileSvcGetDownloadResponseFromJSON(jsonValue));
        });
    }
    /**
     * Get a download by URL.  Requires the `file-svc:download:view` permission.
     * Get a Download
     */
    getDownload(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDownloadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List download details.  Requires the `file-svc:download:view` permission.
     * List Downloads
     */
    listDownloadsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/file-svc/downloads`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FileSvcDownloadsResponseFromJSON(jsonValue));
        });
    }
    /**
     * List download details.  Requires the `file-svc:download:view` permission.
     * List Downloads
     */
    listDownloads(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listDownloadsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List the uploaded files.  Requires the `file-svc:upload:view` permission.
     * List Uploads
     */
    listUploadsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/file-svc/uploads`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: FileSvcListUploadsRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FileSvcListUploadsResponseFromJSON(jsonValue));
        });
    }
    /**
     * List the uploaded files.  Requires the `file-svc:upload:view` permission.
     * List Uploads
     */
    listUploads() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listUploadsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Pause a download that is currently in progress.  Requires the `file-svc:download:edit` permission.
     * Pause a Download
     */
    pauseDownloadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['url'] == null) {
                throw new runtime.RequiredError('url', 'Required parameter "url" was null or undefined when calling pauseDownload().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/file-svc/download/{url}/pause`.replace(`{${"url"}}`, encodeURIComponent(String(requestParameters['url']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Pause a download that is currently in progress.  Requires the `file-svc:download:edit` permission.
     * Pause a Download
     */
    pauseDownload(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pauseDownloadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Serves a previously downloaded file based on its URL.
     * Serve a Downloaded file
     */
    serveDownloadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['url'] == null) {
                throw new runtime.RequiredError('url', 'Required parameter "url" was null or undefined when calling serveDownload().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/file-svc/serve/download/{url}`.replace(`{${"url"}}`, encodeURIComponent(String(requestParameters['url']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.BlobApiResponse(response);
        });
    }
    /**
     * Serves a previously downloaded file based on its URL.
     * Serve a Downloaded file
     */
    serveDownload(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.serveDownloadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves and serves a previously uploaded file using its File ID. Note: The `ID` and `FileID` fields of an upload are different. - `FileID` is a unique identifier for the file itself. - `ID` is a unique identifier for a specific replica of the file. Since OpenOrch is a distributed system, files can be replicated across multiple nodes. This means each uploaded file may have multiple records with the same `FileID` but different `ID`s.
     * Serve an Uploaded File
     */
    serveUploadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['fileId'] == null) {
                throw new runtime.RequiredError('fileId', 'Required parameter "fileId" was null or undefined when calling serveUpload().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/file-svc/serve/upload/{fileId}`.replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.BlobApiResponse(response);
        });
    }
    /**
     * Retrieves and serves a previously uploaded file using its File ID. Note: The `ID` and `FileID` fields of an upload are different. - `FileID` is a unique identifier for the file itself. - `ID` is a unique identifier for a specific replica of the file. Since OpenOrch is a distributed system, files can be replicated across multiple nodes. This means each uploaded file may have multiple records with the same `FileID` but different `ID`s.
     * Serve an Uploaded File
     */
    serveUpload(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.serveUploadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Uploads a file to the server. Currently if using the clients only one file can be uploaded at a time due to this bug https://github.com/OpenAPITools/openapi-generator/issues/11341 Once that is fixed we should have an `PUT /file-svc/uploads`/uploadFiles (note the plural) endpoints. In reality the endpoint \"unofficially\" supports multiple files. YMMV.  Requires the `file-svc:upload:create` permission.
     * Upload a File
     */
    uploadFileRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['file'] == null) {
                throw new runtime.RequiredError('file', 'Required parameter "file" was null or undefined when calling uploadFile().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const consumes = [
                { contentType: 'multipart/form-data' },
            ];
            // @ts-ignore: canConsumeForm may be unused
            const canConsumeForm = runtime.canConsumeForm(consumes);
            let formParams;
            let useForm = false;
            // use FormData to transmit files using content-type "multipart/form-data"
            useForm = canConsumeForm;
            if (useForm) {
                formParams = new FormData();
            }
            else {
                formParams = new URLSearchParams();
            }
            if (requestParameters['file'] != null) {
                formParams.append('file', requestParameters['file']);
            }
            const response = yield this.request({
                path: `/file-svc/upload`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FileSvcUploadFileResponseFromJSON(jsonValue));
        });
    }
    /**
     * Uploads a file to the server. Currently if using the clients only one file can be uploaded at a time due to this bug https://github.com/OpenAPITools/openapi-generator/issues/11341 Once that is fixed we should have an `PUT /file-svc/uploads`/uploadFiles (note the plural) endpoints. In reality the endpoint \"unofficially\" supports multiple files. YMMV.  Requires the `file-svc:upload:create` permission.
     * Upload a File
     */
    uploadFile(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.uploadFileRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
