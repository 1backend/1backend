/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.0-rc7
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ChatSvcEventThreadUpdate, ChatSvcListMessagesRequest, ChatSvcListMessagesResponse, ChatSvcListThreadsRequest, ChatSvcListThreadsResponse, ChatSvcSaveMessageRequest, ChatSvcSaveThreadRequest, ChatSvcSaveThreadResponse } from '../models/index';
export interface DeleteMessageRequest {
    messageId: string;
}
export interface DeleteThreadRequest {
    threadId: string;
}
export interface ListMessagesRequest {
    body: ChatSvcListMessagesRequest;
}
export interface ListThreadsRequest {
    body: ChatSvcListThreadsRequest;
}
export interface SaveMessageRequest {
    threadId: string;
    body: ChatSvcSaveMessageRequest;
}
export interface SaveThreadRequest {
    body: ChatSvcSaveThreadRequest;
}
/**
 *
 */
export declare class ChatSvcApi extends runtime.BaseAPI {
    /**
     * Delete a specific message from a chat thread by its ID
     * Delete a Message
     */
    deleteMessageRaw(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Delete a specific message from a chat thread by its ID
     * Delete a Message
     */
    deleteMessage(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Delete a specific chat thread by its ID
     * Delete a Thread
     */
    deleteThreadRaw(requestParameters: DeleteThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Delete a specific chat thread by its ID
     * Delete a Thread
     */
    deleteThread(requestParameters: DeleteThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Events is a dummy endpoint to display documentation about the events that this service emits.
     * Events
     */
    eventsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatSvcEventThreadUpdate>>;
    /**
     * Events is a dummy endpoint to display documentation about the events that this service emits.
     * Events
     */
    events(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatSvcEventThreadUpdate>;
    /**
     * Fetch messages (and associated assets) for a specific chat thread.
     * List Messages
     */
    listMessagesRaw(requestParameters: ListMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatSvcListMessagesResponse>>;
    /**
     * Fetch messages (and associated assets) for a specific chat thread.
     * List Messages
     */
    listMessages(requestParameters: ListMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatSvcListMessagesResponse>;
    /**
     * Fetch all chat threads associated with a specific user
     * List Threads
     */
    listThreadsRaw(requestParameters: ListThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatSvcListThreadsResponse>>;
    /**
     * Fetch all chat threads associated with a specific user
     * List Threads
     */
    listThreads(requestParameters: ListThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatSvcListThreadsResponse>;
    /**
     * Save a new message to a specific thread.
     * Save Message
     */
    saveMessageRaw(requestParameters: SaveMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Save a new message to a specific thread.
     * Save Message
     */
    saveMessage(requestParameters: SaveMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Create or update a chat thread. Requires the `chat-svc:thread:edit` permission.
     * Save Thread
     */
    saveThreadRaw(requestParameters: SaveThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatSvcSaveThreadResponse>>;
    /**
     * Create or update a chat thread. Requires the `chat-svc:thread:edit` permission.
     * Save Thread
     */
    saveThread(requestParameters: SaveThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatSvcSaveThreadResponse>;
}
