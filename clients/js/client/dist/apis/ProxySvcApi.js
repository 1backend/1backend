/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.0-rc2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { ProxySvcListCertsRequestToJSON, ProxySvcListCertsResponseFromJSON, ProxySvcListRoutesRequestToJSON, ProxySvcListRoutesResponseFromJSON, ProxySvcSaveCertsRequestToJSON, ProxySvcSaveRoutesRequestToJSON, ProxySvcSaveRoutesResponseFromJSON, } from '../models/index';
/**
 *
 */
export class ProxySvcApi extends runtime.BaseAPI {
    /**
     * List certs that the edge proxy will use to cert requests.
     * List Certs
     */
    listCertsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            let urlPath = `/proxy-svc/certs`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ProxySvcListCertsRequestToJSON(requestParameters['proxySvcListCertsRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ProxySvcListCertsResponseFromJSON(jsonValue));
        });
    }
    /**
     * List certs that the edge proxy will use to cert requests.
     * List Certs
     */
    listCerts() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listCertsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List routes that the edge proxy will use to route requests.
     * List Routes
     */
    listRoutesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            let urlPath = `/proxy-svc/routes`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ProxySvcListRoutesRequestToJSON(requestParameters['proxySvcListRoutesRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ProxySvcListRoutesResponseFromJSON(jsonValue));
        });
    }
    /**
     * List routes that the edge proxy will use to route requests.
     * List Routes
     */
    listRoutes() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listRoutesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint only exist for testing purposes. Only callable by admins Certs should be saved by the Proxy Svc and its edge proxying functionality internally, not through this endpoint.
     * Save Certs
     */
    saveCertsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['proxySvcSaveCertsRequest'] == null) {
                throw new runtime.RequiredError('proxySvcSaveCertsRequest', 'Required parameter "proxySvcSaveCertsRequest" was null or undefined when calling saveCerts().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            let urlPath = `/proxy-svc/certs`;
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: ProxySvcSaveCertsRequestToJSON(requestParameters['proxySvcSaveCertsRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * This endpoint only exist for testing purposes. Only callable by admins Certs should be saved by the Proxy Svc and its edge proxying functionality internally, not through this endpoint.
     * Save Certs
     */
    saveCerts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.saveCertsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Save routes that the edge proxy will use to route requests.
     * Save Routes
     */
    saveRoutesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['proxySvcSaveRoutesRequest'] == null) {
                throw new runtime.RequiredError('proxySvcSaveRoutesRequest', 'Required parameter "proxySvcSaveRoutesRequest" was null or undefined when calling saveRoutes().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            let urlPath = `/proxy-svc/routes`;
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: ProxySvcSaveRoutesRequestToJSON(requestParameters['proxySvcSaveRoutesRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ProxySvcSaveRoutesResponseFromJSON(jsonValue));
        });
    }
    /**
     * Save routes that the edge proxy will use to route requests.
     * Save Routes
     */
    saveRoutes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.saveRoutesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
