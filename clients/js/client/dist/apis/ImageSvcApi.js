/* tslint:disable */
/* eslint-disable */
/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.9.0
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
/**
 *
 */
export class ImageSvcApi extends runtime.BaseAPI {
    /**
     * Retrieves and serves a previously uploaded image file using its File ID.
     * Serve Uploaded Image
     */
    serveUploadedImageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['fileId'] == null) {
                throw new runtime.RequiredError('fileId', 'Required parameter "fileId" was null or undefined when calling serveUploadedImage().');
            }
            const queryParameters = {};
            if (requestParameters['width'] != null) {
                queryParameters['width'] = requestParameters['width'];
            }
            if (requestParameters['height'] != null) {
                queryParameters['height'] = requestParameters['height'];
            }
            const headerParameters = {};
            let urlPath = `/image-svc/serve/upload/{fileId}`;
            urlPath = urlPath.replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.BlobApiResponse(response);
        });
    }
    /**
     * Retrieves and serves a previously uploaded image file using its File ID.
     * Serve Uploaded Image
     */
    serveUploadedImage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.serveUploadedImageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
