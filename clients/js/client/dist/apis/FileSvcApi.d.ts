/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.29
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { FileSvcDownloadFileRequest, FileSvcDownloadsResponse, FileSvcGetDownloadResponse, FileSvcListUploadsRequest, FileSvcListUploadsResponse, FileSvcUploadFileResponse } from '../models/index';
export interface DownloadFileRequest {
    body: FileSvcDownloadFileRequest;
}
export interface GetDownloadRequest {
    url: string;
}
export interface ListUploadsRequest {
    body?: FileSvcListUploadsRequest;
}
export interface PauseDownloadRequest {
    url: string;
}
export interface ServeDownloadRequest {
    url: string;
}
export interface ServeUploadRequest {
    fileId: string;
}
export interface UploadFileRequest {
    file: Blob;
}
/**
 *
 */
export declare class FileSvcApi extends runtime.BaseAPI {
    /**
     * Start or resume the download for a specified URL.  Requires the `file-svc:download:create` permission.
     * Download a File
     */
    downloadFileRaw(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Start or resume the download for a specified URL.  Requires the `file-svc:download:create` permission.
     * Download a File
     */
    downloadFile(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Get a download by URL.  Requires the `file-svc:download:view` permission.
     * Get a Download
     */
    getDownloadRaw(requestParameters: GetDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSvcGetDownloadResponse>>;
    /**
     * Get a download by URL.  Requires the `file-svc:download:view` permission.
     * Get a Download
     */
    getDownload(requestParameters: GetDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSvcGetDownloadResponse>;
    /**
     * List download details.  Requires the `file-svc:download:view` permission.
     * List Downloads
     */
    listDownloadsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSvcDownloadsResponse>>;
    /**
     * List download details.  Requires the `file-svc:download:view` permission.
     * List Downloads
     */
    listDownloads(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSvcDownloadsResponse>;
    /**
     * List the uploaded files.  Requires the `file-svc:upload:view` permission.
     * List Uploads
     */
    listUploadsRaw(requestParameters: ListUploadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSvcListUploadsResponse>>;
    /**
     * List the uploaded files.  Requires the `file-svc:upload:view` permission.
     * List Uploads
     */
    listUploads(requestParameters?: ListUploadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSvcListUploadsResponse>;
    /**
     * Pause a download that is currently in progress.  Requires the `file-svc:download:edit` permission.
     * Pause a Download
     */
    pauseDownloadRaw(requestParameters: PauseDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Pause a download that is currently in progress.  Requires the `file-svc:download:edit` permission.
     * Pause a Download
     */
    pauseDownload(requestParameters: PauseDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Serves a previously downloaded file based on its URL.
     * Serve a Downloaded file
     */
    serveDownloadRaw(requestParameters: ServeDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;
    /**
     * Serves a previously downloaded file based on its URL.
     * Serve a Downloaded file
     */
    serveDownload(requestParameters: ServeDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;
    /**
     * Retrieves and serves a previously uploaded file using its File ID. Note: The `ID` and `FileID` fields of an upload are different. - `FileID` is a unique identifier for the file itself. - `ID` is a unique identifier for a specific replica of the file. Since OpenOrch is a distributed system, files can be replicated across multiple nodes. This means each uploaded file may have multiple records with the same `FileID` but different `ID`s.
     * Serve an Uploaded File
     */
    serveUploadRaw(requestParameters: ServeUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;
    /**
     * Retrieves and serves a previously uploaded file using its File ID. Note: The `ID` and `FileID` fields of an upload are different. - `FileID` is a unique identifier for the file itself. - `ID` is a unique identifier for a specific replica of the file. Since OpenOrch is a distributed system, files can be replicated across multiple nodes. This means each uploaded file may have multiple records with the same `FileID` but different `ID`s.
     * Serve an Uploaded File
     */
    serveUpload(requestParameters: ServeUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;
    /**
     * Uploads a file to the server. Currently if using the clients only one file can be uploaded at a time due to this bug https://github.com/OpenAPITools/openapi-generator/issues/11341 Once that is fixed we should have an `PUT /file-svc/uploads`/uploadFiles (note the plural) endpoints. In reality the endpoint \"unofficially\" supports multiple files. YMMV.  Requires the `file-svc:upload:create` permission.
     * Upload a File
     */
    uploadFileRaw(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSvcUploadFileResponse>>;
    /**
     * Uploads a file to the server. Currently if using the clients only one file can be uploaded at a time due to this bug https://github.com/OpenAPITools/openapi-generator/issues/11341 Once that is fixed we should have an `PUT /file-svc/uploads`/uploadFiles (note the plural) endpoints. In reality the endpoint \"unofficially\" supports multiple files. YMMV.  Requires the `file-svc:upload:create` permission.
     * Upload a File
     */
    uploadFile(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSvcUploadFileResponse>;
}
