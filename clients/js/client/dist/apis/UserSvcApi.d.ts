/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.3.0-rc.35
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { UserSvcChangePasswordRequest, UserSvcCreateUserRequest, UserSvcGetPublicKeyResponse, UserSvcHasPermissionRequest, UserSvcHasPermissionResponse, UserSvcListEnrollsRequest, UserSvcListEnrollsResponse, UserSvcListOrganizationsRequest, UserSvcListOrganizationsResponse, UserSvcListPermissionsResponse, UserSvcListPermitsRequest, UserSvcListPermitsResponse, UserSvcListUsersRequest, UserSvcListUsersResponse, UserSvcLoginRequest, UserSvcLoginResponse, UserSvcReadUserByTokenResponse, UserSvcRegisterRequest, UserSvcRegisterResponse, UserSvcResetPasswordRequest, UserSvcSaveEnrollsRequest, UserSvcSaveEnrollsResponse, UserSvcSaveOrganizationRequest, UserSvcSaveOrganizationResponse, UserSvcSavePermitsRequest, UserSvcSaveProfileRequest } from '../models/index';
export interface AddUserToOrganizationRequest {
    organizationId: string;
    userId: string;
    body?: object;
}
export interface ChangePasswordRequest {
    body: UserSvcChangePasswordRequest;
}
export interface CreateUserRequest {
    body: UserSvcCreateUserRequest;
}
export interface DeleteUserRequest {
    userId: string;
}
export interface HasPermissionRequest {
    permission: string;
    body?: UserSvcHasPermissionRequest;
}
export interface ListEnrollsRequest {
    body: UserSvcListEnrollsRequest;
}
export interface ListOrganizationsRequest {
    body: UserSvcListOrganizationsRequest;
}
export interface ListPermissionsRequest {
    roleId: string;
}
export interface ListPermitsRequest {
    body: UserSvcListPermitsRequest;
}
export interface ListUsersRequest {
    body?: UserSvcListUsersRequest;
}
export interface LoginRequest {
    body: UserSvcLoginRequest;
}
export interface RegisterRequest {
    body: UserSvcRegisterRequest;
}
export interface RemoveUserFromOrganizationRequest {
    organizationId: string;
    userId: string;
    body?: object;
}
export interface ResetPasswordRequest {
    userId: string;
    body: UserSvcResetPasswordRequest;
}
export interface SaveEnrollsRequest {
    body: UserSvcSaveEnrollsRequest;
}
export interface SaveOrganizationRequest {
    body: UserSvcSaveOrganizationRequest;
}
export interface SavePermitsRequest {
    body: UserSvcSavePermitsRequest;
}
export interface SaveSelfRequest {
    userId: string;
    body: UserSvcSaveProfileRequest;
}
export interface SaveUserRequest {
    userId: string;
    body: UserSvcSaveProfileRequest;
}
/**
 *
 */
export declare class UserSvcApi extends runtime.BaseAPI {
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * Add a User to an Organization
     */
    addUserToOrganizationRaw(requestParameters: AddUserToOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * Add a User to an Organization
     */
    addUserToOrganization(requestParameters: AddUserToOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Allows an authenticated user to change their own password.
     * Change User Password
     */
    changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Allows an authenticated user to change their own password.
     * Change User Password
     */
    changePassword(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Allows an authenticated administrator to create a new user with specified details.
     * Create a New User
     */
    createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Allows an authenticated administrator to create a new user with specified details.
     * Create a New User
     */
    createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Delete a user based on the user ID.
     * Delete a User
     */
    deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Delete a user based on the user ID.
     * Delete a User
     */
    deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Get the public key to parse and verify the JWT.
     * Get Public Key
     */
    getPublicKeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcGetPublicKeyResponse>>;
    /**
     * Get the public key to parse and verify the JWT.
     * Get Public Key
     */
    getPublicKey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcGetPublicKeyResponse>;
    /**
     * Check whether the caller user has a specific permission. Ideally, this endpoint should rarely be used, as the JWT token already includes all user roles. Caching the `List Permissions` and `List Permits` responses allows services to determine user authorization without repeatedly calling this endpoint.
     * Has Permission
     */
    hasPermissionRaw(requestParameters: HasPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcHasPermissionResponse>>;
    /**
     * Check whether the caller user has a specific permission. Ideally, this endpoint should rarely be used, as the JWT token already includes all user roles. Caching the `List Permissions` and `List Permits` responses allows services to determine user authorization without repeatedly calling this endpoint.
     * Has Permission
     */
    hasPermission(requestParameters: HasPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcHasPermissionResponse>;
    /**
     * List enrolls. Role, user ID or contact ID must be specified. Caller can only list enrolls of roles they own.
     * List Enrolls
     */
    listEnrollsRaw(requestParameters: ListEnrollsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcListEnrollsResponse>>;
    /**
     * List enrolls. Role, user ID or contact ID must be specified. Caller can only list enrolls of roles they own.
     * List Enrolls
     */
    listEnrolls(requestParameters: ListEnrollsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcListEnrollsResponse>;
    /**
     * Requires the `user-svc:organization:view` permission, that only admins have by default.
     * List Organizations
     */
    listOrganizationsRaw(requestParameters: ListOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcListOrganizationsResponse>>;
    /**
     * Requires the `user-svc:organization:view` permission, that only admins have by default.
     * List Organizations
     */
    listOrganizations(requestParameters: ListOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcListOrganizationsResponse>;
    /**
     * List permissions by roles. Caller can only list permissions for roles they have.
     * List Permissions
     */
    listPermissionsRaw(requestParameters: ListPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcListPermissionsResponse>>;
    /**
     * List permissions by roles. Caller can only list permissions for roles they have.
     * List Permissions
     */
    listPermissions(requestParameters: ListPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcListPermissionsResponse>;
    /**
     * List permits. Requires the `user-svc:permit:view` permission, which only admins have by default. &todo Users should be able to list permits referring to them.
     * List Permits
     */
    listPermitsRaw(requestParameters: ListPermitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcListPermitsResponse>>;
    /**
     * List permits. Requires the `user-svc:permit:view` permission, which only admins have by default. &todo Users should be able to list permits referring to them.
     * List Permits
     */
    listPermits(requestParameters: ListPermitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcListPermitsResponse>;
    /**
     * Fetches a list of users with optional query filters and pagination. Requires the `user-svc:user:view` permission that only admins have by default.
     * List Users
     */
    listUsersRaw(requestParameters: ListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcListUsersResponse>>;
    /**
     * Fetches a list of users with optional query filters and pagination. Requires the `user-svc:user:view` permission that only admins have by default.
     * List Users
     */
    listUsers(requestParameters?: ListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcListUsersResponse>;
    /**
     * Authenticates a user and returns a token.
     * Login
     */
    loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcLoginResponse>>;
    /**
     * Authenticates a user and returns a token.
     * Login
     */
    login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcLoginResponse>;
    /**
     * Retrieves user information based on the authentication token in the request header. Typically called by single-page applications during the initial page load. While some details (such as roles, slug, user ID, and active organization ID) can be extracted from the JWT, this endpoint returns additional data, including the full user object and associated organizations.
     * Read User by Token
     */
    readUserByTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcReadUserByTokenResponse>>;
    /**
     * Retrieves user information based on the authentication token in the request header. Typically called by single-page applications during the initial page load. While some details (such as roles, slug, user ID, and active organization ID) can be extracted from the JWT, this endpoint returns additional data, including the full user object and associated organizations.
     * Read User by Token
     */
    readUserByToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcReadUserByTokenResponse>;
    /**
     * Register a new user with a name, email, and password.
     * Register
     */
    registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcRegisterResponse>>;
    /**
     * Register a new user with a name, email, and password.
     * Register
     */
    register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcRegisterResponse>;
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * Remove a User from an Organization
     */
    removeUserFromOrganizationRaw(requestParameters: RemoveUserFromOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * Remove a User from an Organization
     */
    removeUserFromOrganization(requestParameters: RemoveUserFromOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Allows an administrator to change a user\'s password.
     * Reset Password
     */
    resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Allows an administrator to change a user\'s password.
     * Reset Password
     */
    resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Enroll a list of users by contact or user Id to acquire a role. Works on future or current users.  A user can only enroll an other user to a role if the user owns that role.  A user \"owns\" a role in the following cases: - A static role where the role ID is prefixed with the caller\'s slug. - Any dynamic or static role where the caller is an admin.  Examples: - A user with the slug \"joe-doe\" owns roles like \"joe-doe:any-custom-role\". - A user with any slug who has the role \"my-service:admin\" owns \"my-service:user\". - A user with any slug who has the role \"user-svc:org:{%orgId}:admin\" owns \"user-svc:org:{%orgId}:user\".
     * Save Enrolls
     */
    saveEnrollsRaw(requestParameters: SaveEnrollsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcSaveEnrollsResponse>>;
    /**
     * Enroll a list of users by contact or user Id to acquire a role. Works on future or current users.  A user can only enroll an other user to a role if the user owns that role.  A user \"owns\" a role in the following cases: - A static role where the role ID is prefixed with the caller\'s slug. - Any dynamic or static role where the caller is an admin.  Examples: - A user with the slug \"joe-doe\" owns roles like \"joe-doe:any-custom-role\". - A user with any slug who has the role \"my-service:admin\" owns \"my-service:user\". - A user with any slug who has the role \"user-svc:org:{%orgId}:admin\" owns \"user-svc:org:{%orgId}:user\".
     * Save Enrolls
     */
    saveEnrolls(requestParameters: SaveEnrollsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcSaveEnrollsResponse>;
    /**
     * Allows a logged-in user to save an organization. The user initiating the request will be assigned the role of admin for that organization. The initiating user will receive a dynamic role in the format `user-svc:org:{organizationId}:admin`, where `{organizationId}` is a unique identifier for the saved organization. Dynamic roles are generated based on specific user-resource associations (in this case the resource being the organization), offering more flexible permission management compared to static roles.
     * Save an Organization
     */
    saveOrganizationRaw(requestParameters: SaveOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcSaveOrganizationResponse>>;
    /**
     * Allows a logged-in user to save an organization. The user initiating the request will be assigned the role of admin for that organization. The initiating user will receive a dynamic role in the format `user-svc:org:{organizationId}:admin`, where `{organizationId}` is a unique identifier for the saved organization. Dynamic roles are generated based on specific user-resource associations (in this case the resource being the organization), offering more flexible permission management compared to static roles.
     * Save an Organization
     */
    saveOrganization(requestParameters: SaveOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcSaveOrganizationResponse>;
    /**
     * Save permits. // @Description Permits give access to users with certain slugs and roles to permissions.
     * Save Permits
     */
    savePermitsRaw(requestParameters: SavePermitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Save permits. // @Description Permits give access to users with certain slugs and roles to permissions.
     * Save Permits
     */
    savePermits(requestParameters: SavePermitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Save user\'s own profile information.
     * Save User Profile
     */
    saveSelfRaw(requestParameters: SaveSelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Save user\'s own profile information.
     * Save User Profile
     */
    saveSelf(requestParameters: SaveSelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Save user information based on the provided user ID. It is intended for admins, because it uses the `user-svc:user:edit` permission which only admins have. For a user to edit its own profile, see saveSelf.
     * Save User
     */
    saveUserRaw(requestParameters: SaveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Save user information based on the provided user ID. It is intended for admins, because it uses the `user-svc:user:edit` permission which only admins have. For a user to edit its own profile, see saveSelf.
     * Save User
     */
    saveUser(requestParameters: SaveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
}
