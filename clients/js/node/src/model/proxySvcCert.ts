/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.8.0-rc7
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class ProxySvcCert {
    /**
    * PEM-encoded certificate bundle   -----BEGIN EC PARAMETERS-----  BggqhkjOPQMBBw==  -----END EC PARAMETERS-----  -----BEGIN EC PRIVATE KEY-----  MHcCAQEEIDC3+7pySTQl6WRBuef...  -----END EC PRIVATE KEY-----  -----BEGIN CERTIFICATE-----  MIIBhTCCASugAwIBAgIUQYwE...  -----END CERTIFICATE-----
    */
    'cert': string;
    /**
    * Subject Common Name (typically domain)
    */
    'commonName'?: string;
    /**
    * When cert record was created
    */
    'createdAt': string;
    /**
    * Subject Alternative Names (covered domains)
    */
    'dnsNames'?: Array<string>;
    /**
    * Id is the host which this cert is for, e.g., \"example.com\" or \"www.example.com\"
    */
    'id': string;
    /**
    * Whether cert is a CA (usually false for LE certs)
    */
    'isCA'?: boolean;
    /**
    * Certificate issuer name (e.g., Let\'s Encrypt)
    */
    'issuer'?: string;
    /**
    * Cert validity end time
    */
    'notAfter'?: string;
    /**
    * Cert validity start time
    */
    'notBefore'?: string;
    /**
    * Public key algorithm (e.g., RSA, ECDSA)
    */
    'publicKeyAlgorithm'?: string;
    /**
    * Bit length of the public key
    */
    'publicKeyBitLength'?: number;
    /**
    * Unique certificate serial number
    */
    'serialNumber'?: string;
    /**
    * Algorithm used to sign the cert (e.g., SHA256-RSA)
    */
    'signatureAlgorithm'?: string;
    /**
    * When cert record was last updated
    */
    'updatedAt': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "cert",
            "baseName": "cert",
            "type": "string"
        },
        {
            "name": "commonName",
            "baseName": "commonName",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "string"
        },
        {
            "name": "dnsNames",
            "baseName": "dnsNames",
            "type": "Array<string>"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "isCA",
            "baseName": "isCA",
            "type": "boolean"
        },
        {
            "name": "issuer",
            "baseName": "issuer",
            "type": "string"
        },
        {
            "name": "notAfter",
            "baseName": "notAfter",
            "type": "string"
        },
        {
            "name": "notBefore",
            "baseName": "notBefore",
            "type": "string"
        },
        {
            "name": "publicKeyAlgorithm",
            "baseName": "publicKeyAlgorithm",
            "type": "string"
        },
        {
            "name": "publicKeyBitLength",
            "baseName": "publicKeyBitLength",
            "type": "number"
        },
        {
            "name": "serialNumber",
            "baseName": "serialNumber",
            "type": "string"
        },
        {
            "name": "signatureAlgorithm",
            "baseName": "signatureAlgorithm",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "updatedAt",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ProxySvcCert.attributeTypeMap;
    }
}

