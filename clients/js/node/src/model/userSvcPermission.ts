/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.29
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class UserSvcPermission {
    'createdAt'?: string;
    'description'?: string;
    /**
    * eg. \"user.viewer\"
    */
    'id'?: string;
    /**
    * eg. \"User Viewer\"
    */
    'name'?: string;
    /**
    * Service who owns the permission  Uncertain if this aligns with the system\'s use of slugs. Issue encountered: I renamed Docker Svc to Container Svc in two steps (by mistake). The name/slug had already changed to \"container-svc,\" but data was still being saved in the \"dockerSvcCredentials\" table. After renaming the tables as well, I hit a \"cannot update unowned permission\" error because ownership relies on this field rather than the user slug. YMMV.
    */
    'ownerId'?: string;
    'updatedAt'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "ownerId",
            "baseName": "ownerId",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "updatedAt",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UserSvcPermission.attributeTypeMap;
    }
}

