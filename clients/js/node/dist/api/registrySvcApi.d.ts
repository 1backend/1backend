/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.29
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { RegistrySvcListDefinitionsResponse } from '../model/registrySvcListDefinitionsResponse';
import { RegistrySvcListInstancesResponse } from '../model/registrySvcListInstancesResponse';
import { RegistrySvcListNodesRequest } from '../model/registrySvcListNodesRequest';
import { RegistrySvcListNodesResponse } from '../model/registrySvcListNodesResponse';
import { RegistrySvcNodeSelfResponse } from '../model/registrySvcNodeSelfResponse';
import { RegistrySvcRegisterInstanceRequest } from '../model/registrySvcRegisterInstanceRequest';
import { RegistrySvcSaveDefinitionRequest } from '../model/registrySvcSaveDefinitionRequest';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum RegistrySvcApiApiKeys {
    BearerAuth = 0
}
export declare class RegistrySvcApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BearerAuth: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: RegistrySvcApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Deletes a registered definition by ID.
     * @summary Delete Definition
     * @param id Definition ID
     */
    deleteDefinition(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Deletes a registered node by node URL. This endpoint is useful when a node is no longer available but it\'s still present in the database.
     * @summary Delete Node
     * @param url Node URL
     */
    deleteNode(url: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Retrieves a list of all definitions or filters them by specific criteria.
     * @summary List Definitions
     */
    listDefinitions(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RegistrySvcListDefinitionsResponse;
    }>;
    /**
     * Retrieves a list of all instances or filters them by specific criteria (e.g., host, IP).
     * @summary List Service Instances
     * @param scheme Scheme to filter by
     * @param ip IP to filter by
     * @param deploymentId Deployment ID to filter by
     * @param host Host to filter by
     * @param ip2 IP to filter by
     * @param id Id to filter by
     * @param slug Slug to filter by
     */
    listInstances(scheme?: string, ip?: string, deploymentId?: string, host?: string, ip2?: string, id?: string, slug?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RegistrySvcListInstancesResponse;
    }>;
    /**
     * Retrieve a list of nodes.
     * @summary List Nodes
     * @param body List Nodes Request
     */
    listNodes(body?: RegistrySvcListNodesRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RegistrySvcListNodesResponse;
    }>;
    /**
     * Registers an instance. Idempotent.
     * @summary Register Instance
     * @param body Register Instance Request
     */
    registerInstance(body: RegistrySvcRegisterInstanceRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Removes a registered instance by ID.
     * @summary Remove Instance
     * @param id Instance ID
     */
    removeInstance(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Registers a new definition, associating an definition address with a slug acquired from the bearer token.
     * @summary Register a Definition
     * @param body Register Service Definition Request
     */
    saveDefinition(body: RegistrySvcSaveDefinitionRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Show the local node.
     * @summary View Self Node
     * @param body List Registrys Request
     */
    selfNode(body?: object, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RegistrySvcNodeSelfResponse;
    }>;
}
