/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { ChatSvcEventThreadUpdate } from '../model/chatSvcEventThreadUpdate';
import { ChatSvcListMessagesRequest } from '../model/chatSvcListMessagesRequest';
import { ChatSvcListMessagesResponse } from '../model/chatSvcListMessagesResponse';
import { ChatSvcListThreadsRequest } from '../model/chatSvcListThreadsRequest';
import { ChatSvcListThreadsResponse } from '../model/chatSvcListThreadsResponse';
import { ChatSvcSaveMessageRequest } from '../model/chatSvcSaveMessageRequest';
import { ChatSvcSaveThreadRequest } from '../model/chatSvcSaveThreadRequest';
import { ChatSvcSaveThreadResponse } from '../model/chatSvcSaveThreadResponse';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum ChatSvcApiApiKeys {
    BearerAuth = 0
}
export declare class ChatSvcApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BearerAuth: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ChatSvcApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Delete a specific message from a chat thread by its ID
     * @summary Delete a Message
     * @param messageId Message ID
     */
    deleteMessage(messageId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: {
            [key: string]: any;
        };
    }>;
    /**
     * Delete a specific chat thread by its ID
     * @summary Delete a Thread
     * @param threadId Thread ID
     */
    deleteThread(threadId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: {
            [key: string]: any;
        };
    }>;
    /**
     * Events is a dummy endpoint to display documentation about the events that this service emits.
     * @summary Events
     */
    events(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ChatSvcEventThreadUpdate;
    }>;
    /**
     * Fetch messages (and associated assets) for a specific chat thread.
     * @summary List Messages
     * @param body List Messages Request
     */
    listMessages(body: ChatSvcListMessagesRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ChatSvcListMessagesResponse;
    }>;
    /**
     * Fetch all chat threads associated with a specific user
     * @summary List Threads
     * @param body List Threads Request
     */
    listThreads(body: ChatSvcListThreadsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ChatSvcListThreadsResponse;
    }>;
    /**
     * Save a new message to a specific thread.
     * @summary Save Message
     * @param threadId Thread ID
     * @param body Save Message Request
     */
    saveMessage(threadId: string, body: ChatSvcSaveMessageRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: {
            [key: string]: any;
        };
    }>;
    /**
     * Create or update a chat thread. Requires the `chat-svc:thread:edit` permission.
     * @summary Save Thread
     * @param body Save Thread Request
     */
    saveThread(body: ChatSvcSaveThreadRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ChatSvcSaveThreadResponse;
    }>;
}
