/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.6.1
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { ProxySvcListCertsRequest } from '../model/proxySvcListCertsRequest';
import { ProxySvcListCertsResponse } from '../model/proxySvcListCertsResponse';
import { ProxySvcListRoutesRequest } from '../model/proxySvcListRoutesRequest';
import { ProxySvcListRoutesResponse } from '../model/proxySvcListRoutesResponse';
import { ProxySvcSaveRoutesRequest } from '../model/proxySvcSaveRoutesRequest';
import { ProxySvcSaveRoutesResponse } from '../model/proxySvcSaveRoutesResponse';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum ProxySvcApiApiKeys {
    BearerAuth = 0
}
export declare class ProxySvcApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BearerAuth: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ProxySvcApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * List certs that the edge proxy will use to cert requests.
     * @summary List Certs
     * @param body List Certs Request
     */
    listCerts(body?: ProxySvcListCertsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ProxySvcListCertsResponse;
    }>;
    /**
     * List routes that the edge proxy will use to route requests.
     * @summary List Routes
     * @param body List Routes Request
     */
    listRoutes(body?: ProxySvcListRoutesRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ProxySvcListRoutesResponse;
    }>;
    /**
     * Save routes that the edge proxy will use to route requests.
     * @summary Save Routes
     * @param body Save Routes Request
     */
    saveRoutes(body: ProxySvcSaveRoutesRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ProxySvcSaveRoutesResponse;
    }>;
}
