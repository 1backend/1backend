/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.29
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { UserSvcAddUserToOrganizationRequest } from '../model/userSvcAddUserToOrganizationRequest';
import { UserSvcAssignPermissionsRequest } from '../model/userSvcAssignPermissionsRequest';
import { UserSvcChangePasswordRequest } from '../model/userSvcChangePasswordRequest';
import { UserSvcCreateOrganizationRequest } from '../model/userSvcCreateOrganizationRequest';
import { UserSvcCreateRoleRequest } from '../model/userSvcCreateRoleRequest';
import { UserSvcCreateRoleResponse } from '../model/userSvcCreateRoleResponse';
import { UserSvcCreateUserRequest } from '../model/userSvcCreateUserRequest';
import { UserSvcGetPermissionsResponse } from '../model/userSvcGetPermissionsResponse';
import { UserSvcGetPublicKeyResponse } from '../model/userSvcGetPublicKeyResponse';
import { UserSvcGetRolesResponse } from '../model/userSvcGetRolesResponse';
import { UserSvcGetUsersRequest } from '../model/userSvcGetUsersRequest';
import { UserSvcGetUsersResponse } from '../model/userSvcGetUsersResponse';
import { UserSvcIsAuthorizedRequest } from '../model/userSvcIsAuthorizedRequest';
import { UserSvcIsAuthorizedResponse } from '../model/userSvcIsAuthorizedResponse';
import { UserSvcListGrantsRequest } from '../model/userSvcListGrantsRequest';
import { UserSvcListGrantsResponse } from '../model/userSvcListGrantsResponse';
import { UserSvcLoginRequest } from '../model/userSvcLoginRequest';
import { UserSvcLoginResponse } from '../model/userSvcLoginResponse';
import { UserSvcReadUserByTokenResponse } from '../model/userSvcReadUserByTokenResponse';
import { UserSvcRegisterRequest } from '../model/userSvcRegisterRequest';
import { UserSvcRegisterResponse } from '../model/userSvcRegisterResponse';
import { UserSvcResetPasswordRequest } from '../model/userSvcResetPasswordRequest';
import { UserSvcSaveGrantsRequest } from '../model/userSvcSaveGrantsRequest';
import { UserSvcSavePermissionsRequest } from '../model/userSvcSavePermissionsRequest';
import { UserSvcSavePermissionsResponse } from '../model/userSvcSavePermissionsResponse';
import { UserSvcSaveProfileRequest } from '../model/userSvcSaveProfileRequest';
import { UserSvcSetRolePermissionsRequest } from '../model/userSvcSetRolePermissionsRequest';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum UserSvcApiApiKeys {
    BearerAuth = 0
}
export declare class UserSvcApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BearerAuth: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: UserSvcApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * @summary Add a User to an Organization
     * @param organizationId Organization ID
     * @param body Add User to Organization Request
     */
    addUserToOrganization(organizationId: string, body: UserSvcAddUserToOrganizationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Assign permissions to roles.  Requires the `user-svc:permission:assign` permission.
     * @summary Assign Permissions
     * @param body Assign Permissions Request
     */
    assignPermissions(body: UserSvcAssignPermissionsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Allows an authenticated user to change their own password.
     * @summary Change User Password
     * @param body Change Password Request
     */
    changePassword(body: UserSvcChangePasswordRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Allows a logged-in user to create a new organization. The user initiating the request will be assigned the role of admin for that organization. The initiating user will receive a dynamic role in the format `user-svc:org:{organizationId}:admin`, where `{organizationId}` is a unique identifier for the created organization. Dynamic roles are generated based on specific user-resource associations (in this case the resource being the organization), offering more flexible permission management compared to static roles.
     * @summary Create an Organization
     * @param body Create User Request
     */
    createOrganization(body: UserSvcCreateOrganizationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Create a new role. <b>The role ID must be prefixed by the caller\'s slug.</b> Eg. if the caller\'s slug is `petstore-svc` the role should look like `petstore-svc:admin`. The user account who creates the role will become the owner of that role, and only the owner will be able to edit the role.  Requires the `user-svc:role:create` permission.
     * @summary Create a New Role
     * @param body Create Role Request
     */
    createRole(body: UserSvcCreateRoleRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcCreateRoleResponse;
    }>;
    /**
     * Allows an authenticated administrator to create a new user with specified details.
     * @summary Create a New User
     * @param body Create User Request
     */
    createUser(body: UserSvcCreateUserRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Delete a role based on the role ID.
     * @summary Delete a Role
     * @param roleId Role ID
     */
    deleteRole(roleId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Delete a user based on the user ID.
     * @summary Delete a User
     * @param userId User ID
     */
    deleteUser(userId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Retrieve permissions associated with a specific role ID.
     * @summary Get Permissions by Role
     * @param roleId Role ID
     */
    getPermissionsByRole(roleId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcGetPermissionsResponse;
    }>;
    /**
     * Get the public key to parse and verify the JWT.
     * @summary Get Public Key
     */
    getPublicKey(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcGetPublicKeyResponse;
    }>;
    /**
     * Retrieve all roles from the user service.
     * @summary Get all Roles
     */
    getRoles(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcGetRolesResponse;
    }>;
    /**
     * Fetches a list of users with optional query filters and pagination.
     * @summary List Users
     * @param body Get Users Request
     */
    getUsers(body?: UserSvcGetUsersRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcGetUsersResponse;
    }>;
    /**
     * Check if a user is authorized for a specific permission.
     * @summary Is Authorized
     * @param permissionId Permission ID
     * @param body Is Authorized Request
     */
    isAuthorized(permissionId: string, body?: UserSvcIsAuthorizedRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcIsAuthorizedResponse;
    }>;
    /**
     * List grants.  Grants define which slugs are assigned specific permissions, overriding the default configuration.  Requires the `user-svc:grant:view` permission.
     * @summary List Grants
     * @param body List Grants Request
     */
    listGrants(body: UserSvcListGrantsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcListGrantsResponse;
    }>;
    /**
     * Authenticates a user and returns a token.
     * @summary Login
     * @param body Login Request
     */
    login(body: UserSvcLoginRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcLoginResponse;
    }>;
    /**
     * Retrieve user information based on an authentication token.
     * @summary Read User by Token
     */
    readUserByToken(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcReadUserByTokenResponse;
    }>;
    /**
     * Register a new user with a name, email, and password.
     * @summary Register
     * @param body Register Request
     */
    register(body: UserSvcRegisterRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcRegisterResponse;
    }>;
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * @summary Remove a User from an Organization
     * @param organizationId Organization ID
     * @param userId User ID
     * @param body Add User to Organization Request
     */
    removeUserFromOrganization(organizationId: string, userId: string, body?: object, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Allows an administrator to change a user\'s password.
     * @summary Reset Password
     * @param userId User ID
     * @param body Change Password Request
     */
    resetPassword(userId: string, body: UserSvcResetPasswordRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Save grants.  Grants define which slugs are assigned specific permissions, overriding the default configuration.  Requires the `user-svc:grant:create` permission.
     * @summary Save Grants
     * @param body Save Grants Request
     */
    saveGrants(body: UserSvcSaveGrantsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Creates or updates a list of permissions. <b>The permission ID must be prefixed by the callers slug.</b> Eg. if the owner\'s slug is `petstore-svc` the permission should look like `petstore-svc:pet:edit`.  Requires the `user-svc:permission:create` permission.
     * @summary Save Permissions
     * @param body Permission Details
     */
    savePermissions(body: UserSvcSavePermissionsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcSavePermissionsResponse;
    }>;
    /**
     * Save user\'s own profile information.
     * @summary Save User Profile
     * @param userId User ID
     * @param body Save Profile Request
     */
    saveSelf(userId: string, body: UserSvcSaveProfileRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Save user information based on the provided user ID. It is intended for admins, because it uses the `user-svc:user:edit` permission which only admins have. For a user to edit its own profile, see saveSelf.
     * @summary Save User
     * @param userId User ID
     * @param body Save Profile Request
     */
    saveUser(userId: string, body: UserSvcSaveProfileRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Set permissions for a specified role. The caller can add permissions it owns to any role. If the caller tries to add a permission it doesn\'t own to a role, `StatusBadRequest` will be returned.
     * @summary Set Role Permissions
     * @param roleId Role ID
     * @param body Set Role Permissions Request
     */
    setRolePermission(roleId: string, body: UserSvcSetRolePermissionsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
}
