/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.3.0-rc.34
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { UserSvcChangePasswordRequest } from '../model/userSvcChangePasswordRequest';
import { UserSvcCreateUserRequest } from '../model/userSvcCreateUserRequest';
import { UserSvcGetPublicKeyResponse } from '../model/userSvcGetPublicKeyResponse';
import { UserSvcHasPermissionRequest } from '../model/userSvcHasPermissionRequest';
import { UserSvcHasPermissionResponse } from '../model/userSvcHasPermissionResponse';
import { UserSvcListGrantsRequest } from '../model/userSvcListGrantsRequest';
import { UserSvcListGrantsResponse } from '../model/userSvcListGrantsResponse';
import { UserSvcListInvitesRequest } from '../model/userSvcListInvitesRequest';
import { UserSvcListInvitesResponse } from '../model/userSvcListInvitesResponse';
import { UserSvcListPermissionsResponse } from '../model/userSvcListPermissionsResponse';
import { UserSvcListUsersRequest } from '../model/userSvcListUsersRequest';
import { UserSvcListUsersResponse } from '../model/userSvcListUsersResponse';
import { UserSvcLoginRequest } from '../model/userSvcLoginRequest';
import { UserSvcLoginResponse } from '../model/userSvcLoginResponse';
import { UserSvcReadUserByTokenResponse } from '../model/userSvcReadUserByTokenResponse';
import { UserSvcRegisterRequest } from '../model/userSvcRegisterRequest';
import { UserSvcRegisterResponse } from '../model/userSvcRegisterResponse';
import { UserSvcResetPasswordRequest } from '../model/userSvcResetPasswordRequest';
import { UserSvcSaveGrantsRequest } from '../model/userSvcSaveGrantsRequest';
import { UserSvcSaveInvitesRequest } from '../model/userSvcSaveInvitesRequest';
import { UserSvcSaveInvitesResponse } from '../model/userSvcSaveInvitesResponse';
import { UserSvcSaveOrganizationRequest } from '../model/userSvcSaveOrganizationRequest';
import { UserSvcSaveOrganizationResponse } from '../model/userSvcSaveOrganizationResponse';
import { UserSvcSaveProfileRequest } from '../model/userSvcSaveProfileRequest';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum UserSvcApiApiKeys {
    BearerAuth = 0
}
export declare class UserSvcApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BearerAuth: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: UserSvcApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * @summary Add a User to an Organization
     * @param organizationId Organization ID
     * @param userId User ID
     * @param body Add User to Organization Request
     */
    addUserToOrganization(organizationId: string, userId: string, body?: object, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Assigns a role to a user. The caller can only assign roles they own. A user \"owns\" a role in the following cases: - A static role where the role ID is prefixed with the caller\'s slug. - Any dynamic or static role where the caller is an admin.  Examples: - A user with the slug \"joe-doe\" owns roles like \"joe-doe:any-custom-role\". - A user with any slug who has the role \"my-service:admin\" owns \"my-service:user\". - A user with any slug who has the role \"user-svc:org:{%orgId}:admin\" owns \"user-svc:org:{%orgId}:user\".
     * @summary Assign Role
     * @param userId User ID
     * @param role Role ID
     * @param body Assign Role Request
     */
    assignRole(userId: string, role: string, body?: object, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Allows an authenticated user to change their own password.
     * @summary Change User Password
     * @param body Change Password Request
     */
    changePassword(body: UserSvcChangePasswordRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Allows an authenticated administrator to create a new user with specified details.
     * @summary Create a New User
     * @param body Create User Request
     */
    createUser(body: UserSvcCreateUserRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Delete a user based on the user ID.
     * @summary Delete a User
     * @param userId User ID
     */
    deleteUser(userId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Get the public key to parse and verify the JWT.
     * @summary Get Public Key
     */
    getPublicKey(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcGetPublicKeyResponse;
    }>;
    /**
     * Check whether the caller user has a specific permission. Ideally, this endpoint should rarely be used, as the JWT token already includes all user roles. Caching the `List Permissions` and `List Grants` responses allows services to determine user authorization without repeatedly calling this endpoint.
     * @summary Has Permission
     * @param permission Permission
     * @param body Is Authorized Request
     */
    hasPermission(permission: string, body?: UserSvcHasPermissionRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcHasPermissionResponse;
    }>;
    /**
     * Grants give access to users with certain slugs and roles to permissions. Users can list grants for permissions they have access to but they will only see grants the grant refers to their slug or one of their roles.
     * @summary List Grants
     * @param body List Grants Request
     */
    listGrants(body: UserSvcListGrantsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcListGrantsResponse;
    }>;
    /**
     * List user invites stored in the database.
     * @summary List Invites
     * @param body List Invites Request
     */
    listInvites(body: UserSvcListInvitesRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcListInvitesResponse;
    }>;
    /**
     * List permissions by roles. Caller can only list permissions for roles they have.
     * @summary List Permissions
     * @param roleId Role ID
     */
    listPermissions(roleId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcListPermissionsResponse;
    }>;
    /**
     * Fetches a list of users with optional query filters and pagination.
     * @summary List Users
     * @param body List Users Request
     */
    listUsers(body?: UserSvcListUsersRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcListUsersResponse;
    }>;
    /**
     * Authenticates a user and returns a token.
     * @summary Login
     * @param body Login Request
     */
    login(body: UserSvcLoginRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcLoginResponse;
    }>;
    /**
     * Retrieve user information based on an authentication token.
     * @summary Read User by Token
     */
    readUserByToken(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcReadUserByTokenResponse;
    }>;
    /**
     * Register a new user with a name, email, and password.
     * @summary Register
     * @param body Register Request
     */
    register(body: UserSvcRegisterRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcRegisterResponse;
    }>;
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * @summary Remove a User from an Organization
     * @param organizationId Organization ID
     * @param userId User ID
     * @param body Remove User From Organization Request
     */
    removeUserFromOrganization(organizationId: string, userId: string, body?: object, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Allows an administrator to change a user\'s password.
     * @summary Reset Password
     * @param userId User ID
     * @param body Change Password Request
     */
    resetPassword(userId: string, body: UserSvcResetPasswordRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Save grants. // @Description Grants give access to users with certain slugs and roles to permissions.
     * @summary Save Grants
     * @param body Save Grants Request
     */
    saveGrants(body: UserSvcSaveGrantsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Invite a list of users by contact ID to acquire a role. Works on future or current users. A user can only invite an other user to a role if the user owns that role.  A user \"owns\" a role in the following cases: - A static role where the role ID is prefixed with the caller\'s slug. - Any dynamic or static role where the caller is an admin.  Examples: - A user with the slug \"joe-doe\" owns roles like \"joe-doe:any-custom-role\". - A user with any slug who has the role \"my-service:admin\" owns \"my-service:user\". - A user with any slug who has the role \"user-svc:org:{%orgId}:admin\" owns \"user-svc:org:{%orgId}:user\".
     * @summary Save Invites
     * @param body Save Invites Request
     */
    saveInvites(body: UserSvcSaveInvitesRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcSaveInvitesResponse;
    }>;
    /**
     * Allows a logged-in user to save an organization. The user initiating the request will be assigned the role of admin for that organization. The initiating user will receive a dynamic role in the format `user-svc:org:{organizationId}:admin`, where `{organizationId}` is a unique identifier for the saved organization. Dynamic roles are generated based on specific user-resource associations (in this case the resource being the organization), offering more flexible permission management compared to static roles.
     * @summary Save an Organization
     * @param body Save User Request
     */
    saveOrganization(body: UserSvcSaveOrganizationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcSaveOrganizationResponse;
    }>;
    /**
     * Save user\'s own profile information.
     * @summary Save User Profile
     * @param userId User ID
     * @param body Save Profile Request
     */
    saveSelf(userId: string, body: UserSvcSaveProfileRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Save user information based on the provided user ID. It is intended for admins, because it uses the `user-svc:user:edit` permission which only admins have. For a user to edit its own profile, see saveSelf.
     * @summary Save User
     * @param userId User ID
     * @param body Save Profile Request
     */
    saveUser(userId: string, body: UserSvcSaveProfileRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
}
