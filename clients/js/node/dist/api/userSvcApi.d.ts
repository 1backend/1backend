/**
 * 1Backend
 * AI-native microservices platform.
 *
 * The version of the OpenAPI document: 0.3.0-rc.38
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { UserSvcChangePasswordRequest } from '../model/userSvcChangePasswordRequest';
import { UserSvcCreateUserRequest } from '../model/userSvcCreateUserRequest';
import { UserSvcGetPublicKeyResponse } from '../model/userSvcGetPublicKeyResponse';
import { UserSvcHasPermissionRequest } from '../model/userSvcHasPermissionRequest';
import { UserSvcHasPermissionResponse } from '../model/userSvcHasPermissionResponse';
import { UserSvcListEnrollsRequest } from '../model/userSvcListEnrollsRequest';
import { UserSvcListEnrollsResponse } from '../model/userSvcListEnrollsResponse';
import { UserSvcListOrganizationsRequest } from '../model/userSvcListOrganizationsRequest';
import { UserSvcListOrganizationsResponse } from '../model/userSvcListOrganizationsResponse';
import { UserSvcListPermissionsResponse } from '../model/userSvcListPermissionsResponse';
import { UserSvcListPermitsRequest } from '../model/userSvcListPermitsRequest';
import { UserSvcListPermitsResponse } from '../model/userSvcListPermitsResponse';
import { UserSvcListUsersRequest } from '../model/userSvcListUsersRequest';
import { UserSvcListUsersResponse } from '../model/userSvcListUsersResponse';
import { UserSvcLoginRequest } from '../model/userSvcLoginRequest';
import { UserSvcLoginResponse } from '../model/userSvcLoginResponse';
import { UserSvcReadSelfResponse } from '../model/userSvcReadSelfResponse';
import { UserSvcRegisterRequest } from '../model/userSvcRegisterRequest';
import { UserSvcRegisterResponse } from '../model/userSvcRegisterResponse';
import { UserSvcResetPasswordRequest } from '../model/userSvcResetPasswordRequest';
import { UserSvcSaveEnrollsRequest } from '../model/userSvcSaveEnrollsRequest';
import { UserSvcSaveEnrollsResponse } from '../model/userSvcSaveEnrollsResponse';
import { UserSvcSaveOrganizationRequest } from '../model/userSvcSaveOrganizationRequest';
import { UserSvcSaveOrganizationResponse } from '../model/userSvcSaveOrganizationResponse';
import { UserSvcSavePermitsRequest } from '../model/userSvcSavePermitsRequest';
import { UserSvcSaveSelfRequest } from '../model/userSvcSaveSelfRequest';
import { UserSvcSaveUserRequest } from '../model/userSvcSaveUserRequest';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum UserSvcApiApiKeys {
    BearerAuth = 0
}
export declare class UserSvcApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BearerAuth: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: UserSvcApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * @summary Add a User to an Organization
     * @param organizationId Organization ID
     * @param userId User ID
     * @param body Add User to Organization Request
     */
    addUserToOrganization(organizationId: string, userId: string, body?: object, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Allows an authenticated user to change their own password.
     * @summary Change User Password
     * @param body Change Password Request
     */
    changePassword(body: UserSvcChangePasswordRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Allows an authenticated administrator to create a new user with specified details.
     * @summary Create a New User
     * @param body Create User Request
     */
    createUser(body: UserSvcCreateUserRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Delete a user based on the user ID.
     * @summary Delete a User
     * @param userId User ID
     */
    deleteUser(userId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Get the public key to parse and verify the JWT.
     * @summary Get Public Key
     */
    getPublicKey(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcGetPublicKeyResponse;
    }>;
    /**
     * Check whether the caller user has a specific permission. Ideally, this endpoint should rarely be used, as the JWT token already includes all user roles. Caching the `List Permissions` and `List Permits` responses allows services to determine user authorization without repeatedly calling this endpoint.
     * @summary Has Permission
     * @param permission Permission
     * @param body Is Authorized Request
     */
    hasPermission(permission: string, body?: UserSvcHasPermissionRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcHasPermissionResponse;
    }>;
    /**
     * List enrolls. Role, user ID or contact ID must be specified. Caller can only list enrolls of roles they own.
     * @summary List Enrolls
     * @param body List Enrolls Request
     */
    listEnrolls(body: UserSvcListEnrollsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcListEnrollsResponse;
    }>;
    /**
     * Requires the `user-svc:organization:view` permission, that only admins have by default.
     * @summary List Organizations
     * @param body List Organizations Request
     */
    listOrganizations(body: UserSvcListOrganizationsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcListOrganizationsResponse;
    }>;
    /**
     * List permissions by roles. Caller can only list permissions for roles they have.
     * @summary List Permissions
     * @param roleId Role ID
     */
    listPermissions(roleId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcListPermissionsResponse;
    }>;
    /**
     * List permits. Requires the `user-svc:permit:view` permission, which only admins have by default. &todo Users should be able to list permits referring to them.
     * @summary List Permits
     * @param body List Permits Request
     */
    listPermits(body: UserSvcListPermitsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcListPermitsResponse;
    }>;
    /**
     * Fetches a list of users with optional query filters and pagination. Requires the `user-svc:user:view` permission that only admins have by default.
     * @summary List Users
     * @param body List Users Request
     */
    listUsers(body?: UserSvcListUsersRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcListUsersResponse;
    }>;
    /**
     * Authenticates a user and returns a token.
     * @summary Login
     * @param body Login Request
     */
    login(body: UserSvcLoginRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcLoginResponse;
    }>;
    /**
     * Retrieves user information based on the authentication token in the request header. Typically called by single-page applications during the initial page load. While some details (such as roles, slug, user ID, and active organization ID) can be extracted from the JWT, this endpoint returns additional data, including the full user object and associated organizations.
     * @summary Read Self
     */
    readSelf(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcReadSelfResponse;
    }>;
    /**
     * Register a new user with a name, email, and password.
     * @summary Register
     * @param body Register Request
     */
    register(body: UserSvcRegisterRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcRegisterResponse;
    }>;
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * @summary Remove a User from an Organization
     * @param organizationId Organization ID
     * @param userId User ID
     * @param body Remove User From Organization Request
     */
    removeUserFromOrganization(organizationId: string, userId: string, body?: object, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Allows an administrator to change a user\'s password.
     * @summary Reset Password
     * @param userId User ID
     * @param body Change Password Request
     */
    resetPassword(userId: string, body: UserSvcResetPasswordRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Enroll a list of users by contact or user Id to acquire a role. Works on future or current users.  A user can only enroll an other user to a role if the user owns that role.  A user \"owns\" a role in the following cases: - A static role where the role ID is prefixed with the caller\'s slug. - Any dynamic or static role where the caller is an admin.  Examples: - A user with the slug \"joe-doe\" owns roles like \"joe-doe:any-custom-role\". - A user with any slug who has the role \"my-service:admin\" owns \"my-service:user\". - A user with any slug who has the role \"user-svc:org:{%orgId}:admin\" owns \"user-svc:org:{%orgId}:user\".
     * @summary Save Enrolls
     * @param body Save Enrolls Request
     */
    saveEnrolls(body: UserSvcSaveEnrollsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcSaveEnrollsResponse;
    }>;
    /**
     * Allows a logged-in user to save an organization. The user initiating the request will be assigned the role of admin for that organization. The initiating user will receive a dynamic role in the format `user-svc:org:{organizationId}:admin`, where `{organizationId}` is a unique identifier for the saved organization. Dynamic roles are generated based on specific user-resource associations (in this case the resource being the organization), offering more flexible permission management compared to static roles.
     * @summary Save an Organization
     * @param body Save User Request
     */
    saveOrganization(body: UserSvcSaveOrganizationRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserSvcSaveOrganizationResponse;
    }>;
    /**
     * Save permits. // @Description Permits give access to users with certain slugs and roles to permissions.
     * @summary Save Permits
     * @param body Save Permits Request
     */
    savePermits(body: UserSvcSavePermitsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Save user\'s own profile information.
     * @summary Save User Profile
     * @param body Save Profile Request
     */
    saveSelf(body: UserSvcSaveSelfRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Save user information based on the provided user ID. Intended for admins. Requires the `user-svc:user:edit` permission. For a user to edit their own profile, see `saveSelf`.
     * @summary Save User
     * @param userId User ID
     * @param body Save Profile Request
     */
    saveUser(userId: string, body: UserSvcSaveUserRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
}
