/**
 * OpenOrch
 * A language-agnostic microservices framework for building AI applications.
 *
 * The version of the OpenAPI document: 0.3.0-rc.29
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ContainerSvcAsset } from './containerSvcAsset';
import { ContainerSvcCapabilities } from './containerSvcCapabilities';
import { ContainerSvcEnvVar } from './containerSvcEnvVar';
import { ContainerSvcKeep } from './containerSvcKeep';
import { ContainerSvcLabel } from './containerSvcLabel';
import { ContainerSvcNetwork } from './containerSvcNetwork';
import { ContainerSvcPortMapping } from './containerSvcPortMapping';
import { ContainerSvcResources } from './containerSvcResources';
import { ContainerSvcVolume } from './containerSvcVolume';
export declare class ContainerSvcContainer {
    /**
    * Assets maps environment variable names to file URLs. Example: {\"MODEL\": \"https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/resolve/main/mistral-7b-instruct-v0.2.Q2_K.gguf\"} These files are downloaded by the File Svc and mounted in the container. The environment variable `MODEL` will point to the local file path in the container.
    */
    'assets'?: Array<ContainerSvcAsset>;
    /**
    * Capabilities define additional runtime features, such as GPU support.
    */
    'capabilities'?: ContainerSvcCapabilities;
    /**
    * Envs are environment variables set within the container.
    */
    'envs'?: Array<ContainerSvcEnvVar>;
    /**
    * Hash is a unique identifier associated with the container.
    */
    'hash'?: string;
    /**
    * Id is the unique identifier for the container instance.
    */
    'id'?: string;
    /**
    * Image is the Docker image used to create the container.
    */
    'image'?: string;
    /**
    * Keeps are paths that persist across container restarts. They function like mounts or volumes, but their external storage location is irrelevant.
    */
    'keeps'?: Array<ContainerSvcKeep>;
    /**
    * Labels are metadata tags assigned to the container.
    */
    'labels'?: Array<ContainerSvcLabel>;
    /**
    * Names are the human-readable aliases assigned to the container.
    */
    'names'?: Array<string>;
    /**
    * Network contains networking-related information for the container.
    */
    'network'?: ContainerSvcNetwork;
    /**
    * Node Id Please see the documentation for the envar OPENORCH_NODE_ID
    */
    'nodeId'?: string;
    /**
    * Ports maps host ports (keys) to container ports (values).
    */
    'ports'?: Array<ContainerSvcPortMapping>;
    /**
    * Resources defines CPU, memory, and disk constraints for the container.
    */
    'resources'?: ContainerSvcResources;
    /**
    * Runtime specifies the container runtime (e.g., Docker, containerd, etc.).
    */
    'runtime'?: string;
    /**
    * Status indicates the current state of the container (e.g., running, stopped).
    */
    'status'?: string;
    /**
    * Volumes mounted by the container.
    */
    'volumes'?: Array<ContainerSvcVolume>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
