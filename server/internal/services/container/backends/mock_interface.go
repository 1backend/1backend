// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//

// Package backends is a generated GoMock package.
package backends

import (
	reflect "reflect"

	container_svc "github.com/openorch/openorch/server/internal/services/container/types"
	gomock "go.uber.org/mock/gomock"
)

// MockContainerBackend is a mock of ContainerBackend interface.
type MockContainerBackend struct {
	ctrl     *gomock.Controller
	recorder *MockContainerBackendMockRecorder
	isgomock struct{}
}

// MockContainerBackendMockRecorder is the mock recorder for MockContainerBackend.
type MockContainerBackendMockRecorder struct {
	mock *MockContainerBackend
}

// NewMockContainerBackend creates a new mock instance.
func NewMockContainerBackend(ctrl *gomock.Controller) *MockContainerBackend {
	mock := &MockContainerBackend{ctrl: ctrl}
	mock.recorder = &MockContainerBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerBackend) EXPECT() *MockContainerBackendMockRecorder {
	return m.recorder
}

// BuildImage mocks base method.
func (m *MockContainerBackend) BuildImage(arg0 container_svc.BuildImageRequest) (*container_svc.BuildImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildImage", arg0)
	ret0, _ := ret[0].(*container_svc.BuildImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildImage indicates an expected call of BuildImage.
func (mr *MockContainerBackendMockRecorder) BuildImage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildImage", reflect.TypeOf((*MockContainerBackend)(nil).BuildImage), arg0)
}

// Client mocks base method.
func (m *MockContainerBackend) Client() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(any)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockContainerBackendMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockContainerBackend)(nil).Client))
}

// ContainerIsRunning mocks base method.
func (m *MockContainerBackend) ContainerIsRunning(arg0 container_svc.ContainerIsRunningRequest) (*container_svc.ContainerIsRunningResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerIsRunning", arg0)
	ret0, _ := ret[0].(*container_svc.ContainerIsRunningResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerIsRunning indicates an expected call of ContainerIsRunning.
func (mr *MockContainerBackendMockRecorder) ContainerIsRunning(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerIsRunning", reflect.TypeOf((*MockContainerBackend)(nil).ContainerIsRunning), arg0)
}

// DaemonAddress mocks base method.
func (m *MockContainerBackend) DaemonAddress() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DaemonAddress")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DaemonAddress indicates an expected call of DaemonAddress.
func (mr *MockContainerBackendMockRecorder) DaemonAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DaemonAddress", reflect.TypeOf((*MockContainerBackend)(nil).DaemonAddress))
}

// DaemonInfo mocks base method.
func (m *MockContainerBackend) DaemonInfo(arg0 container_svc.DaemonInfoRequest) (*container_svc.DaemonInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DaemonInfo", arg0)
	ret0, _ := ret[0].(*container_svc.DaemonInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DaemonInfo indicates an expected call of DaemonInfo.
func (mr *MockContainerBackendMockRecorder) DaemonInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DaemonInfo", reflect.TypeOf((*MockContainerBackend)(nil).DaemonInfo), arg0)
}

// GetContainerSummary mocks base method.
func (m *MockContainerBackend) GetContainerSummary(arg0 container_svc.GetContainerSummaryRequest) (*container_svc.GetContainerSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSummary", arg0)
	ret0, _ := ret[0].(*container_svc.GetContainerSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerSummary indicates an expected call of GetContainerSummary.
func (mr *MockContainerBackendMockRecorder) GetContainerSummary(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSummary", reflect.TypeOf((*MockContainerBackend)(nil).GetContainerSummary), arg0)
}

// ListContainers mocks base method.
func (m *MockContainerBackend) ListContainers(arg0 container_svc.ListContainersRequest) (*container_svc.ListContainersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContainers", arg0)
	ret0, _ := ret[0].(*container_svc.ListContainersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainers indicates an expected call of ListContainers.
func (mr *MockContainerBackendMockRecorder) ListContainers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainers", reflect.TypeOf((*MockContainerBackend)(nil).ListContainers), arg0)
}

// RunContainer mocks base method.
func (m *MockContainerBackend) RunContainer(arg0 container_svc.RunContainerRequest) (*container_svc.RunContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunContainer", arg0)
	ret0, _ := ret[0].(*container_svc.RunContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunContainer indicates an expected call of RunContainer.
func (mr *MockContainerBackendMockRecorder) RunContainer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunContainer", reflect.TypeOf((*MockContainerBackend)(nil).RunContainer), arg0)
}

// StopContainer mocks base method.
func (m *MockContainerBackend) StopContainer(arg0 container_svc.StopContainerRequest) (*container_svc.StopContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainer", arg0)
	ret0, _ := ret[0].(*container_svc.StopContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockContainerBackendMockRecorder) StopContainer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockContainerBackend)(nil).StopContainer), arg0)
}
