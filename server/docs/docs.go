// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://openorch.org/",
            "email": "sales@singulatron.com"
        },
        "license": {
            "name": "AGPL v3.0",
            "url": "https://www.gnu.org/licenses/agpl-3.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/chat-svc/events": {
            "get": {
                "description": "Events is a dummy endpoint to display documentation about the events that this service emits.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Events",
                "operationId": "events",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.EventThreadUpdate"
                        }
                    }
                }
            }
        },
        "/chat-svc/message/{messageId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch information about a specific chat message by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Get Message",
                "operationId": "getMessage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.GetMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific message from a chat thread by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Delete a Message",
                "operationId": "deleteMessage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-svc/thread": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new chat thread and add the requesting user to it.\nRequires the ` + "`" + `chat-svc:thread:create` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Add Thread",
                "operationId": "addThread",
                "parameters": [
                    {
                        "description": "Add Thread Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chat_svc.AddThreadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully created",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.AddThreadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-svc/thread/{threadId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch information about a specific chat thread by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Get Thread",
                "operationId": "getThread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.GetThreadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Modify the details of a specific chat thread",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Update Thread",
                "operationId": "updateThread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Thread Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chat_svc.UpdateThreadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully updated",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.AddThreadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific chat thread by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Delete a Thread",
                "operationId": "deleteThread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-svc/thread/{threadId}/message": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new message to a specific thread.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Add Message",
                "operationId": "addMessage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Add Message Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chat_svc.AddMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully added",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-svc/thread/{threadId}/messages": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch messages (and associated assets) for a specific chat thread.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "List Messages",
                "operationId": "getMessages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages and assets successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.GetMessagesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-svc/threads": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch all chat threads associated with a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Get Threads",
                "operationId": "getThreads",
                "parameters": [
                    {
                        "description": "Get Threads Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.GetThreadsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Threads successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.GetThreadsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config-svc/config": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch the current configuration from the server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config Svc"
                ],
                "summary": "Get Config",
                "operationId": "getConfig",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current configuration retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/config_svc.GetConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Save the provided configuration to the server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config Svc"
                ],
                "summary": "Save Config",
                "operationId": "saveConfig",
                "parameters": [
                    {
                        "description": "Save Config Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/config_svc.SaveConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Save Config Response",
                        "schema": {
                            "$ref": "#/definitions/config_svc.SaveConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/container-svc/container": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Runs a Docker container with the specified parameters.\n\nRequires the ` + "`" + `container-svc:container:run` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Container Svc"
                ],
                "summary": "Run a Container",
                "operationId": "runContainer",
                "parameters": [
                    {
                        "description": "Run Container Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/container_svc.RunContainerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/container_svc.RunContainerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/container-svc/container/is-running": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check if a Docker container is running, identified by hash or name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Container Svc"
                ],
                "summary": "Check If a Container Is Running",
                "operationId": "containerIsRunning",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container Hash",
                        "name": "hash",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Container Name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ContainerIsRunningResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or Missing Parameters",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/container-svc/container/stop": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stops a Docker container with the specified parameters.\n\nRequires the ` + "`" + `container-svc:container:stop` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Container Svc"
                ],
                "summary": "Stop a Container",
                "operationId": "stopContainer",
                "parameters": [
                    {
                        "description": "Stop Container Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/container_svc.StopContainerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/container_svc.StopContainerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/container-svc/container/summary": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a summary of the Docker container identified by hash or name, limited to a specified number of lines.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Container Svc"
                ],
                "summary": "Get Container Summary",
                "operationId": "containerSummary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container Hash",
                        "name": "hash",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Container Name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of Lines",
                        "name": "lines",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/container_svc.GetContainerSummaryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or Missing Parameters",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/container-svc/containers": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List containers.\n\nRequires the ` + "`" + `container-svc:container:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Container Svc"
                ],
                "summary": "List Containers",
                "operationId": "listContainers",
                "parameters": [
                    {
                        "description": "List Containers Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/container_svc.ListContainersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ListContainersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/container-svc/daemon/info": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve detailed information about the availability and status of container daemons on the node.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Container Svc"
                ],
                "summary": "Get Container Daemon Information",
                "operationId": "containerDaemonInfo",
                "responses": {
                    "200": {
                        "description": "Service Information",
                        "schema": {
                            "$ref": "#/definitions/container_svc.DaemonInfoResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/container-svc/host": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve information about the Container host",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Container Svc"
                ],
                "summary": "Get Container Host",
                "operationId": "getHost",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/container_svc.GetHostResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/container-svc/image": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Builds a Docker image with the specified parameters.\n\nRequires the ` + "`" + `container-svc:image:build` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Container Svc"
                ],
                "summary": "Build an Image",
                "operationId": "buildImage",
                "parameters": [
                    {
                        "description": "Build Image Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/container_svc.BuildImageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/container_svc.BuildImageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/container-svc/image/{imageName}/pullable": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check if an image exists on in the container registry and is pullable.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Container Svc"
                ],
                "summary": "Check if Container Image is Pullable",
                "operationId": "imagePullable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image name",
                        "name": "imageName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ImagePullableResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/container-svc/logs": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List Container logs.\n\nRequires the ` + "`" + `container-svc:log:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Container Svc"
                ],
                "summary": "List Logs",
                "operationId": "listContainerLogs",
                "parameters": [
                    {
                        "description": "List Logs Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/container_svc.ListLogsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ListLogsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/container_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data-svc/object": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new object with the provided details. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data Svc"
                ],
                "summary": "Create a Generic Object",
                "operationId": "createObject",
                "parameters": [
                    {
                        "description": "Create request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data_svc.CreateObjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/data_svc.CreateObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data-svc/object/{objectId}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new dynamic object or updates an existing one based on the provided data. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data Svc"
                ],
                "summary": "Upsert a Generic Object",
                "operationId": "upsertObject",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Object ID",
                        "name": "objectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Upsert request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data_svc.UpsertObjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful creation or update of object",
                        "schema": {
                            "$ref": "#/definitions/data_svc.UpsertObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data-svc/objects": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves objects from a specified table based on search criteria.\nRequires authorization and user authentication.\n\n\nUse helper functions in your respective client library such as condition constructors (` + "`" + `equal` + "`" + `, ` + "`" + `contains` + "`" + `, ` + "`" + `startsWith` + "`" + `) and field selectors (` + "`" + `field` + "`" + `, ` + "`" + `fields` + "`" + `, ` + "`" + `id` + "`" + `) for easier access.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data Svc"
                ],
                "summary": "Query Objects",
                "operationId": "queryObjects",
                "parameters": [
                    {
                        "description": "Query Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/data_svc.QueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of objects",
                        "schema": {
                            "$ref": "#/definitions/data_svc.QueryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data-svc/objects/delete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes all objects matchin the provided filters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data Svc"
                ],
                "summary": "Delete Objects",
                "operationId": "deleteObjects",
                "parameters": [
                    {
                        "description": "Delete request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data_svc.DeleteObjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful deletion of object",
                        "schema": {
                            "$ref": "#/definitions/data_svc.DeleteObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data-svc/objects/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update fields of objects that match the given filters using the provided object.\nAny fields not included in the incoming object will remain unchanged.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data Svc"
                ],
                "summary": "Update Objects",
                "operationId": "updateObjects",
                "parameters": [
                    {
                        "description": "Update request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data_svc.UpdateObjectsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful update of objects",
                        "schema": {
                            "$ref": "#/definitions/data_svc.UpdateObjectsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data-svc/objects/upsert": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upserts objects by ids.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data Svc"
                ],
                "summary": "Upsert Objects",
                "operationId": "upsertObjects",
                "parameters": [
                    {
                        "description": "Upsert request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data_svc.UpsertObjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful upsert of objects",
                        "schema": {
                            "$ref": "#/definitions/data_svc.UpsertObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/deploy-svc/deployment": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Save a deployment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deploy Svc"
                ],
                "summary": "Save Deployment",
                "operationId": "saveDeployment",
                "parameters": [
                    {
                        "description": "Save Deploys Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.SaveDeploymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.SaveDeploymentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a deployment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deploy Svc"
                ],
                "summary": "Delete Deployment",
                "operationId": "deleteDeployment",
                "parameters": [
                    {
                        "description": "Delete Deploys Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.DeleteDeploymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.DeleteDeploymentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/deploy-svc/deployments": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of deployments.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deploy Svc"
                ],
                "summary": "List Deployments",
                "operationId": "listDeployments",
                "parameters": [
                    {
                        "description": "List Deploys Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ListDeploymentsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ListDeploymentsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/email-svc/email": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send an email with attachments.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email Svc"
                ],
                "summary": "Send an Email",
                "operationId": "sendEmail",
                "parameters": [
                    {
                        "description": "Send Email Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/email_svc.SendEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully sent the email",
                        "schema": {
                            "$ref": "#/definitions/email_svc.SendEmailResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/email_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/email_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/email_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/file-svc/download": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Start or resume the download for a specified URL.\n\nRequires the ` + "`" + `file-svc:download:create` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File Svc"
                ],
                "summary": "Download a File",
                "operationId": "downloadFile",
                "parameters": [
                    {
                        "description": "Download Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/file_svc.DownloadFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Download initiated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/file-svc/download/{url}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a download by URL.\n\nRequires the ` + "`" + `file-svc:download:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File Svc"
                ],
                "summary": "Get a Download",
                "operationId": "getDownload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "url",
                        "name": "url",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/file_svc.GetDownloadResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/file-svc/download/{url}/pause": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Pause a download that is currently in progress.\n\nRequires the ` + "`" + `file-svc:download:edit` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File Svc"
                ],
                "summary": "Pause a Download",
                "operationId": "pauseDownload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Download URL",
                        "name": "url",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/file-svc/downloads": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List download details.\n\nRequires the ` + "`" + `file-svc:download:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File Svc"
                ],
                "summary": "List Downloads",
                "operationId": "listDownloads",
                "responses": {
                    "200": {
                        "description": "List of downloads",
                        "schema": {
                            "$ref": "#/definitions/file_svc.DownloadsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/file-svc/serve/download/{url}": {
            "get": {
                "description": "Serves a previously downloaded file based on its URL.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "File Svc"
                ],
                "summary": "Serve a Downloaded file",
                "operationId": "serveDownload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "URL of the file. Even after downloading, the file is still referenced by its original internet URL.",
                        "name": "url",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File served successfully",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid download URL",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/file-svc/serve/upload/{fileId}": {
            "get": {
                "description": "Retrieves and serves a previously uploaded file using its File ID.\nNote: The ` + "`" + `ID` + "`" + ` and ` + "`" + `FileID` + "`" + ` fields of an upload are different.\n- ` + "`" + `FileID` + "`" + ` is a unique identifier for the file itself.\n- ` + "`" + `ID` + "`" + ` is a unique identifier for a specific replica of the file.\nSince OpenOrch is a distributed system, files can be replicated across multiple nodes.\nThis means each uploaded file may have multiple records with the same ` + "`" + `FileID` + "`" + ` but different ` + "`" + `ID` + "`" + `s.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "File Svc"
                ],
                "summary": "Serve an Uploaded File",
                "operationId": "serveUpload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Upload ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File served successfully",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Missing upload ID",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/file-svc/upload": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Uploads a file to the server.\nCurrently if using the clients only one file can be uploaded at a time due to this bug https://github.com/OpenAPITools/openapi-generator/issues/11341\nOnce that is fixed we should have an ` + "`" + `PUT /file-svc/uploads` + "`" + `/uploadFiles (note the plural) endpoints.\nIn reality the endpoint \"unofficially\" supports multiple files. YMMV.\n\nRequires the ` + "`" + `file-svc:upload:create` + "`" + ` permission.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File Svc"
                ],
                "summary": "Upload a File",
                "operationId": "uploadFile",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/file_svc.UploadFileResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/file-svc/uploads": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List the uploaded files.\n\nRequires the ` + "`" + `file-svc:upload:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File Svc"
                ],
                "summary": "List Uploads",
                "operationId": "listUploads",
                "parameters": [
                    {
                        "description": "List Uploads Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ListUploadsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of uploads",
                        "schema": {
                            "$ref": "#/definitions/file_svc.ListUploadsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/firehose-svc/event": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Publishes an event to the firehose service after authorization check",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Firehose Svc"
                ],
                "summary": "Publish an Event",
                "operationId": "publishEvent",
                "parameters": [
                    {
                        "description": "Event to publish",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/firehose_svc.EventPublishRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{}"
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/firehose_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/firehose_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/firehose-svc/events/subscribe": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Establish a subscription to the firehose events and accept a real time stream of them.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "Firehose Svc"
                ],
                "summary": "Subscribe to the Event Stream",
                "operationId": "subscribeToEvents",
                "responses": {
                    "200": {
                        "description": "Event data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/firehose_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/firehose_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-svc/default-model/start": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Starts The Default Model.\n\nRequires the ` + "`" + `model-svc:model:create` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "Start the Default Model",
                "operationId": "startDefaultModel",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model_svc.StartResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-svc/default-model/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the status of the default model.\n\nRequires the ` + "`" + `model-svc:model:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "Get Default Model Status",
                "operationId": "getDefaultModelStatus",
                "responses": {
                    "200": {
                        "description": "Model status retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/model_svc.StatusResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/model-svc/model/{modelId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of a model by its ID.\n\nthe Requires ` + "`" + `model.view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "Get a Model",
                "operationId": "getModel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model_svc.GetModelResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-svc/model/{modelId}/make-default": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sets a model as the default model — when prompts are sent without a Model ID, the default model is used.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "Make a Model Default",
                "operationId": "makeDefault",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model_svc.MakeDefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-svc/model/{modelId}/start": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Starts a model by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "Start a Model",
                "operationId": "startModel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model_svc.StartResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-svc/model/{modelId}/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the status of a model by ID.\n\nRequires the ` + "`" + `model-svc:model:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "Get Model Status",
                "operationId": "getModelStatus",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Model status retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/model_svc.StatusResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/model-svc/models": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of models.\n\nRequires ` + "`" + `model-svc:model:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "List Models",
                "operationId": "listModels",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ListModelsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-svc/platforms": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of AI platforms. Eg. LlamaCpp, StableDiffusion etc.\n\nRequires ` + "`" + `model-svc:platform:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "List Platforms",
                "operationId": "listPlatforms",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ListPlatformsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/policy-svc/check": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check records a resource access and returns if the access is allowed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy Svc"
                ],
                "summary": "Check",
                "operationId": "check",
                "parameters": [
                    {
                        "description": "Check Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policy_svc.CheckRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Checked successfully",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.CheckResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/policy-svc/instance/{instanceId}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows user to upsert a new policy instance based on a template.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy Svc"
                ],
                "summary": "Upsert an Instance",
                "operationId": "upsertInstance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID",
                        "name": "instanceId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Upsert Instance Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policy_svc.UpsertInstanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance upserted successfully",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.UpsertInstanceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-svc/prompt": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a prompt and waits for a response if sync is true. If sync is false, adds the prompt to the queue and returns immediately.\n\nPrompts can be used for ` + "`" + `text-to-text` + "`" + `, ` + "`" + `text-to-image` + "`" + `, ` + "`" + `image-to-image` + "`" + `, and other types of generation.\nIf no model ID is specified, the default model will be used (see ` + "`" + `Model Svc` + "`" + ` for details). The default model may or may not support the requested generation type.\n\n**Prompting Modes**\n- **High-Level Parameters**: Uses predefined parameters relevant to ` + "`" + `text-to-image` + "`" + `, ` + "`" + `image-to-image` + "`" + `, etc. This mode abstracts away the underlying engine (e.g., LLaMA, Stable Diffusion) and focuses on functionality.\n- **Engine-Specific Parameters**: Uses ` + "`" + `engineParameters` + "`" + ` to directly specify an AI engine, exposing all available parameters for fine-tuned control.\n\n**Permissions Required:** ` + "`" + `prompt-svc:prompt:create` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt Svc"
                ],
                "summary": "Prompt an AI",
                "operationId": "prompt",
                "parameters": [
                    {
                        "description": "Add Prompt Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.PromptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.PromptResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-svc/prompts": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List prompts that satisfy a query.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt Svc"
                ],
                "summary": "List Prompts",
                "operationId": "listPrompts",
                "parameters": [
                    {
                        "description": "List Prompts Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ListPromptsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ListPromptsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-svc/prompts/{threadId}/responses/subscribe": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Subscribe to prompt responses by thread via Server-Sent Events (SSE).\nYou can subscribe to threads before they are created.\nThe streamed strings are of type ` + "`" + `StreamChunk` + "`" + `, see the PromptTypes endpoint for more details.",
                "tags": [
                    "Prompt Svc"
                ],
                "summary": "Subscribe to Prompt Responses by Thread",
                "operationId": "subscribeToPromptResponses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Streaming response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing threadId parameter",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-svc/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a prompt by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt Svc"
                ],
                "summary": "Remove Prompt",
                "operationId": "removePrompt",
                "parameters": [
                    {
                        "description": "Remove Prompt Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.RemovePromptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{}",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.RemovePromptResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-svc/types": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "The only purpose of this \"endpoint\" is to export types otherwise not appearing in the API docs.\nThis endpoint otherwise does nothing. Do not depend on this endpoint, only its types.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt Svc"
                ],
                "summary": "Prompt Types",
                "operationId": "promptTypes",
                "parameters": [
                    {
                        "description": "Types Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.TypesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.TypesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/definition": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Registers a new definition, associating an definition address with a slug acquired from the bearer token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "Register a Definition",
                "operationId": "saveDefinition",
                "parameters": [
                    {
                        "description": "Register Service Definition Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/registry_svc.SaveDefinitionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.SaveDefinitionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/definition/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a registered definition by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "Delete Definition",
                "operationId": "deleteDefinition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Definition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/definitions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all definitions or filters them by specific criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "List Definitions",
                "operationId": "listDefinitions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ListDefinitionsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid filters",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/instance": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Registers an instance. Idempotent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "Register Instance",
                "operationId": "registerInstance",
                "parameters": [
                    {
                        "description": "Register Instance Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/registry_svc.RegisterInstanceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.RegisterInstanceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/instance/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a registered instance by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "Remove Instance",
                "operationId": "removeInstance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/instances": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all instances or filters them by specific criteria (e.g., host, IP).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "List Service Instances",
                "operationId": "listInstances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scheme to filter by",
                        "name": "scheme",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IP to filter by",
                        "name": "ip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Deployment ID to filter by",
                        "name": "deploymentId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Host to filter by",
                        "name": "host",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IP to filter by",
                        "name": "ip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Id to filter by",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Slug to filter by",
                        "name": "slug",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ListInstancesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid filters",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/node/self": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Show the local node.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "View Self Node",
                "operationId": "selfNode",
                "parameters": [
                    {
                        "description": "List Registrys Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.NodeSelfRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.NodeSelfResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/node/{url}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a registered node by node URL. This endpoint is useful when a node is no longer available but it's still present in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "Delete Node",
                "operationId": "deleteNode",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node URL",
                        "name": "url",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/nodes": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of nodes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "List Nodes",
                "operationId": "listNodes",
                "parameters": [
                    {
                        "description": "List Nodes Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ListNodesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ListNodesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/secret-svc/decrypt": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Decrypt a value and return the encrypted result",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secret Svc"
                ],
                "summary": "Decrypt a Value",
                "operationId": "decryptValue",
                "parameters": [
                    {
                        "description": "Decrypt Value Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/secret_svc.DecryptValueRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Decrypt Value Response",
                        "schema": {
                            "$ref": "#/definitions/secret_svc.DecryptValueResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secret-svc/encrypt": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Encrypt a value and return the encrypted result",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secret Svc"
                ],
                "summary": "Encrypt a Value",
                "operationId": "encryptValue",
                "parameters": [
                    {
                        "description": "Encrypt Value Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/secret_svc.EncryptValueRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Encrypt Value Response",
                        "schema": {
                            "$ref": "#/definitions/secret_svc.EncryptValueResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secret-svc/is-secure": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns true if the encryption key is sufficiently secure.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secret Svc"
                ],
                "summary": "Check Security Status",
                "operationId": "isSecure",
                "responses": {
                    "200": {
                        "description": "Encrypt Value Response",
                        "schema": {
                            "$ref": "#/definitions/secret_svc.IsSecureResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secret-svc/secrets": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Save secrets if authorized to do so",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secret Svc"
                ],
                "summary": "Save Secrets",
                "operationId": "saveSecrets",
                "parameters": [
                    {
                        "description": "Save Secret Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/secret_svc.SaveSecretsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Save Secret Response",
                        "schema": {
                            "$ref": "#/definitions/secret_svc.SaveSecretsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List secrets by key(s) if authorized.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secret Svc"
                ],
                "summary": "List Secrets",
                "operationId": "listSecrets",
                "parameters": [
                    {
                        "description": "List Secret Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/secret_svc.ListSecretsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List Secret Response",
                        "schema": {
                            "$ref": "#/definitions/secret_svc.ListSecretsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove secrets if authorized to do so",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Secret Svc"
                ],
                "summary": "Remove Secrets",
                "operationId": "removeSecrets",
                "parameters": [
                    {
                        "description": "Remove Secret Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/secret_svc.RemoveSecretsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Remove Secret Response",
                        "schema": {
                            "$ref": "#/definitions/secret_svc.RemoveSecretsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/source-svc/repo/checkout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Checkout a git repository over https or ssh at a specific version into a temporary directory.\nPerforms a shallow clone with minimal history for faster checkout.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source Svc"
                ],
                "summary": "Checkout a git repository",
                "operationId": "checkoutRepo",
                "parameters": [
                    {
                        "description": "Checkout Repo Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/source_svc.CheckoutRepoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully checked out the repository",
                        "schema": {
                            "$ref": "#/definitions/source_svc.CheckoutRepoResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/source_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/source_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/source_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authenticated user to change their own password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Change User Password",
                "operationId": "changePassword",
                "parameters": [
                    {
                        "description": "Change Password Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ChangePasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/grants": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Save grants.\n\nGrants define which slugs are assigned specific permissions, overriding the default configuration.\n\nRequires the ` + "`" + `user-svc:grant:create` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Save Grants",
                "operationId": "saveGrants",
                "parameters": [
                    {
                        "description": "Save Grants Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.SaveGrantsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Grant saved successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.SaveGrantsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List grants.\n\nGrants define which slugs are assigned specific permissions, overriding the default configuration.\n\nRequires the ` + "`" + `user-svc:grant:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "List Grants",
                "operationId": "listGrants",
                "parameters": [
                    {
                        "description": "List Grants Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.ListGrantsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ListGrantsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/login": {
            "post": {
                "description": "Authenticates a user and returns a token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Login",
                "operationId": "login",
                "parameters": [
                    {
                        "description": "Login Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/user_svc.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/organization": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a logged-in user to create a new organization. The user initiating the request will be assigned the role of admin for that organization.\nThe initiating user will receive a dynamic role in the format ` + "`" + `user-svc:org:{organizationId}:admin` + "`" + `, where ` + "`" + `{organizationId}` + "`" + ` is a unique identifier for the created organization.\nDynamic roles are generated based on specific user-resource associations (in this case the resource being the organization), offering more flexible permission management compared to static roles.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Create an Organization",
                "operationId": "createOrganization",
                "parameters": [
                    {
                        "description": "Create User Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateOrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/organization/{organizationId}/user": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Add a User to an Organization",
                "operationId": "addUserToOrganization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organizationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Add User to Organization Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.AddUserToOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User added successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.AddUserToOrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization/User not found",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/organization/{organizationId}/user/{userId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Remove a User from an Organization",
                "operationId": "removeUserFromOrganization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organizationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Add User to Organization Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_svc.RemoveUserFromOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User added successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.RemoveUserFromOrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization/User not found",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/permission/{permissionId}/is-authorized": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check if a user is authorized for a specific permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Is Authorized",
                "operationId": "isAuthorized",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Permission ID",
                        "name": "permissionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Is Authorized Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_svc.IsAuthorizedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.IsAuthorizedResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or missing permission id",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/permissions": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates or updates a list of permissions.\n\u003cb\u003eThe permission ID must be prefixed by the callers slug.\u003c/b\u003e\nEg. if the owner's slug is ` + "`" + `petstore-svc` + "`" + ` the permission should look like ` + "`" + `petstore-svc:pet:edit` + "`" + `.\n\nRequires the ` + "`" + `user-svc:permission:create` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Save Permissions",
                "operationId": "savePermissions",
                "parameters": [
                    {
                        "description": "Permission Details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.SavePermissionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.SavePermissionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid JSON or Bad Namespace",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user-svc/public-key": {
            "get": {
                "description": "Get the public key to parse and verify the JWT.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Get Public Key",
                "operationId": "getPublicKey",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.GetPublicKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or missing permission id",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/register": {
            "post": {
                "description": "Register a new user with a name, email, and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Register",
                "operationId": "register",
                "parameters": [
                    {
                        "description": "Register Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/role": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new role.\n\u003cb\u003eThe role ID must be prefixed by the caller's slug.\u003c/b\u003e\nEg. if the caller's slug is ` + "`" + `petstore-svc` + "`" + ` the role should look like ` + "`" + `petstore-svc:admin` + "`" + `.\nThe user account who creates the role will become the owner of that role, and only the owner will be able to edit the role.\n\nRequires the ` + "`" + `user-svc:role:create` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Create a New Role",
                "operationId": "createRole",
                "parameters": [
                    {
                        "description": "Create Role Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role created successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateRoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/role/{roleId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a role based on the role ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Delete a Role",
                "operationId": "deleteRole",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.DeleteRoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user-svc/role/{roleId}/permissions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve permissions associated with a specific role ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Get Permissions by Role",
                "operationId": "getPermissionsByRole",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.GetPermissionsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Set permissions for a specified role. The caller can add permissions it owns to any role.\nIf the caller tries to add a permission it doesn't own to a role, ` + "`" + `StatusBadRequest` + "`" + ` will be returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Set Role Permissions",
                "operationId": "setRolePermission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Set Role Permissions Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.SetRolePermissionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.SetRolePermissionsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all roles from the user service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Get all Roles",
                "operationId": "getRoles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.GetRolesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user-svc/roles/permissions": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign permissions to roles.\n\nRequires the ` + "`" + `user-svc:permission:assign` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Assign Permissions",
                "operationId": "assignPermissions",
                "parameters": [
                    {
                        "description": "Assign Permissions Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.AssignPermissionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Assign Permissions successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.AssignPermissionsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/self": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Save user's own profile information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Save User Profile",
                "operationId": "saveSelf",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Save Profile Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.SaveProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.SaveProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/user": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authenticated administrator to create a new user with specified details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Create a New User",
                "operationId": "createUser",
                "parameters": [
                    {
                        "description": "Create User Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/user/by-token": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve user information based on an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Read User by Token",
                "operationId": "readUserByToken",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ReadUserByTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Token Missing",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/user/{userId}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Save user information based on the provided user ID.\nIt is intended for admins, because it uses the ` + "`" + `user-svc:user:edit` + "`" + ` permission which only admins have.\nFor a user to edit its own profile, see saveSelf.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Save User",
                "operationId": "saveUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Save Profile Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.SaveProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.SaveProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user based on the user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Delete a User",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.DeleteUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user-svc/users": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches a list of users with optional query filters and pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "List Users",
                "operationId": "getUsers",
                "parameters": [
                    {
                        "description": "Get Users Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_svc.GetUsersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.GetUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/{userId}/reset-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an administrator to change a user's password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Reset Password",
                "operationId": "resetPassword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Change Password Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ResetPasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "chat_svc.AddMessageRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "$ref": "#/definitions/chat_svc.Message"
                }
            }
        },
        "chat_svc.AddThreadRequest": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chat_svc.Thread"
                }
            }
        },
        "chat_svc.AddThreadResponse": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chat_svc.Thread"
                }
            }
        },
        "chat_svc.EventMessageAdded": {
            "type": "object",
            "properties": {
                "threadId": {
                    "type": "string"
                }
            }
        },
        "chat_svc.EventThreadAdded": {
            "type": "object",
            "properties": {
                "threadId": {
                    "type": "string"
                }
            }
        },
        "chat_svc.EventThreadUpdate": {
            "type": "object",
            "properties": {
                "threadId": {
                    "type": "string"
                }
            }
        },
        "chat_svc.GetMessageResponse": {
            "type": "object",
            "properties": {
                "exists": {
                    "type": "boolean"
                },
                "message": {
                    "$ref": "#/definitions/chat_svc.Message"
                }
            }
        },
        "chat_svc.GetMessagesResponse": {
            "type": "object",
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat_svc.Message"
                    }
                }
            }
        },
        "chat_svc.GetThreadResponse": {
            "type": "object",
            "properties": {
                "exists": {
                    "type": "boolean"
                },
                "thread": {
                    "$ref": "#/definitions/chat_svc.Thread"
                }
            }
        },
        "chat_svc.GetThreadsRequest": {
            "type": "object"
        },
        "chat_svc.GetThreadsResponse": {
            "type": "object",
            "properties": {
                "threads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat_svc.Thread"
                    }
                }
            }
        },
        "chat_svc.Message": {
            "type": "object",
            "required": [
                "id",
                "threadId"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "fileIds": {
                    "description": "FileIds defines the file attachments the message has.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "msg_emSOPlW58o"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": true
                },
                "text": {
                    "description": "Text content of the message eg. \"Hi, what's up?\"",
                    "type": "string"
                },
                "threadId": {
                    "description": "ThreadId of the message.",
                    "type": "string",
                    "example": "thr_emSOeEUWAg"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "UserId is the id of the user who wrote the message.\nFor AI messages this field is empty.",
                    "type": "string"
                }
            }
        },
        "chat_svc.Thread": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "thr_emSQnpJbhG"
                },
                "title": {
                    "description": "Title of the thread.",
                    "type": "string"
                },
                "topicIds": {
                    "description": "TopicIds defines which topics the thread belongs to.\nTopics can roughly be thought of as tags for threads.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "userIds": {
                    "description": "UserIds the ids of the users who can see this thread.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "chat_svc.UpdateThreadRequest": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chat_svc.Thread"
                }
            }
        },
        "config_svc.Config": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "dataJson": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "config_svc.GetConfigResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/config_svc.Config"
                }
            }
        },
        "config_svc.SaveConfigRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/config_svc.Config"
                }
            }
        },
        "config_svc.SaveConfigResponse": {
            "type": "object"
        },
        "container_svc.Asset": {
            "type": "object",
            "required": [
                "envVarKey",
                "url"
            ],
            "properties": {
                "envVarKey": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "container_svc.BuildImageRequest": {
            "type": "object",
            "required": [
                "contextPath",
                "name"
            ],
            "properties": {
                "contextPath": {
                    "description": "ContextPath is the local path to the build context",
                    "type": "string",
                    "example": "."
                },
                "dockerfilePath": {
                    "description": "DockerfilePath is the local path to the Dockerfile",
                    "type": "string",
                    "example": "Dockerfile"
                },
                "name": {
                    "description": "Name is the name of the image to build",
                    "type": "string",
                    "example": "nginx:latest"
                }
            }
        },
        "container_svc.BuildImageResponse": {
            "type": "object"
        },
        "container_svc.Capabilities": {
            "type": "object",
            "properties": {
                "gpuEnabled": {
                    "description": "GPUEnabled specifies whether GPU support is enabled for the container.",
                    "type": "boolean"
                }
            }
        },
        "container_svc.Container": {
            "type": "object",
            "properties": {
                "assets": {
                    "description": "Assets maps environment variable names to file URLs.\nExample: {\"MODEL\": \"https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/resolve/main/mistral-7b-instruct-v0.2.Q2_K.gguf\"}\nThese files are downloaded by the File Svc and mounted in the container.\nThe environment variable ` + "`" + `MODEL` + "`" + ` will point to the local file path in the container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.Asset"
                    }
                },
                "capabilities": {
                    "description": "Capabilities define additional runtime features, such as GPU support.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/container_svc.Capabilities"
                        }
                    ]
                },
                "envs": {
                    "description": "Envs are environment variables set within the container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.EnvVar"
                    }
                },
                "hash": {
                    "description": "Hash is a unique identifier associated with the container.",
                    "type": "string"
                },
                "id": {
                    "description": "Id is the unique identifier for the container instance.",
                    "type": "string"
                },
                "image": {
                    "description": "Image is the Docker image used to create the container.",
                    "type": "string"
                },
                "keeps": {
                    "description": "Keeps are paths that persist across container restarts.\nThey function like mounts or volumes, but their external storage location is irrelevant.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.Keep"
                    }
                },
                "labels": {
                    "description": "Labels are metadata tags assigned to the container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.Label"
                    }
                },
                "names": {
                    "description": "Names are the human-readable aliases assigned to the container.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "network": {
                    "description": "Network contains networking-related information for the container.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/container_svc.Network"
                        }
                    ]
                },
                "nodeId": {
                    "description": "Node Id\nPlease see the documentation for the envar OPENORCH_NODE_ID",
                    "type": "string"
                },
                "ports": {
                    "description": "Ports maps host ports (keys) to container ports (values).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.PortMapping"
                    }
                },
                "resources": {
                    "description": "Resources defines CPU, memory, and disk constraints for the container.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/container_svc.Resources"
                        }
                    ]
                },
                "runtime": {
                    "description": "Runtime specifies the container runtime (e.g., Docker, containerd, etc.).",
                    "type": "string"
                },
                "status": {
                    "description": "Status indicates the current state of the container (e.g., running, stopped).",
                    "type": "string"
                },
                "volumes": {
                    "description": "Volumes mounted by the container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.Volume"
                    }
                }
            }
        },
        "container_svc.ContainerIsRunningResponse": {
            "type": "object",
            "required": [
                "isRunning"
            ],
            "properties": {
                "isRunning": {
                    "type": "boolean"
                }
            }
        },
        "container_svc.DaemonInfoResponse": {
            "type": "object",
            "required": [
                "available"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "available": {
                    "type": "boolean"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "container_svc.EnvVar": {
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "description": "Key is the environment variable name.",
                    "type": "string"
                },
                "value": {
                    "description": "Value is the environment variable value.",
                    "type": "string"
                }
            }
        },
        "container_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "container_svc.GetContainerSummaryResponse": {
            "type": "object",
            "required": [
                "logs",
                "status",
                "summary"
            ],
            "properties": {
                "logs": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "summary": {
                    "description": "DEPRECATED. Summary contains both Status and Logs.",
                    "type": "string"
                }
            }
        },
        "container_svc.GetHostResponse": {
            "type": "object",
            "required": [
                "host"
            ],
            "properties": {
                "host": {
                    "type": "string"
                }
            }
        },
        "container_svc.ImagePullableResponse": {
            "type": "object",
            "required": [
                "pullable"
            ],
            "properties": {
                "pullable": {
                    "type": "boolean"
                }
            }
        },
        "container_svc.Keep": {
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "path": {
                    "description": "Path is the absolute path inside the container for the folder that should persist across restarts.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly indicates whether the keep is read-only.",
                    "type": "boolean"
                }
            }
        },
        "container_svc.Label": {
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "container_svc.ListContainersRequest": {
            "type": "object",
            "properties": {
                "containerId": {
                    "type": "string"
                },
                "limit": {
                    "type": "integer"
                },
                "nodeId": {
                    "type": "string"
                }
            }
        },
        "container_svc.ListContainersResponse": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.Container"
                    }
                }
            }
        },
        "container_svc.ListLogsRequest": {
            "type": "object",
            "properties": {
                "containerId": {
                    "type": "string"
                },
                "limit": {
                    "type": "integer"
                },
                "nodeId": {
                    "type": "string"
                }
            }
        },
        "container_svc.ListLogsResponse": {
            "type": "object",
            "properties": {
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.Log"
                    }
                }
            }
        },
        "container_svc.Log": {
            "type": "object",
            "properties": {
                "containerId": {
                    "description": "ContainerId is the raw underlying container ID.\nEg. Docker container id. Node local.",
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "nodeId": {
                    "description": "Node Id\nPlease see the documentation for the envar OPENORCH_NODE_ID",
                    "type": "string"
                }
            }
        },
        "container_svc.Network": {
            "type": "object",
            "properties": {
                "ipAddress": {
                    "description": "IPAddress is the assigned IP address of the container.",
                    "type": "string"
                },
                "macAddress": {
                    "description": "MacAddress is the container's MAC address if applicable.",
                    "type": "string"
                },
                "mode": {
                    "description": "Mode specifies the container's network mode (e.g., bridge, host, none, custom).",
                    "type": "string"
                }
            }
        },
        "container_svc.PortMapping": {
            "type": "object",
            "required": [
                "host",
                "internal"
            ],
            "properties": {
                "host": {
                    "type": "integer"
                },
                "internal": {
                    "type": "integer"
                }
            }
        },
        "container_svc.Resources": {
            "type": "object",
            "properties": {
                "cpu": {
                    "description": "CPU cores allocated to the container (e.g., 0.5 = 500m, 2 = 2 cores).",
                    "type": "number"
                },
                "diskMB": {
                    "description": "Disk space allocated to the container in megabytes.",
                    "type": "integer"
                },
                "memoryMB": {
                    "description": "Memory allocated to the container in megabytes.",
                    "type": "integer"
                }
            }
        },
        "container_svc.RunContainerRequest": {
            "type": "object",
            "required": [
                "image"
            ],
            "properties": {
                "assets": {
                    "description": "Assets maps environment variable names to file URLs.\nExample: {\"MODEL\": \"https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/resolve/main/mistral-7b-instruct-v0.2.Q2_K.gguf\"}\nThese files are downloaded by the File Svc and mounted in the container.\nThe environment variable ` + "`" + `MODEL` + "`" + ` will point to the local file path in the container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.Asset"
                    }
                },
                "capabilities": {
                    "description": "Capabilities define additional runtime features, such as GPU support.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/container_svc.Capabilities"
                        }
                    ]
                },
                "envs": {
                    "description": "Envs are environment variables set within the container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.EnvVar"
                    }
                },
                "hash": {
                    "description": "Hash is a unique identifier for the container",
                    "type": "string"
                },
                "image": {
                    "description": "Image is the Docker image to use for the container",
                    "type": "string",
                    "example": "nginx:latest"
                },
                "keeps": {
                    "description": "Keeps are paths that persist across container restarts.\nThey function like mounts or volumes, but their external storage location is irrelevant.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.Keep"
                    }
                },
                "labels": {
                    "description": "Labels are metadata tags assigned to the container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.Label"
                    }
                },
                "names": {
                    "description": "Names are the human-readable aliases assigned to the container.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ports": {
                    "description": "Ports maps host ports (keys) to container ports (values).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.PortMapping"
                    }
                }
            }
        },
        "container_svc.RunContainerResponse": {
            "type": "object",
            "properties": {
                "ports": {
                    "description": "Ports is returned here as host ports might get mapped dynamically.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/container_svc.PortMapping"
                    }
                },
                "started": {
                    "type": "boolean"
                }
            }
        },
        "container_svc.StopContainerRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "4378b76e05ba"
                },
                "name": {
                    "type": "string",
                    "example": "sup-container-x"
                }
            }
        },
        "container_svc.StopContainerResponse": {
            "type": "object"
        },
        "container_svc.Volume": {
            "type": "object",
            "properties": {
                "destination": {
                    "description": "Destination is the path inside the container.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly indicates whether the mount is read-only.",
                    "type": "boolean"
                },
                "source": {
                    "description": "Source is the host path or volume name.",
                    "type": "string"
                }
            }
        },
        "data_svc.CreateObjectFields": {
            "type": "object",
            "required": [
                "data",
                "table"
            ],
            "properties": {
                "authors": {
                    "description": "Authors is a list of user ID and organization ID who created the object.\nIf an organization ID is not provided, the currently active organization will\nbe queried from the User Svc.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"usr_12345\"",
                        " \"org_67890\"]"
                    ]
                },
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "deleters": {
                    "description": "Deleters is a list of user IDs and role IDs that can delete the object.\n` + "`" + `_self` + "`" + ` can be used to refer to the caller user's userId and\n` + "`" + `_org` + "`" + ` can be used to refer to the user's currently active organization (if exists).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "readers": {
                    "description": "Readers is a list of user IDs and role IDs that can read the object.\n` + "`" + `_self` + "`" + ` can be used to refer to the caller user's userId and\n` + "`" + `_org` + "`" + ` can be used to refer to the user's currently active organization (if exists).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "table": {
                    "type": "string"
                },
                "writers": {
                    "description": "Writers is a list of user IDs and role IDs that can write the object.\n` + "`" + `_self` + "`" + ` can be used to refer to the caller user's userId and\n` + "`" + `_org` + "`" + ` can be used to refer to the user's currently active organization (if exists).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "data_svc.CreateObjectRequest": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/data_svc.CreateObjectFields"
                }
            }
        },
        "data_svc.CreateObjectResponse": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/data_svc.Object"
                }
            }
        },
        "data_svc.DeleteObjectRequest": {
            "type": "object",
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.Filter"
                    }
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "data_svc.DeleteObjectResponse": {
            "type": "object"
        },
        "data_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "data_svc.Object": {
            "type": "object",
            "required": [
                "data",
                "table"
            ],
            "properties": {
                "authors": {
                    "description": "Authors is a list of user ID and organization ID who created the object.\nThe authors field tracks which users or organizations created an entry, helping to prevent spam.\nIf an organization ID is not provided, the currently active organization will\nbe queried from the User Svc.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"usr_12345\"",
                        " \"org_67890\"]"
                    ]
                },
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "deleters": {
                    "description": "Deleters is a list of user IDs and role IDs that can delete the object.\n` + "`" + `_self` + "`" + ` can be used to refer to the caller user's userId and\n` + "`" + `_org` + "`" + ` can be used to refer to the user's currently active organization (if exists).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"usr_12345\"",
                        " \"org_67890\"]"
                    ]
                },
                "id": {
                    "type": "string"
                },
                "readers": {
                    "description": "Readers is a list of user IDs and role IDs that can read the object.\n` + "`" + `_self` + "`" + ` can be used to refer to the caller user's userId and\n` + "`" + `_org` + "`" + ` can be used to refer to the user's currently active organization (if exists).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"usr_12345\"",
                        " \"org_67890\"]"
                    ]
                },
                "table": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "writers": {
                    "description": "Writers is a list of user IDs and role IDs that can write the object.\n` + "`" + `_self` + "`" + ` can be used to refer to the caller user's userId and\n` + "`" + `_org` + "`" + ` can be used to refer to the user's currently active organization (if exists).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"usr_12345\"",
                        " \"org_67890\"]"
                    ]
                }
            }
        },
        "data_svc.QueryRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "$ref": "#/definitions/datastore.Query"
                },
                "readers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "data_svc.QueryResponse": {
            "type": "object",
            "properties": {
                "objects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/data_svc.Object"
                    }
                }
            }
        },
        "data_svc.UpdateObjectsRequest": {
            "type": "object",
            "properties": {
                "filters": {
                    "description": "Filters to determine which objects will be updated.\nOnly objects matching all filters will be modified.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.Filter"
                    }
                },
                "object": {
                    "description": "The object containing the fields to update in matching objects.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/data_svc.Object"
                        }
                    ]
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "data_svc.UpdateObjectsResponse": {
            "type": "object"
        },
        "data_svc.UpsertObjectRequest": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/data_svc.CreateObjectFields"
                }
            }
        },
        "data_svc.UpsertObjectResponse": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/data_svc.Object"
                }
            }
        },
        "datastore.Filter": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonValues": {
                    "description": "JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -\u003e OpenAPI 2.0 -\u003e OpenAPI Go generator toolchain.",
                    "type": "string"
                },
                "op": {
                    "$ref": "#/definitions/datastore.Op"
                }
            }
        },
        "datastore.Op": {
            "type": "string",
            "enum": [
                "equals",
                "containsSubstring",
                "startsWith",
                "intersects",
                "isInList"
            ],
            "x-enum-varnames": [
                "OpEquals",
                "OpContainsSubstring",
                "OpStartsWith",
                "OpIntersects",
                "OpIsInList"
            ]
        },
        "datastore.OrderBy": {
            "type": "object",
            "properties": {
                "desc": {
                    "description": "Desc indicates whether the sorting should be in descending order.",
                    "type": "boolean"
                },
                "field": {
                    "description": "The field by which to order the results",
                    "type": "string"
                },
                "randomize": {
                    "description": "Randomize indicates that the results should be randomized instead of ordered by the ` + "`" + `field` + "`" + ` and ` + "`" + `desc` + "`" + ` criteria",
                    "type": "boolean"
                },
                "sortingType": {
                    "description": "Defines the type of sorting to apply (numeric, text, date, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datastore.SortingType"
                        }
                    ]
                }
            }
        },
        "datastore.Query": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",
                    "type": "boolean"
                },
                "filters": {
                    "description": "Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (` + "`" + `all` + "`" + `, ` + "`" + `equal` + "`" + `, ` + "`" + `contains` + "`" + `, ` + "`" + `startsWith` + "`" + `) and field selectors (` + "`" + `field` + "`" + `, ` + "`" + `fields` + "`" + `, ` + "`" + `id` + "`" + `) for easier access.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.Filter"
                    }
                },
                "jsonAfter": {
                    "description": "JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON-encoded string due to limitations in Swaggo (e.g., []interface{} gets converted to []map[string]interface{}).\nThere is no way to specify a type that results in an any/interface{} type in the ` + "`" + `go -\u003e openapi -\u003e go` + "`" + ` generation process.\nAs a result, JSONAfter is a JSON-marshalled string representing an array, e.g., ` + "`" + `[42]` + "`" + `.",
                    "type": "string"
                },
                "limit": {
                    "description": "Limit the number of records in the result set.",
                    "type": "integer"
                },
                "orderBys": {
                    "description": "OrderBys order the result set.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.OrderBy"
                    }
                }
            }
        },
        "datastore.SortingType": {
            "type": "string",
            "enum": [
                "",
                "numeric",
                "text",
                "date"
            ],
            "x-enum-varnames": [
                "SortingTypeDefault",
                "SortingTypeNumeric",
                "SortingTypeText",
                "SortingTypeDate"
            ]
        },
        "deploy_svc.AutoScalingConfig": {
            "type": "object",
            "properties": {
                "cpuThreshold": {
                    "description": "CPU usage threshold for scaling (as a percentage)",
                    "type": "integer"
                },
                "maxReplicas": {
                    "description": "Maximum number of replicas to run",
                    "type": "integer"
                },
                "minReplicas": {
                    "description": "Minimum number of replicas to run",
                    "type": "integer"
                }
            }
        },
        "deploy_svc.DeleteDeploymentRequest": {
            "type": "object",
            "required": [
                "deploymentId"
            ],
            "properties": {
                "deploymentId": {
                    "type": "string"
                }
            }
        },
        "deploy_svc.DeleteDeploymentResponse": {
            "type": "object"
        },
        "deploy_svc.Deployment": {
            "type": "object",
            "required": [
                "definitionId",
                "id"
            ],
            "properties": {
                "autoScaling": {
                    "description": "Optional: Auto-scaling rules",
                    "allOf": [
                        {
                            "$ref": "#/definitions/deploy_svc.AutoScalingConfig"
                        }
                    ]
                },
                "definitionId": {
                    "description": "DefinitionId is the id of the definition",
                    "type": "string",
                    "example": "def_deBXZMpxrQ"
                },
                "description": {
                    "description": "Description of what this deployment does",
                    "type": "string",
                    "example": "Handles user service requests"
                },
                "details": {
                    "description": "Details provides additional information about the deployment's current state,\nincluding both success and failure conditions (e.g., \"Deployment in progress\", \"Error pulling image\").",
                    "type": "string",
                    "example": "Deployment is in progress"
                },
                "envars": {
                    "description": "Envars is a map of environment variables that will be passed down to service instances (see Registry Svc Instance)\nAlso see the Registry Svc Definition for required envars.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "ID of the deployment (e.g., \"depl_dbOdi5eLQK\")",
                    "type": "string",
                    "example": "depl_dbOdi5eLQK"
                },
                "name": {
                    "description": "Short name for easy reference (e.g., \"user-service-v2\")",
                    "type": "string",
                    "example": "user-service-v2"
                },
                "replicas": {
                    "description": "Number of container instances to run",
                    "type": "integer"
                },
                "resources": {
                    "description": "Resource requirements for each replica",
                    "allOf": [
                        {
                            "$ref": "#/definitions/deploy_svc.ResourceLimits"
                        }
                    ]
                },
                "status": {
                    "description": "Current status of the deployment (e.g., \"OK\", \"Error\", \"Pending\")",
                    "allOf": [
                        {
                            "$ref": "#/definitions/deploy_svc.DeploymentStatus"
                        }
                    ],
                    "example": "OK"
                },
                "strategy": {
                    "description": "Deployment strategy (e.g., rolling update)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/deploy_svc.DeploymentStrategy"
                        }
                    ]
                },
                "targetRegions": {
                    "description": "Target deployment regions or clusters",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deploy_svc.TargetRegion"
                    }
                }
            }
        },
        "deploy_svc.DeploymentStatus": {
            "type": "string",
            "enum": [
                "OK",
                "Error",
                "Pending",
                "Failed",
                "Deploying"
            ],
            "x-enum-varnames": [
                "DeploymentStatusOK",
                "DeploymentStatusError",
                "DeploymentStatusPending",
                "DeploymentStatusFailed",
                "DeploymentStatusDeploying"
            ]
        },
        "deploy_svc.DeploymentStrategy": {
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "Max extra replicas during update",
                    "type": "integer"
                },
                "maxUnavailable": {
                    "description": "Max unavailable replicas during update",
                    "type": "integer"
                },
                "type": {
                    "description": "Deployment strategy type (RollingUpdate, Recreate, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/deploy_svc.StrategyType"
                        }
                    ]
                }
            }
        },
        "deploy_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "deploy_svc.ListDeploymentsRequest": {
            "type": "object"
        },
        "deploy_svc.ListDeploymentsResponse": {
            "type": "object",
            "properties": {
                "deployments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deploy_svc.Deployment"
                    }
                }
            }
        },
        "deploy_svc.ResourceLimits": {
            "type": "object",
            "properties": {
                "cpu": {
                    "description": "CPU limit, e.g., \"500m\" for 0.5 cores",
                    "type": "string"
                },
                "memory": {
                    "description": "Memory limit, e.g., \"128Mi\"",
                    "type": "string"
                },
                "vram": {
                    "description": "Optional: GPU VRAM requirement, e.g., \"48GB\"",
                    "type": "string"
                }
            }
        },
        "deploy_svc.SaveDeploymentRequest": {
            "type": "object",
            "properties": {
                "deployment": {
                    "$ref": "#/definitions/deploy_svc.Deployment"
                }
            }
        },
        "deploy_svc.SaveDeploymentResponse": {
            "type": "object"
        },
        "deploy_svc.StrategyType": {
            "type": "string",
            "enum": [
                "RollingUpdate",
                "Recreate"
            ],
            "x-enum-varnames": [
                "StrategyRollingUpdate",
                "StrategyRecreate"
            ]
        },
        "deploy_svc.TargetRegion": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Cluster or node where service should be deployed (e.g., \"us-west1\", \"local-docker\")",
                    "type": "string"
                },
                "zone": {
                    "description": "Optional: Specific zone for the deployment",
                    "type": "string"
                }
            }
        },
        "email_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "email_svc.File": {
            "type": "object",
            "required": [
                "content",
                "contentType",
                "filename"
            ],
            "properties": {
                "content": {
                    "description": "Base64-encoded content of the file",
                    "type": "string"
                },
                "contentType": {
                    "description": "MIME type of the file (e.g., \"application/pdf\")",
                    "type": "string"
                },
                "filename": {
                    "description": "Name of the attached file",
                    "type": "string"
                }
            }
        },
        "email_svc.SendEmailRequest": {
            "type": "object",
            "required": [
                "body",
                "contentType",
                "createdAt",
                "subject",
                "to"
            ],
            "properties": {
                "attachments": {
                    "description": "List of file attachments (optional)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/email_svc.File"
                    }
                },
                "bcc": {
                    "description": "List of BCC recipient email addresses (optional)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "body": {
                    "description": "Email body content (plain text or HTML)",
                    "type": "string"
                },
                "cc": {
                    "description": "List of CC recipient email addresses (optional)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "contentType": {
                    "description": "Content type: \"text/plain\" or \"text/html\"",
                    "type": "string"
                },
                "createdAt": {
                    "description": "Timestamp of email creation",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier",
                    "type": "string"
                },
                "subject": {
                    "description": "Email subject line",
                    "type": "string"
                },
                "to": {
                    "description": "List of recipient email addresses",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "email_svc.SendEmailResponse": {
            "type": "object",
            "properties": {
                "emailId": {
                    "description": "Unique identifier for the sent email",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the email send operation (\"sent\", \"queued\", etc.)",
                    "type": "string"
                }
            }
        },
        "file_svc.Download": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "downloadedBytes": {
                    "description": "DownloadedBytes exists to show the download progress in terms of the number of bytes already downloaded.",
                    "type": "integer",
                    "format": "int64"
                },
                "error": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "filePath": {
                    "type": "string"
                },
                "fileSize": {
                    "description": "FileSize is the full final downloaded file size.",
                    "type": "integer",
                    "format": "int64"
                },
                "id": {
                    "type": "string"
                },
                "progress": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "file_svc.DownloadFileRequest": {
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "folderPath": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "file_svc.DownloadsResponse": {
            "type": "object",
            "properties": {
                "downloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/file_svc.Download"
                    }
                }
            }
        },
        "file_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "file_svc.GetDownloadResponse": {
            "type": "object",
            "required": [
                "exists"
            ],
            "properties": {
                "download": {
                    "$ref": "#/definitions/file_svc.Download"
                },
                "exists": {
                    "type": "boolean"
                }
            }
        },
        "file_svc.ListUploadsRequest": {
            "type": "object",
            "properties": {
                "after": {
                    "description": "After time value",
                    "type": "string"
                },
                "limit": {
                    "type": "integer"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "file_svc.ListUploadsResponse": {
            "type": "object",
            "properties": {
                "uploads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/file_svc.Upload"
                    }
                }
            }
        },
        "file_svc.Upload": {
            "type": "object",
            "required": [
                "fileSize"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "fileId": {
                    "description": "Logical file ID spanning all replicas",
                    "type": "string"
                },
                "fileName": {
                    "description": "Filename is the original name of the file",
                    "type": "string"
                },
                "filePath": {
                    "description": "FilePath is the full node local path of the file",
                    "type": "string"
                },
                "fileSize": {
                    "type": "integer",
                    "format": "int64"
                },
                "id": {
                    "description": "Unique ID for this replica",
                    "type": "string"
                },
                "nodeId": {
                    "description": "ID of the node storing this replica",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "file_svc.UploadFileResponse": {
            "type": "object",
            "properties": {
                "upload": {
                    "$ref": "#/definitions/file_svc.Upload"
                }
            }
        },
        "firehose_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "firehose_svc.Event": {
            "type": "object",
            "properties": {
                "data": {},
                "name": {
                    "type": "string"
                }
            }
        },
        "firehose_svc.EventPublishRequest": {
            "type": "object",
            "properties": {
                "event": {
                    "$ref": "#/definitions/firehose_svc.Event"
                }
            }
        },
        "model_svc.Architectures": {
            "type": "object",
            "properties": {
                "cuda": {
                    "description": "CUDA-specific container parameters, if applicable.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model_svc.CudaParameters"
                        }
                    ]
                },
                "default": {
                    "description": "Default container configuration for non-GPU environments.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model_svc.DefaultParameters"
                        }
                    ]
                }
            }
        },
        "model_svc.Asset": {
            "type": "object",
            "required": [
                "envVarKey",
                "url"
            ],
            "properties": {
                "envVarKey": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "model_svc.Container": {
            "type": "object",
            "properties": {
                "envars": {
                    "description": "Environment variables to be passed to the container (e.g., \"DEVICES=all\").",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model_svc.EnvVar"
                    }
                },
                "imageTemplate": {
                    "description": "Template for constructing the container image name.",
                    "type": "string"
                },
                "keeps": {
                    "description": "List of container paths that should persist across restarts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model_svc.Keep"
                    }
                },
                "port": {
                    "description": "Internal port exposed by the container.",
                    "type": "integer"
                }
            }
        },
        "model_svc.CudaParameters": {
            "type": "object",
            "properties": {
                "container": {
                    "description": "Container configuration related to CUDA usage.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model_svc.Container"
                        }
                    ]
                },
                "cudaVersionPrecision": {
                    "description": "Level of precision for selecting the CUDA version when resolving the container image.\n- 2 -\u003e Use \"major.minor\" (e.g., \"12.2\")\n- 3 -\u003e Use \"major.minor.patch\" (e.g., \"12.2.0\")",
                    "type": "integer"
                },
                "defaultCudaVersion": {
                    "description": "Default CUDA version to use (e.g., \"12.2\" or \"12.2.0\").",
                    "type": "string"
                },
                "defaultCudnnVersion": {
                    "description": "Default cuDNN version to use alongside CUDA.",
                    "type": "string"
                }
            }
        },
        "model_svc.DefaultParameters": {
            "type": "object",
            "properties": {
                "container": {
                    "$ref": "#/definitions/model_svc.Container"
                }
            }
        },
        "model_svc.EnvVar": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "Key is the environment variable name.",
                    "type": "string"
                },
                "value": {
                    "description": "Value is the environment variable value.",
                    "type": "string"
                }
            }
        },
        "model_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "model_svc.GetModelResponse": {
            "type": "object",
            "required": [
                "exists",
                "model",
                "platform"
            ],
            "properties": {
                "exists": {
                    "type": "boolean"
                },
                "model": {
                    "$ref": "#/definitions/model_svc.Model"
                },
                "platform": {
                    "$ref": "#/definitions/model_svc.Platform"
                }
            }
        },
        "model_svc.Keep": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "Path is the absolute path inside the container for the folder that should persist across restarts.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly indicates whether the keep is read-only.",
                    "type": "boolean"
                }
            }
        },
        "model_svc.ListModelsResponse": {
            "type": "object",
            "properties": {
                "models": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model_svc.Model"
                    }
                }
            }
        },
        "model_svc.ListPlatformsResponse": {
            "type": "object",
            "required": [
                "platforms"
            ],
            "properties": {
                "platforms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model_svc.Platform"
                    }
                }
            }
        },
        "model_svc.MakeDefaultResponse": {
            "type": "object"
        },
        "model_svc.Model": {
            "type": "object",
            "required": [
                "id",
                "name",
                "platformId"
            ],
            "properties": {
                "assets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model_svc.Asset"
                    }
                },
                "bits": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "extension": {
                    "type": "string"
                },
                "flavour": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "maxBits": {
                    "type": "integer"
                },
                "maxRam": {
                    "type": "number"
                },
                "mirrors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "type": "string"
                },
                "platformId": {
                    "type": "string"
                },
                "promptTemplate": {
                    "type": "string"
                },
                "quality": {
                    "type": "string"
                },
                "quantComment": {
                    "type": "string"
                },
                "size": {
                    "type": "number"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uncensored": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model_svc.ModelStatus": {
            "type": "object",
            "required": [
                "address",
                "assetsReady",
                "running"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "assetsReady": {
                    "type": "boolean"
                },
                "running": {
                    "description": "Running triggers onModelLaunch on the frontend.\n\tRunning is true when the model is both running and answering\n\t- fully loaded.",
                    "type": "boolean"
                }
            }
        },
        "model_svc.Platform": {
            "type": "object",
            "properties": {
                "architectures": {
                    "$ref": "#/definitions/model_svc.Architectures"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "types": {
                    "description": "List of prompt types that the AI engine supports.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/prompt_svc.PromptType"
                    }
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "model_svc.StartResponse": {
            "type": "object"
        },
        "model_svc.StatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/model_svc.ModelStatus"
                }
            }
        },
        "policy_svc.BlocklistParameters": {
            "type": "object",
            "properties": {
                "blockedIPs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "policy_svc.CheckRequest": {
            "type": "object",
            "properties": {
                "endpoint": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "policy_svc.CheckResponse": {
            "type": "object",
            "required": [
                "allowed"
            ],
            "properties": {
                "allowed": {
                    "type": "boolean"
                }
            }
        },
        "policy_svc.Entity": {
            "type": "string",
            "enum": [
                "userId",
                "ip"
            ],
            "x-enum-varnames": [
                "EntityUserID",
                "EntityIP"
            ]
        },
        "policy_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "policy_svc.Instance": {
            "type": "object",
            "required": [
                "parameters",
                "templateId"
            ],
            "properties": {
                "endpoint": {
                    "type": "string",
                    "example": "/user-svc/register"
                },
                "id": {
                    "type": "string"
                },
                "parameters": {
                    "$ref": "#/definitions/policy_svc.Parameters"
                },
                "templateId": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/policy_svc.TemplateId"
                        }
                    ],
                    "example": "rate-limit"
                }
            }
        },
        "policy_svc.Parameters": {
            "type": "object",
            "properties": {
                "blocklist": {
                    "$ref": "#/definitions/policy_svc.BlocklistParameters"
                },
                "rateLimit": {
                    "$ref": "#/definitions/policy_svc.RateLimitParameters"
                }
            }
        },
        "policy_svc.RateLimitParameters": {
            "type": "object",
            "properties": {
                "entity": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/policy_svc.Entity"
                        }
                    ],
                    "example": "userId"
                },
                "maxRequests": {
                    "type": "integer",
                    "example": 10
                },
                "scope": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/policy_svc.Scope"
                        }
                    ],
                    "example": "endpoint"
                },
                "timeWindow": {
                    "type": "string",
                    "example": "1m"
                }
            }
        },
        "policy_svc.Scope": {
            "type": "string",
            "enum": [
                "endpoint",
                "global"
            ],
            "x-enum-varnames": [
                "ScopeEndpoint",
                "ScopeGlobal"
            ]
        },
        "policy_svc.TemplateId": {
            "type": "string",
            "enum": [
                "rate-limit",
                "blocklist"
            ],
            "x-enum-varnames": [
                "TemplateIdRateLimit",
                "TemplateIdBlocklist"
            ]
        },
        "policy_svc.UpsertInstanceRequest": {
            "type": "object",
            "properties": {
                "instance": {
                    "$ref": "#/definitions/policy_svc.Instance"
                }
            }
        },
        "policy_svc.UpsertInstanceResponse": {
            "type": "object"
        },
        "prompt_svc.EngineParameters": {
            "type": "object",
            "properties": {
                "llamaCppParameters": {
                    "$ref": "#/definitions/prompt_svc.LlamaCppParameters"
                },
                "stableDiffusion": {
                    "$ref": "#/definitions/prompt_svc.StableDiffusionParameters"
                }
            }
        },
        "prompt_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "prompt_svc.ListPromptsRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "$ref": "#/definitions/datastore.Query"
                }
            }
        },
        "prompt_svc.ListPromptsResponse": {
            "type": "object",
            "properties": {
                "after": {},
                "count": {
                    "type": "integer"
                },
                "prompts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/prompt_svc.Prompt"
                    }
                }
            }
        },
        "prompt_svc.LlamaCppParameters": {
            "type": "object",
            "properties": {
                "template": {
                    "description": "Template of the prompt. Optional. If not present it's derived from ModelId.",
                    "type": "string",
                    "example": "[INST]{prompt}[/INST]"
                }
            }
        },
        "prompt_svc.Parameters": {
            "type": "object",
            "properties": {
                "textToImage": {
                    "$ref": "#/definitions/prompt_svc.TextToImageParameters"
                },
                "textToText": {
                    "$ref": "#/definitions/prompt_svc.TextToTextParameters"
                }
            }
        },
        "prompt_svc.Prompt": {
            "type": "object",
            "required": [
                "prompt"
            ],
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is the time of the prompt creation.",
                    "type": "string"
                },
                "engineParameters": {
                    "description": "AI engine/platform (eg. LlamaCpp, Stable Diffusion) specific parameters",
                    "allOf": [
                        {
                            "$ref": "#/definitions/prompt_svc.EngineParameters"
                        }
                    ]
                },
                "error": {
                    "description": "Error that arose during prompt execution, if any.",
                    "type": "string"
                },
                "id": {
                    "description": "Id is the unique ID of the prompt.",
                    "type": "string"
                },
                "lastRun": {
                    "description": "LastRun is the time of the last prompt run.",
                    "type": "string"
                },
                "maxRetries": {
                    "description": "MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",
                    "type": "integer",
                    "example": 10
                },
                "modelId": {
                    "description": "ModelId is just the OpenOrch internal ID of the model.",
                    "type": "string",
                    "example": "huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf"
                },
                "parameters": {
                    "description": "AI engine/platform (eg. LlamaCpp, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/prompt_svc.Parameters"
                        }
                    ]
                },
                "prompt": {
                    "description": "Prompt is the message itself eg. \"What's a banana?",
                    "type": "string",
                    "example": "What's a banana?"
                },
                "requestMessageId": {
                    "type": "string"
                },
                "responseMessageId": {
                    "type": "string"
                },
                "runCount": {
                    "description": "RunCount is the number of times the prompt was retried due to errors",
                    "type": "integer"
                },
                "status": {
                    "description": "Status of the prompt.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/prompt_svc.PromptStatus"
                        }
                    ]
                },
                "sync": {
                    "description": "Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",
                    "type": "boolean"
                },
                "threadId": {
                    "description": "ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set ` + "`" + `prompt.sync` + "`" + ` to true for a blocking answer.",
                    "type": "string"
                },
                "type": {
                    "description": "Type is inferred from the ` + "`" + `Parameters` + "`" + ` or ` + "`" + `EngineParameters` + "`" + ` field.\nEg. A LLamaCpp prompt will be \"Text-to-Text\",\na Stabel Diffusion one will be \"Text-to-Image\" etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/prompt_svc.PromptType"
                        }
                    ]
                },
                "updatedAt": {
                    "description": "UpdatedAt is the last time the prompt was updated.",
                    "type": "string"
                },
                "userId": {
                    "description": "UserId contains the ID of the user who submitted the prompt.",
                    "type": "string"
                }
            }
        },
        "prompt_svc.PromptRequest": {
            "type": "object",
            "required": [
                "prompt"
            ],
            "properties": {
                "engineParameters": {
                    "description": "AI engine/platform (eg. Llama, Stable Diffusion) specific parameters",
                    "allOf": [
                        {
                            "$ref": "#/definitions/prompt_svc.EngineParameters"
                        }
                    ]
                },
                "id": {
                    "description": "Id is the unique ID of the prompt.",
                    "type": "string"
                },
                "maxRetries": {
                    "description": "MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",
                    "type": "integer",
                    "example": 10
                },
                "modelId": {
                    "description": "ModelId is just the OpenOrch internal ID of the model.",
                    "type": "string",
                    "example": "huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf"
                },
                "parameters": {
                    "description": "AI engine/platform (eg. Llama, Stable Diffusion) agnostic parameters.\nUse these high level parameters when you don't care about the actual engine, only\nthe functionality (eg. text to image, image to image) it provides.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/prompt_svc.Parameters"
                        }
                    ]
                },
                "prompt": {
                    "description": "Prompt is the message itself eg. \"What's a banana?",
                    "type": "string",
                    "example": "What's a banana?"
                },
                "sync": {
                    "description": "Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things synchronously.\nIn those cases set Sync to true.",
                    "type": "boolean"
                },
                "threadId": {
                    "description": "ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set ` + "`" + `prompt.sync` + "`" + ` to true for a blocking answer.",
                    "type": "string"
                }
            }
        },
        "prompt_svc.PromptResponse": {
            "type": "object",
            "properties": {
                "prompt": {
                    "description": "Prompt contains the details of the prompt that was just created by this request.\nThis includes the ID, prompt text, status, and other associated metadata.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/prompt_svc.Prompt"
                        }
                    ]
                },
                "responseMessage": {
                    "description": "Response message contains the response text and files.\nThis field is populated only for synchronous prompts (` + "`" + `sync = true` + "`" + `).\nFor asynchronous prompts, the response will provided in the associated\nmessage identified by the ` + "`" + `responseMessageId` + "`" + ` of the ` + "`" + `promptSvc.prompt` + "`" + ` object once the prompt completes.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/chat_svc.Message"
                        }
                    ]
                }
            }
        },
        "prompt_svc.PromptStatus": {
            "type": "string",
            "enum": [
                "scheduled",
                "running",
                "completed",
                "errored",
                "abandoned",
                "canceled"
            ],
            "x-enum-varnames": [
                "PromptStatusScheduled",
                "PromptStatusRunning",
                "PromptStatusCompleted",
                "PromptStatusErrored",
                "PromptStatusAbandoned",
                "PromptStatusCanceled"
            ]
        },
        "prompt_svc.PromptType": {
            "type": "string",
            "enum": [
                "Image-Text-to-Text",
                "Visual Question Answering",
                "Document Question Answering",
                "Text-to-Image",
                "Image-to-Image",
                "Image-to-Video",
                "Unconditional Image Generation",
                "Text-to-Video",
                "Zero-Shot Image Classification",
                "Zero-Shot Object Detection",
                "Text-to-3D",
                "Image-to-3D",
                "Image Feature Extraction",
                "Keypoint Detection",
                "Text-to-Text",
                "Question Answering",
                "Translation",
                "Summarization",
                "Text Generation",
                "Fill-Mask",
                "Text-to-Speech",
                "Text-to-Audio",
                "Automatic Speech Recognition",
                "Audio-to-Audio",
                "Audio Classification",
                "Reinforcement Learning",
                "Robotics",
                "Graph Machine Learning"
            ],
            "x-enum-varnames": [
                "PromptTypeImageTextToText",
                "PromptTypeVisualQuestionAnswering",
                "PromptTypeDocumentQuestionAnswering",
                "PromptTypeTextToImage",
                "PromptTypeImageToImage",
                "PromptTypeImageToVideo",
                "PromptTypeUnconditionalImageGeneration",
                "PromptTypeTextToVideo",
                "PromptTypeZeroShotImageClassification",
                "PromptTypeZeroShotObjectDetection",
                "PromptTypeTextTo3D",
                "PromptTypeImageTo3D",
                "PromptTypeImageFeatureExtraction",
                "PromptTypeKeypointDetection",
                "PromptTypeTextToText",
                "PromptTypeQuestionAnswering",
                "PromptTypeTranslation",
                "PromptTypeSummarization",
                "PromptTypeTextGeneration",
                "PromptTypeFillMask",
                "PromptTypeTextToSpeech",
                "PromptTypeTextToAudio",
                "PromptTypeAutomaticSpeechRecognition",
                "PromptTypeAudioToAudio",
                "PromptTypeAudioClassification",
                "PromptTypeReinforcementLearning",
                "PromptTypeRobotics",
                "PromptTypeGraphMachineLearning"
            ]
        },
        "prompt_svc.RemovePromptRequest": {
            "type": "object",
            "properties": {
                "promptId": {
                    "type": "string"
                }
            }
        },
        "prompt_svc.RemovePromptResponse": {
            "type": "object"
        },
        "prompt_svc.StableDiffusionParameters": {
            "type": "object",
            "properties": {
                "txt2Img": {
                    "description": "Text to image parameters",
                    "allOf": [
                        {
                            "$ref": "#/definitions/stable_diffusion.Txt2ImgRequest"
                        }
                    ]
                }
            }
        },
        "prompt_svc.TextToImageParameters": {
            "type": "object",
            "properties": {
                "aspectRatio": {
                    "description": "Alternative way to specify dimensions (e.g., \"16:9\", \"1:1\").",
                    "type": "string"
                },
                "batchSize": {
                    "description": "Number of images to generate per batch.",
                    "type": "integer"
                },
                "denoisingStrength": {
                    "description": "Controls how much variation is introduced in image modifications.",
                    "type": "number"
                },
                "enableUpscaling": {
                    "description": "Whether to apply AI-based upscaling.",
                    "type": "boolean"
                },
                "format": {
                    "description": "Output format for the generated image (png, jpg, webp, etc.).",
                    "type": "string"
                },
                "guidanceScale": {
                    "description": "How closely the output should follow the prompt.",
                    "type": "number"
                },
                "height": {
                    "type": "integer"
                },
                "negativePrompt": {
                    "description": "A negative prompt to specify what should be avoided in the image.",
                    "type": "string"
                },
                "numIterations": {
                    "description": "Number of batches to generate.",
                    "type": "integer"
                },
                "prompt": {
                    "description": "The primary prompt for generating the image.\nDefaults to the top-level prompt if not specified.\nIf both are provided (which should be avoided), this field takes precedence.",
                    "type": "string"
                },
                "qualityPreset": {
                    "description": "Preset quality settings (e.g., Low, Medium, High, Ultra).",
                    "type": "string"
                },
                "restoreFaces": {
                    "description": "Whether to enhance facial details for portraits.",
                    "type": "boolean"
                },
                "scheduler": {
                    "description": "Specifies the sampling method used during generation.",
                    "type": "string"
                },
                "seed": {
                    "description": "Optional seed for reproducibility. If not set, a random seed is used.",
                    "type": "integer"
                },
                "steps": {
                    "description": "Number of inference steps for image generation.",
                    "type": "integer"
                },
                "styles": {
                    "description": "List of artistic styles or themes to apply.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "width": {
                    "description": "Image dimensions (width and height in pixels).",
                    "type": "integer"
                }
            }
        },
        "prompt_svc.TextToTextParameters": {
            "type": "object",
            "properties": {
                "template": {
                    "description": "Template of the prompt. Optional. If not present it's derived from ModelId.",
                    "type": "string",
                    "example": "[INST]{prompt}[/INST]"
                }
            }
        },
        "prompt_svc.TypesRequest": {
            "type": "object"
        },
        "prompt_svc.TypesResponse": {
            "type": "object",
            "properties": {
                "chunk": {
                    "$ref": "#/definitions/prompt_svc_stream.Chunk"
                }
            }
        },
        "prompt_svc_stream.Chunk": {
            "type": "object",
            "properties": {
                "messageId": {
                    "description": "MessageId is the ChatSvc Message id that the chunk is part of.\nMight only be available for \"done\" chunks.",
                    "type": "string"
                },
                "text": {
                    "description": "TextChunk contains a part of the text output from the stream.",
                    "type": "string"
                },
                "type": {
                    "description": "Type indicates the type of the stream event (e.g., text, done).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/prompt_svc_stream.ChunkType"
                        }
                    ]
                }
            }
        },
        "prompt_svc_stream.ChunkType": {
            "type": "string",
            "enum": [
                "progress",
                "done"
            ],
            "x-enum-varnames": [
                "ChunkTypeProgress",
                "ChunkTypeDone"
            ]
        },
        "registry_svc.APISpec": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Additional metadata about the API (e.g., author, license, etc.)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "protocolType": {
                    "description": "Protocol type (e.g., OpenAPI, Swagger, etc.)",
                    "type": "string"
                },
                "url": {
                    "description": "URL to the OpenAPI file or other API definition",
                    "type": "string"
                },
                "version": {
                    "description": "Version of the API specification (e.g., 3.0.0)",
                    "type": "string"
                }
            }
        },
        "registry_svc.Client": {
            "type": "object",
            "required": [
                "language",
                "url"
            ],
            "properties": {
                "language": {
                    "description": "Programming language.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.Language"
                        }
                    ],
                    "example": "JavaScript"
                },
                "url": {
                    "description": "The URL of the client.",
                    "type": "string",
                    "example": "https://example.com/client.js"
                }
            }
        },
        "registry_svc.Definition": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "apiSpecs": {
                    "description": "API Specs such as OpenAPI definitions etc.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.APISpec"
                    }
                },
                "clients": {
                    "description": "Programming language clients such as on npm or GitHub.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.Client"
                    }
                },
                "envars": {
                    "description": "Envars is a map of Renvironment variables that a deployment (see Deploy Svc Deployment) of this definition will REQUIRE to run.\nE.g., {\"DB_URL\": \"mysql://user:password@host:port/db\"}\nThese will be injected into the service instances (see Registry Svc Instance) at runtime.\nThe value of a key here is the default value. The actual value can be overridden at deployment time.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.EnvVar"
                    }
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "description": "Container specifications for Docker, K8s, etc.\nUse this to deploy already built images.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.ImageSpec"
                        }
                    ]
                },
                "ports": {
                    "description": "Ports have host ports and internal ports currently but they\nreally only should have internal ports as host ports should be assigned\nby the system. Host ports might go away in the future.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.PortMapping"
                    }
                },
                "repository": {
                    "description": "Repository based definitions is an alternative to Image definitions.\nInstead of deploying an already built and pushed image, a source code repository\nurl can be provided. The container will be built from the source.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.RepositorySpec"
                        }
                    ]
                }
            }
        },
        "registry_svc.EnvVar": {
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "description": "Key is the environment variable name.",
                    "type": "string"
                },
                "value": {
                    "description": "Value is the environment variable value.",
                    "type": "string"
                }
            }
        },
        "registry_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "registry_svc.GPU": {
            "type": "object",
            "properties": {
                "busId": {
                    "type": "string"
                },
                "computeMode": {
                    "type": "string"
                },
                "cudaVersion": {
                    "type": "string"
                },
                "gpuUtilization": {
                    "type": "number"
                },
                "id": {
                    "description": "Id Node.URL + IntraNodeId",
                    "type": "string"
                },
                "intraNodeId": {
                    "type": "integer"
                },
                "memoryTotal": {
                    "type": "integer"
                },
                "memoryUsage": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "performanceState": {
                    "type": "string"
                },
                "powerCap": {
                    "type": "number"
                },
                "powerUsage": {
                    "type": "number"
                },
                "processDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.Process"
                    }
                },
                "temperature": {
                    "type": "number"
                }
            }
        },
        "registry_svc.ImageSpec": {
            "type": "object",
            "required": [
                "internalPorts",
                "name"
            ],
            "properties": {
                "internalPorts": {
                    "description": "InternalPorts are the ports the container will listen on internally",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "description": "Name is the container image name/URL to use for the container",
                    "type": "string",
                    "example": "nginx:latest"
                }
            }
        },
        "registry_svc.Instance": {
            "type": "object",
            "required": [
                "id",
                "status",
                "url"
            ],
            "properties": {
                "deploymentId": {
                    "description": "The ID of the deployment that this instance is an instance of.\nOnly instances deployed by OpenOrch have a DeploymentId.\nServices can be deployed through other means (Docker Compose, K8s, anything),\nin that case they self-register and will not have a DeploymentId.",
                    "type": "string",
                    "example": "depl_deBUCtJirc"
                },
                "details": {
                    "description": "Details",
                    "type": "string",
                    "example": "Instance is healthy"
                },
                "host": {
                    "description": "Host of the instance address. Required if URL is not provided",
                    "type": "string",
                    "example": "myserver.com"
                },
                "id": {
                    "description": "Required: ID of the instance",
                    "type": "string",
                    "example": "inst_di9riJEvH2"
                },
                "ip": {
                    "description": "IP of the instance address. Optional: to register by IP instead of host",
                    "type": "string",
                    "example": "8.8.8.8"
                },
                "lastHeartbeat": {
                    "description": "Last time the instance gave a sign of life",
                    "type": "string"
                },
                "nodeUrl": {
                    "description": "NodeURL is the URL of the OpenOrch server the instance is running on.\nTo have a NodeURL the instance must either:\n- Be deployed by OpenOrch\n- Declare the OpenOrch server URL when registering its instance",
                    "type": "string",
                    "example": "https://myserver.com:58231"
                },
                "path": {
                    "description": "Path of the instance address. Optional (e.g., \"/api\")",
                    "type": "string",
                    "example": "/your-svc"
                },
                "port": {
                    "description": "Port of the instance address. Required if URL is not provided",
                    "type": "integer",
                    "example": 8080
                },
                "scheme": {
                    "description": "Scheme of the instance address. Required if URL is not provided.",
                    "type": "string",
                    "example": "https"
                },
                "slug": {
                    "description": "Slug of the account that owns this instance\nServices that want to be proxied by their slug are advised to self register\ntheir instance at startup.\nKeep in mind, instances might be deployed by OpenOrch yet they still won't be OpenOrch services\nand they won't have slugs. Think NGINX, MySQL, etc.",
                    "type": "string",
                    "example": "my-svc"
                },
                "status": {
                    "description": "Status",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.InstanceStatus"
                        }
                    ],
                    "example": "Healthy"
                },
                "tags": {
                    "description": "Tags are used to filter instances",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "tag1",
                        "tag2"
                    ]
                },
                "url": {
                    "description": "Full address URL of the instance.",
                    "type": "string",
                    "example": "https://myserver.com:5981"
                }
            }
        },
        "registry_svc.InstanceStatus": {
            "type": "string",
            "enum": [
                "Unknown",
                "Healthy",
                "Degraded",
                "Unreachable",
                "Error"
            ],
            "x-enum-comments": {
                "InstanceStatusDegraded": "Instance is responding but with performance issues or partial failures",
                "InstanceStatusError": "Instance encountered errors or failed multiple health checks",
                "InstanceStatusHealthy": "Instance is fully operational and responding as expected",
                "InstanceStatusUnknown": "Default state when the instance status is not yet determined",
                "InstanceStatusUnreachable": "Instance is not reachable, possibly down or with network issues"
            },
            "x-enum-varnames": [
                "InstanceStatusUnknown",
                "InstanceStatusHealthy",
                "InstanceStatusDegraded",
                "InstanceStatusUnreachable",
                "InstanceStatusError"
            ]
        },
        "registry_svc.Language": {
            "type": "string",
            "enum": [
                "JavaScript",
                "Python",
                "Java",
                "C#",
                "C++",
                "Ruby",
                "Go",
                "Swift",
                "PHP",
                "TypeScript",
                "Kotlin",
                "Scala",
                "Perl",
                "Rust",
                "Haskell",
                "Clojure",
                "Elixir",
                "Objective-C",
                "F#"
            ],
            "x-enum-varnames": [
                "JavaScript",
                "Python",
                "Java",
                "CSharp",
                "CPlusPlus",
                "Ruby",
                "Go",
                "Swift",
                "PHP",
                "TypeScript",
                "Kotlin",
                "Scala",
                "Perl",
                "Rust",
                "Haskell",
                "Clojure",
                "Elixir",
                "ObjectiveC",
                "FSharp"
            ]
        },
        "registry_svc.ListDefinitionsResponse": {
            "type": "object",
            "properties": {
                "definitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.Definition"
                    }
                }
            }
        },
        "registry_svc.ListInstancesResponse": {
            "type": "object",
            "properties": {
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.Instance"
                    }
                }
            }
        },
        "registry_svc.ListNodesRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "description": "Node IDs to filter on",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "registry_svc.ListNodesResponse": {
            "type": "object",
            "properties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.Node"
                    }
                }
            }
        },
        "registry_svc.Node": {
            "type": "object",
            "required": [
                "id",
                "url"
            ],
            "properties": {
                "availabilityZone": {
                    "description": "The availability zone of the node",
                    "type": "string"
                },
                "gpus": {
                    "description": "List of GPUs available on the node",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.GPU"
                    }
                },
                "id": {
                    "description": "Required: ID of the instance",
                    "type": "string",
                    "example": "node_di9riJEvH2"
                },
                "lastHeartbeat": {
                    "description": "Last time the instance gave a sign of life",
                    "type": "string"
                },
                "region": {
                    "description": "The region of the node",
                    "type": "string"
                },
                "url": {
                    "description": "URL of the daemon running on the node.\nIf not configured defaults to hostname + default OpenOrch server port.",
                    "type": "string"
                },
                "usage": {
                    "description": "Resource usage metrics of the node.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.ResourceUsage"
                        }
                    ]
                }
            }
        },
        "registry_svc.NodeSelfRequest": {
            "type": "object"
        },
        "registry_svc.NodeSelfResponse": {
            "type": "object",
            "required": [
                "node"
            ],
            "properties": {
                "node": {
                    "$ref": "#/definitions/registry_svc.Node"
                }
            }
        },
        "registry_svc.PortMapping": {
            "type": "object",
            "required": [
                "host",
                "internal"
            ],
            "properties": {
                "host": {
                    "type": "integer"
                },
                "internal": {
                    "type": "integer"
                }
            }
        },
        "registry_svc.Process": {
            "type": "object",
            "properties": {
                "memoryUsage": {
                    "type": "integer"
                },
                "pid": {
                    "type": "integer"
                },
                "processName": {
                    "type": "string"
                }
            }
        },
        "registry_svc.RegisterInstanceRequest": {
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "deploymentId": {
                    "description": "The ID of the deployment that this instance is an instance of.",
                    "type": "string",
                    "example": "depl_deBUCtJirc"
                },
                "host": {
                    "description": "Host of the instance address. Required if URL is not provided",
                    "type": "string",
                    "example": "myserver.com"
                },
                "id": {
                    "type": "string",
                    "example": "inst_di9riJEvH2"
                },
                "ip": {
                    "description": "IP of the instance address. Optional: to register by IP instead of host",
                    "type": "string",
                    "example": "8.8.8.8"
                },
                "path": {
                    "description": "Path of the instance address. Optional (e.g., \"/api\")",
                    "type": "string",
                    "example": "/your-svc"
                },
                "port": {
                    "description": "Port of the instance address. Required if URL is not provided",
                    "type": "integer",
                    "example": 8080
                },
                "scheme": {
                    "description": "Scheme of the instance address. Required if URL is not provided.",
                    "type": "string",
                    "example": "https"
                },
                "url": {
                    "description": "Full address URL of the instance.",
                    "type": "string",
                    "example": "https://myserver.com:5981"
                }
            }
        },
        "registry_svc.RegisterInstanceResponse": {
            "type": "object"
        },
        "registry_svc.RepositorySpec": {
            "type": "object",
            "required": [
                "ports",
                "url"
            ],
            "properties": {
                "buildContext": {
                    "description": "Context is the path to the image build context",
                    "type": "string",
                    "example": "path/to/subfolder"
                },
                "containerFile": {
                    "description": "ContainerFile is the path to the file that contains the container build instructions\nRelative from the build context. By default, it is assumed to be a Dockerfile.",
                    "type": "string",
                    "example": "docker/Dockerfile"
                },
                "ports": {
                    "description": "Ports the container will listen on internally",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "url": {
                    "description": "URL is the URL to the repository",
                    "type": "string",
                    "example": "https://github.com/openorch/openorch.git"
                },
                "version": {
                    "description": "Version of the code to use",
                    "type": "string",
                    "example": "v1.0.0"
                }
            }
        },
        "registry_svc.ResourceUsage": {
            "type": "object",
            "properties": {
                "cpu": {
                    "description": "CPU usage metrics.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.Usage"
                        }
                    ]
                },
                "disk": {
                    "description": "Disk usage metrics.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.Usage"
                        }
                    ]
                },
                "memory": {
                    "description": "Memory usage metrics.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.Usage"
                        }
                    ]
                }
            }
        },
        "registry_svc.SaveDefinitionRequest": {
            "type": "object",
            "properties": {
                "definition": {
                    "$ref": "#/definitions/registry_svc.Definition"
                }
            }
        },
        "registry_svc.SaveDefinitionResponse": {
            "type": "object"
        },
        "registry_svc.Usage": {
            "type": "object",
            "properties": {
                "percent": {
                    "description": "Usage percentage.",
                    "type": "number"
                },
                "total": {
                    "description": "Total available amount (in bytes).",
                    "type": "integer",
                    "format": "int64"
                },
                "used": {
                    "description": "Used amount (in bytes).",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "secret_svc.ChecksumAlgorithm": {
            "type": "string",
            "enum": [
                "",
                "CRC32",
                "BLAKE2s",
                "SHA-256",
                "SHA-512"
            ],
            "x-enum-varnames": [
                "ChecksumAlgorithmUnspecified",
                "ChecksumAlgorithmCRC32",
                "ChecksumAlgorithmBlake2s",
                "ChecksumAlgorithmSha256",
                "ChecksumAlgorithmSha512"
            ]
        },
        "secret_svc.DecryptValueRequest": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "secret_svc.DecryptValueResponse": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "secret_svc.EncryptValueRequest": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "secret_svc.EncryptValueResponse": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "secret_svc.IsSecureResponse": {
            "type": "object",
            "required": [
                "isSecure"
            ],
            "properties": {
                "isSecure": {
                    "type": "boolean"
                }
            }
        },
        "secret_svc.ListSecretsRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "secret_svc.ListSecretsResponse": {
            "type": "object",
            "properties": {
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/secret_svc.Secret"
                    }
                }
            }
        },
        "secret_svc.RemoveSecretsRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "key": {
                    "type": "string"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "secret_svc.RemoveSecretsResponse": {
            "type": "object"
        },
        "secret_svc.SaveSecretsRequest": {
            "type": "object",
            "properties": {
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/secret_svc.Secret"
                    }
                }
            }
        },
        "secret_svc.SaveSecretsResponse": {
            "type": "object"
        },
        "secret_svc.Secret": {
            "type": "object",
            "properties": {
                "canChangeDeleters": {
                    "description": "Slugs of services/users who can change the deleters list",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "canChangeReaders": {
                    "description": "Slugs of services/users who can change the readers list",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "canChangeWriters": {
                    "description": "Slugs of services/users who can change the writers list",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "checksum": {
                    "description": "Checksum of the secret value",
                    "type": "string"
                },
                "checksumAlgorithm": {
                    "description": "Algorithm used for the checksum (e.g., \"CRC32\")",
                    "allOf": [
                        {
                            "$ref": "#/definitions/secret_svc.ChecksumAlgorithm"
                        }
                    ],
                    "example": "CRC32"
                },
                "deleters": {
                    "description": "Slugs of services/users who can delete the secret",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "encrypted": {
                    "description": "Whether the secret is encrypted\nAll secrets are encrypted before written to the DB.\nThis really only exists for write requests to know if the secret is already encrypted.\nIe: while most ` + "`" + `secret save [key] [value]` + "`" + ` commands are probably not encrypted,\nFile based saves, eg. ` + "`" + `secret save secretA.yaml` + "`" + ` are probably encrypted.",
                    "type": "boolean"
                },
                "id": {
                    "description": "Id of the secret",
                    "type": "string"
                },
                "key": {
                    "description": "Envar or slug-like key of the secret",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace of the secret",
                    "type": "string"
                },
                "readers": {
                    "description": "Slugs of services/users who can read the secret",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "value": {
                    "description": "Secret Value",
                    "type": "string"
                },
                "writers": {
                    "description": "Slugs of services/users who can modify the secret",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "source_svc.CheckoutRepoRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Password or token for HTTPS auth",
                    "type": "string"
                },
                "ssh_key": {
                    "description": "SSH private key (optional for SSH connection)",
                    "type": "string"
                },
                "ssh_key_pwd": {
                    "description": "Password for SSH private key if encrypted (optional)",
                    "type": "string"
                },
                "token": {
                    "description": "Token for HTTPS auth (optional for SSH)",
                    "type": "string"
                },
                "url": {
                    "description": "Full repository URL (e.g., https://github.com/user/repo)",
                    "type": "string"
                },
                "username": {
                    "description": "Username for HTTPS or SSH user (optional for SSH)",
                    "type": "string"
                },
                "version": {
                    "description": "Branch, tag, or commit SHA",
                    "type": "string"
                }
            }
        },
        "source_svc.CheckoutRepoResponse": {
            "type": "object",
            "properties": {
                "dir": {
                    "description": "Directory where the repository was checked out",
                    "type": "string"
                }
            }
        },
        "source_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "stable_diffusion.Txt2ImgRequest": {
            "type": "object",
            "properties": {
                "alwayson_scripts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "batch_size": {
                    "type": "integer"
                },
                "cfg_scale": {
                    "type": "number"
                },
                "comments": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "denoising_strength": {
                    "type": "number"
                },
                "disable_extra_networks": {
                    "type": "boolean"
                },
                "do_not_save_grid": {
                    "type": "boolean"
                },
                "do_not_save_samples": {
                    "type": "boolean"
                },
                "enable_hr": {
                    "type": "boolean"
                },
                "eta": {
                    "type": "number"
                },
                "firstpass_image": {
                    "type": "string"
                },
                "firstphase_height": {
                    "type": "integer"
                },
                "firstphase_width": {
                    "type": "integer"
                },
                "force_task_id": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "hr_checkpoint_name": {
                    "type": "string"
                },
                "hr_negative_prompt": {
                    "type": "string"
                },
                "hr_prompt": {
                    "type": "string"
                },
                "hr_resize_x": {
                    "type": "integer"
                },
                "hr_resize_y": {
                    "type": "integer"
                },
                "hr_sampler_name": {
                    "type": "string"
                },
                "hr_scale": {
                    "type": "number"
                },
                "hr_scheduler": {
                    "type": "string"
                },
                "hr_second_pass_steps": {
                    "type": "integer"
                },
                "hr_upscaler": {
                    "type": "string"
                },
                "infotext": {
                    "type": "string"
                },
                "n_iter": {
                    "type": "integer"
                },
                "negative_prompt": {
                    "type": "string"
                },
                "override_settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "override_settings_restore_afterwards": {
                    "type": "boolean"
                },
                "prompt": {
                    "type": "string"
                },
                "refiner_checkpoint": {
                    "type": "string"
                },
                "refiner_switch_at": {
                    "type": "number"
                },
                "restore_faces": {
                    "type": "boolean"
                },
                "s_churn": {
                    "type": "number"
                },
                "s_min_uncond": {
                    "type": "number"
                },
                "s_noise": {
                    "type": "number"
                },
                "s_tmax": {
                    "type": "number"
                },
                "s_tmin": {
                    "type": "number"
                },
                "sampler_index": {
                    "type": "string"
                },
                "sampler_name": {
                    "type": "string"
                },
                "save_images": {
                    "type": "boolean"
                },
                "scheduler": {
                    "type": "string"
                },
                "script_args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "script_name": {
                    "type": "string"
                },
                "seed": {
                    "type": "integer"
                },
                "seed_resize_from_h": {
                    "type": "integer"
                },
                "seed_resize_from_w": {
                    "type": "integer"
                },
                "send_images": {
                    "type": "boolean"
                },
                "steps": {
                    "type": "integer"
                },
                "styles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subseed": {
                    "type": "integer"
                },
                "subseed_strength": {
                    "type": "number"
                },
                "tiling": {
                    "type": "boolean"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "user_svc.AddUserToOrganizationRequest": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string"
                }
            }
        },
        "user_svc.AddUserToOrganizationResponse": {
            "type": "object"
        },
        "user_svc.AssignPermissionsRequest": {
            "type": "object",
            "properties": {
                "permissionLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.PermissionLink"
                    }
                }
            }
        },
        "user_svc.AssignPermissionsResponse": {
            "type": "object"
        },
        "user_svc.AuthToken": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active tokens contain the most up-to-date information.\nWhen a user's role changes—due to role assignment, organization\ncreation/assignment, etc.—all existing tokens are marked inactive.\nActive tokens are reused during login, while inactive tokens\nare retained for historical reference.",
                    "type": "boolean"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "user_svc.ChangePasswordRequest": {
            "type": "object",
            "properties": {
                "currentPassword": {
                    "type": "string"
                },
                "newPassword": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "user_svc.ChangePasswordResponse": {
            "type": "object"
        },
        "user_svc.Contact": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier, which can be a URL.\n\nExample values: \"joe12\" (openorch username), \"twitter.com/thejoe\" (twitter url), \"joe@joesdomain.com\" (email)",
                    "type": "string",
                    "example": "twitter.com/thejoe"
                },
                "isPrimary": {
                    "description": "If this is the primary contact method",
                    "type": "boolean"
                },
                "platform": {
                    "description": "Platform of the contact (e.g., \"email\", \"phone\", \"twitter\")",
                    "type": "string",
                    "example": "twitter"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "value": {
                    "description": "Value is the platform local unique identifier.\nIe. while the ` + "`" + `id` + "`" + ` of a Twitter contact is ` + "`" + `twitter.com/thejoe` + "`" + `, the value will be only ` + "`" + `thejoe` + "`" + `.\nFor email and phones the ` + "`" + `id` + "`" + ` and the ` + "`" + `value` + "`" + ` will be the same.\nThis field mostly exists for display purposes.\n\nExample values: \"joe12\" (openorch username), \"thejoe\" (twitter username), \"joe@joesdomain.com\" (email)",
                    "type": "string",
                    "example": "thejoe"
                },
                "verified": {
                    "description": "Whether the contact is verified",
                    "type": "boolean"
                }
            }
        },
        "user_svc.CreateOrganizationRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Full name of the organization.",
                    "type": "string"
                },
                "slug": {
                    "description": "URL-friendly unique (inside the Singularon platform) identifier for the ` + "`" + `organization` + "`" + `.",
                    "type": "string"
                }
            }
        },
        "user_svc.CreateOrganizationResponse": {
            "type": "object"
        },
        "user_svc.CreateRoleRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "user_svc.CreateRoleResponse": {
            "type": "object",
            "properties": {
                "role": {
                    "$ref": "#/definitions/user_svc.Role"
                }
            }
        },
        "user_svc.CreateUserRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user": {
                    "$ref": "#/definitions/user_svc.User"
                }
            }
        },
        "user_svc.CreateUserResponse": {
            "type": "object"
        },
        "user_svc.DeleteRoleResponse": {
            "type": "object"
        },
        "user_svc.DeleteUserResponse": {
            "type": "object"
        },
        "user_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "user_svc.GetPermissionsResponse": {
            "type": "object",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.Permission"
                    }
                }
            }
        },
        "user_svc.GetPublicKeyResponse": {
            "type": "object",
            "properties": {
                "publicKey": {
                    "type": "string"
                }
            }
        },
        "user_svc.GetRolesResponse": {
            "type": "object",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.Role"
                    }
                }
            }
        },
        "user_svc.GetUsersRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "$ref": "#/definitions/datastore.Query"
                }
            }
        },
        "user_svc.GetUsersResponse": {
            "type": "object",
            "properties": {
                "after": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.User"
                    }
                }
            }
        },
        "user_svc.Grant": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "permissionId": {
                    "type": "string"
                },
                "slugs": {
                    "description": "Slugs who are granted the PermissionId",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "user_svc.IsAuthorizedRequest": {
            "type": "object",
            "properties": {
                "contactsGranted": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "grantedSlugs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "user_svc.IsAuthorizedResponse": {
            "type": "object",
            "properties": {
                "authorized": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/user_svc.User"
                }
            }
        },
        "user_svc.ListGrantsRequest": {
            "type": "object",
            "properties": {
                "permissionId": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "user_svc.ListGrantsResponse": {
            "type": "object",
            "properties": {
                "grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.Grant"
                    }
                }
            }
        },
        "user_svc.LoginRequest": {
            "type": "object",
            "properties": {
                "contact": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "user_svc.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "$ref": "#/definitions/user_svc.AuthToken"
                }
            }
        },
        "user_svc.Organization": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Full name of the organization",
                    "type": "string",
                    "example": "Acme Corporation"
                },
                "slug": {
                    "description": "URL-friendly unique (inside the Singularon platform) identifier for the ` + "`" + `organization` + "`" + `.",
                    "type": "string",
                    "example": "acme-corporation"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "user_svc.Permission": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "eg. \"user.viewer\"",
                    "type": "string"
                },
                "name": {
                    "description": "eg. \"User Viewer\"",
                    "type": "string"
                },
                "ownerId": {
                    "description": "Service who owns the permission\n\nUncertain if this aligns with the system's use of slugs.\nIssue encountered: I renamed Docker Svc to Container Svc in two steps (by mistake).\nThe name/slug had already changed to \"container-svc,\" but data was still being saved\nin the \"dockerSvcCredentials\" table.\nAfter renaming the tables as well, I hit a \"cannot update unowned permission\" error\nbecause ownership relies on this field rather than the user slug. YMMV.",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "user_svc.PermissionLink": {
            "type": "object",
            "properties": {
                "permissionId": {
                    "type": "string"
                },
                "roleId": {
                    "type": "string"
                }
            }
        },
        "user_svc.ReadUserByTokenResponse": {
            "type": "object",
            "properties": {
                "activeOrganizationId": {
                    "type": "string"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.Organization"
                    }
                },
                "user": {
                    "$ref": "#/definitions/user_svc.User"
                }
            }
        },
        "user_svc.RegisterRequest": {
            "type": "object",
            "properties": {
                "contact": {
                    "$ref": "#/definitions/user_svc.Contact"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "user_svc.RegisterResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "$ref": "#/definitions/user_svc.AuthToken"
                }
            }
        },
        "user_svc.RemoveUserFromOrganizationRequest": {
            "type": "object"
        },
        "user_svc.RemoveUserFromOrganizationResponse": {
            "type": "object"
        },
        "user_svc.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "newPassword": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "user_svc.ResetPasswordResponse": {
            "type": "object"
        },
        "user_svc.Role": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "user_svc.SaveGrantsRequest": {
            "type": "object",
            "properties": {
                "grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.Grant"
                    }
                }
            }
        },
        "user_svc.SaveGrantsResponse": {
            "type": "object"
        },
        "user_svc.SavePermissionsRequest": {
            "type": "object",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.Permission"
                    }
                }
            }
        },
        "user_svc.SavePermissionsResponse": {
            "type": "object",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.Permission"
                    }
                }
            }
        },
        "user_svc.SaveProfileRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "user_svc.SaveProfileResponse": {
            "type": "object"
        },
        "user_svc.SetRolePermissionsRequest": {
            "type": "object",
            "properties": {
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "user_svc.SetRolePermissionsResponse": {
            "type": "object"
        },
        "user_svc.User": {
            "type": "object",
            "properties": {
                "contacts": {
                    "description": "Contacts are used for login and identification purposes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.Contact"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Full name of the organization.",
                    "type": "string",
                    "example": "Jane Doe"
                },
                "passwordHash": {
                    "type": "string"
                },
                "slug": {
                    "description": "URL-friendly unique (inside the Singularon platform) identifier for the ` + "`" + `user` + "`" + `.",
                    "type": "string",
                    "example": "jane-doe"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and token acquired from the User Svc Login endpoint.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenOrch API",
        "url": "https://openorch.org/docs/category/openorch-api"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.3.0-rc.29",
	Host:             "localhost:58231",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "OpenOrch",
	Description:      "A language-agnostic microservices framework for building AI applications.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
